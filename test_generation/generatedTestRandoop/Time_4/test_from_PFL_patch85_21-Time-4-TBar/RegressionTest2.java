import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial3.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = partial3.isSupported(dateTimeFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial14 = partial3.withFieldAddWrapped(durationFieldType12, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = partial6.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial6.withChronologyRetainFields(chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial6.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial17.plus(readablePeriod21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        java.lang.String str26 = partial23.toString();
        boolean boolean27 = partial17.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial23.toDateTime(readableInstant29);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        boolean boolean38 = partial33.equals((java.lang.Object) 10.0f);
        int int39 = partial33.size();
        boolean boolean40 = partial23.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean48 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime53 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        boolean boolean57 = partial49.isBefore((org.joda.time.ReadablePartial) partial54);
        int[] intArray58 = partial54.getValues();
        org.joda.time.Chronology chronology59 = partial54.getChronology();
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Partial partial61 = partial5.withChronologyRetainFields(chronology59);
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology59);
        org.joda.time.DurationFieldType durationFieldType63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial65 = partial62.withFieldAddWrapped(durationFieldType63, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(partial61);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeField[] dateTimeFieldArray76 = partial75.getFields();
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial79 = partial75.withPeriodAdded(readablePeriod77, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType81 = partial75.getFieldType((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(dateTimeFieldArray76);
        org.junit.Assert.assertNotNull(partial79);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        int int11 = partial8.size();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial14 = partial8.withPeriodAdded(readablePeriod12, (int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = partial14.getFormatter();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial17.plus(readablePeriod21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        boolean boolean35 = partial22.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = partial36.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = partial36.toString(dateTimeFormatter38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial42 = partial36.withPeriodAdded(readablePeriod40, (int) (byte) 100);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        boolean boolean46 = partial36.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        boolean boolean53 = partial48.equals((java.lang.Object) 10.0f);
        boolean boolean54 = partial36.isMatch((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology55 = partial36.getChronology();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial36.minus(readablePeriod56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        boolean boolean59 = partial57.isSupported(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = partial57.getChronology();
        org.joda.time.Partial partial61 = partial30.withChronologyRetainFields(chronology60);
        boolean boolean62 = partial14.isAfter((org.joda.time.ReadablePartial) partial61);
        java.util.Locale locale64 = null;
        java.lang.String str65 = partial61.toString("[]", locale64);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNull(dateTimeFormatter15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(dateTimeFormatter37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        java.lang.String str9 = partial8.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = partial8.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = partial8.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        java.lang.String str14 = partial10.toString();
        boolean boolean15 = partial3.equals((java.lang.Object) partial10);
        java.lang.String str16 = partial10.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial25.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        int int35 = partial7.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial7.getFieldTypes();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial37.withPeriodAdded(readablePeriod41, (int) (byte) 100);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial37.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        boolean boolean54 = partial49.equals((java.lang.Object) 10.0f);
        boolean boolean55 = partial37.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology56 = partial37.getChronology();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial37.minus(readablePeriod57);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = partial58.getFieldTypes();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime66 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        int[] intArray67 = partial60.getValues();
        org.joda.time.Partial partial68 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray70 = new int[] {};
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray70, chronology71);
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = partial74.toDateTime(readableInstant75);
        org.joda.time.DateTime dateTime77 = partial73.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        int[] intArray78 = partial73.getValues();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray78, chronology79);
        org.joda.time.Partial partial81 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray78);
        org.joda.time.Partial partial82 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray78);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = partial4.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray7 = new int[] {};
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(dateTimeFieldTypeArray6, intArray7, chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial9.toString(dateTimeFormatter10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial9.minus(readablePeriod12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial15.withChronologyRetainFields(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial15.plus(readablePeriod19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial15.withPeriodAdded(readablePeriod21, (int) (byte) 10);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial23.withPeriodAdded(readablePeriod30, (int) ' ');
        org.joda.time.Chronology chronology33 = partial32.getChronology();
        org.joda.time.Partial partial34 = partial13.withChronologyRetainFields(chronology33);
        org.joda.time.Partial partial35 = partial4.withChronologyRetainFields(chronology33);
        org.joda.time.DurationFieldType durationFieldType36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial38 = partial35.withFieldAddWrapped(durationFieldType36, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial35);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial13.withPeriodAdded(readablePeriod14, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray18 = new int[] {};
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray18, chronology19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int[] intArray26 = partial21.getValues();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray26, chronology27);
        boolean boolean29 = partial16.isMatch((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray32, chronology35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = partial16.isMatch((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean44 = partial0.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial0.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial50 = partial47.withFieldAdded(durationFieldType48, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(partial47);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        org.joda.time.Partial partial8 = partial6.without(dateTimeFieldType7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial9.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        boolean boolean26 = partial21.equals((java.lang.Object) 10.0f);
        boolean boolean27 = partial9.isMatch((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial29.withChronologyRetainFields(chronology31);
        java.lang.String str33 = partial29.toString();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        boolean boolean42 = partial34.isBefore((org.joda.time.ReadablePartial) partial39);
        int[] intArray43 = partial34.getValues();
        boolean boolean44 = partial29.isEqual((org.joda.time.ReadablePartial) partial34);
        java.lang.String str45 = partial29.toStringList();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial47.plus(readablePeriod51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial55 = partial47.withPeriodAdded(readablePeriod53, (int) (byte) 10);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime60 = partial56.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime62 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean63 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        org.joda.time.Partial partial65 = partial9.without(dateTimeFieldType64);
        boolean boolean66 = partial6.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        org.joda.time.DateTime dateTime71 = partial67.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = null;
        boolean boolean74 = partial65.isSupported(dateTimeFieldType73);
        org.joda.time.Partial partial75 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Partial partial4 = partial0.plus(readablePeriod3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial6.plus(readablePeriod10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        java.lang.String str22 = partial19.toString();
        boolean boolean23 = partial13.isAfter((org.joda.time.ReadablePartial) partial19);
        boolean boolean24 = partial11.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial25.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial25.toString(dateTimeFormatter27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial25.withPeriodAdded(readablePeriod29, (int) (byte) 100);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial25.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        boolean boolean42 = partial37.equals((java.lang.Object) 10.0f);
        boolean boolean43 = partial25.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology44 = partial25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial25.minus(readablePeriod45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = partial46.isSupported(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = partial46.getChronology();
        org.joda.time.Partial partial50 = partial19.withChronologyRetainFields(chronology49);
        boolean boolean51 = partial0.isEqual((org.joda.time.ReadablePartial) partial19);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial19.minus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        org.joda.time.DateTime dateTime59 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime60 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial19.isMatch((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Partial partial4 = partial0.plus(readablePeriod3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        org.joda.time.Partial partial6 = partial4.without(dateTimeFieldType5);
        java.lang.String str7 = partial6.toString();
        int int8 = partial6.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial10.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial11.withChronologyRetainFields(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial11.plus(readablePeriod15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        java.lang.String str20 = partial17.toString();
        boolean boolean21 = partial11.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial17.toDateTime(readableInstant23);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial27.withChronologyRetainFields(chronology29);
        boolean boolean32 = partial27.equals((java.lang.Object) 10.0f);
        int int33 = partial27.size();
        boolean boolean34 = partial17.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        org.joda.time.Partial partial45 = partial42.without(dateTimeFieldType44);
        boolean boolean46 = partial6.isEqual((org.joda.time.ReadablePartial) partial42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = partial6.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray50 = new int[] {};
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(dateTimeFieldTypeArray49, intArray50, chronology51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial52.toString(dateTimeFormatter53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial52.minus(readablePeriod55);
        java.lang.String str57 = partial52.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        org.joda.time.Partial partial59 = partial52.without(dateTimeFieldType58);
        int int60 = partial6.compareTo((org.joda.time.ReadablePartial) partial52);
        java.util.Locale locale62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = partial6.toString("", locale62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial20.minus(readablePeriod40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int[] intArray51 = partial46.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray51, chronology52);
        boolean boolean54 = partial41.equals((java.lang.Object) partial53);
        int int55 = partial19.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial41.plus(readablePeriod56);
        java.lang.String str58 = partial57.toStringList();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial24.without(dateTimeFieldType25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        java.lang.String str32 = partial28.toString();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        boolean boolean41 = partial33.isBefore((org.joda.time.ReadablePartial) partial38);
        int[] intArray42 = partial33.getValues();
        boolean boolean43 = partial28.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean44 = partial24.isMatch((org.joda.time.ReadablePartial) partial28);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial28.plus(readablePeriod45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property48 = partial46.property(dateTimeFieldType47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(partial46);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        java.lang.String str57 = partial54.toString();
        boolean boolean58 = partial48.isAfter((org.joda.time.ReadablePartial) partial54);
        boolean boolean59 = partial40.isEqual((org.joda.time.ReadablePartial) partial54);
        boolean boolean60 = partial29.equals((java.lang.Object) partial40);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        org.joda.time.Partial partial62 = partial40.without(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(partial62);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray11, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial8.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = partial8.indexOf(dateTimeFieldType24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial8.minus(readablePeriod26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = partial27.isSupported(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        java.lang.String str7 = partial6.toString();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        int int10 = partial6.size();
        int int11 = partial6.size();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial6.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = partial13.getFormatter();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial17.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial17.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial17.withPeriodAdded(readablePeriod21, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial23.toString(dateTimeFormatter24);
        java.lang.String str26 = partial23.toString();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        java.lang.String str32 = partial28.toString();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial35 = partial28.withPeriodAdded(readablePeriod33, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray38, chronology41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology50 = partial35.getChronology();
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology50);
        org.joda.time.Partial partial52 = partial23.withChronologyRetainFields(chronology50);
        org.joda.time.Partial partial53 = partial13.withChronologyRetainFields(chronology50);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial53);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial6.minus(readablePeriod8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = partial9.getFieldTypes();
        java.lang.String str11 = partial9.toStringList();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = partial1.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial25.getChronology();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray31 = new int[] {};
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray31, chronology32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int[] intArray39 = partial34.getValues();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray39, chronology40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray43);
        org.joda.time.Partial partial47 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial46);
        boolean boolean48 = partial28.isAfter((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial50.withChronologyRetainFields(chronology52);
        java.lang.String str54 = partial50.toString();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        org.joda.time.DateTime dateTime59 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        boolean boolean62 = partial60.isBefore((org.joda.time.ReadablePartial) partial61);
        boolean boolean63 = partial55.isBefore((org.joda.time.ReadablePartial) partial60);
        int[] intArray64 = partial55.getValues();
        boolean boolean65 = partial50.isEqual((org.joda.time.ReadablePartial) partial55);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial50.withPeriodAdded(readablePeriod66, (int) (short) 100);
        boolean boolean69 = partial46.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.DateTime dateTime74 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime75 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime76 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        boolean boolean79 = partial1.isSupported(dateTimeFieldType78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property81 = partial1.property(dateTimeFieldType80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial0.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology11 = partial0.getChronology();
        java.util.Locale locale13 = null;
        java.lang.String str14 = partial0.toString("[]", locale13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial0.minus(readablePeriod15);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial16);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial20 = partial17.withPeriodAdded(readablePeriod18, (int) (short) 100);
        int int21 = partial8.compareTo((org.joda.time.ReadablePartial) partial20);
        java.lang.String str22 = partial8.toStringList();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime27 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        boolean boolean31 = partial23.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial33.plus(readablePeriod37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial33.withPeriodAdded(readablePeriod39, (int) (byte) 10);
        int int42 = partial28.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = partial41.isSupported(dateTimeFieldType43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (-1));
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial49.plus(readablePeriod53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        java.lang.String str58 = partial55.toString();
        boolean boolean59 = partial49.isAfter((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = partial60.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial60.toString(dateTimeFormatter62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial66 = partial60.withPeriodAdded(readablePeriod64, (int) (byte) 100);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        boolean boolean69 = partial67.isBefore((org.joda.time.ReadablePartial) partial68);
        boolean boolean70 = partial60.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        boolean boolean73 = partial71.isBefore((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = partial72.withChronologyRetainFields(chronology74);
        boolean boolean77 = partial72.equals((java.lang.Object) 10.0f);
        boolean boolean78 = partial60.isMatch((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology79 = partial60.getChronology();
        boolean boolean80 = partial49.isEqual((org.joda.time.ReadablePartial) partial60);
        int int81 = partial47.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray82 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray83 = new int[] {};
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = new org.joda.time.Partial(dateTimeFieldTypeArray82, intArray83, chronology84);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = null;
        java.lang.String str87 = partial85.toString(dateTimeFormatter86);
        boolean boolean88 = partial47.isAfter((org.joda.time.ReadablePartial) partial85);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = partial47.getFormatter();
        int int90 = partial8.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean91 = partial4.isMatch((org.joda.time.ReadablePartial) partial8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = partial8.getFormatter();
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(dateTimeFormatter61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[]" + "'", str87, "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(dateTimeFormatter89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNull(dateTimeFormatter92);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial24.without(dateTimeFieldType25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial24.withPeriodAdded(readablePeriod27, (int) (short) 100);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray33 = new int[] {};
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray33, chronology34);
        boolean boolean36 = partial30.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeField[] dateTimeFieldArray37 = partial35.getFields();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        boolean boolean46 = partial38.isBefore((org.joda.time.ReadablePartial) partial43);
        java.lang.String str47 = partial38.toStringList();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial35.withPeriodAdded(readablePeriod55, (int) 'a');
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial58.withPeriodAdded(readablePeriod62, (int) (byte) 100);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial58.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        boolean boolean75 = partial70.equals((java.lang.Object) 10.0f);
        boolean boolean76 = partial58.isMatch((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology77 = partial58.getChronology();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial58.minus(readablePeriod78);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray81 = new int[] {};
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray80, intArray81, chronology82);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = partial85.toDateTime(readableInstant86);
        org.joda.time.DateTime dateTime88 = partial84.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        int[] intArray89 = partial84.getValues();
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.Partial partial91 = new org.joda.time.Partial(dateTimeFieldTypeArray80, intArray89, chronology90);
        boolean boolean92 = partial79.equals((java.lang.Object) partial91);
        boolean boolean93 = partial35.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.ReadablePeriod readablePeriod94 = null;
        org.joda.time.Partial partial95 = partial79.minus(readablePeriod94);
        int int96 = partial29.compareTo((org.joda.time.ReadablePartial) partial79);
        org.joda.time.DateTimeFieldType dateTimeFieldType97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial99 = partial29.withField(dateTimeFieldType97, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(partial95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.DurationFieldType durationFieldType40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial42 = partial39.withFieldAdded(durationFieldType40, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        java.lang.String str18 = partial15.toString();
        boolean boolean19 = partial9.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = partial15.toDateTime(readableInstant21);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        boolean boolean30 = partial25.equals((java.lang.Object) 10.0f);
        int int31 = partial25.size();
        boolean boolean32 = partial15.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean40 = partial25.equals((java.lang.Object) 0);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial25.plus(readablePeriod41);
        int int43 = partial6.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.DurationFieldType durationFieldType44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial46 = partial42.withFieldAdded(durationFieldType44, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray22 = new int[] {};
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray21, intArray22, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray22, chronology25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = partial6.isMatch((org.joda.time.ReadableInstant) dateTime30);
        java.lang.Class<?> wildcardClass34 = dateTime30.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray41 = new int[] {};
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray41, chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial43.toString(dateTimeFormatter44);
        boolean boolean46 = partial18.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial55.withChronologyRetainFields(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial55.plus(readablePeriod59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        java.lang.String str64 = partial61.toString();
        boolean boolean65 = partial55.isAfter((org.joda.time.ReadablePartial) partial61);
        boolean boolean66 = partial53.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = partial67.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = partial67.toString(dateTimeFormatter69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial73 = partial67.withPeriodAdded(readablePeriod71, (int) (byte) 100);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial67.isBefore((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        boolean boolean80 = partial78.isBefore((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial79.withChronologyRetainFields(chronology81);
        boolean boolean84 = partial79.equals((java.lang.Object) 10.0f);
        boolean boolean85 = partial67.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology86 = partial67.getChronology();
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Partial partial88 = partial67.minus(readablePeriod87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = partial88.isSupported(dateTimeFieldType89);
        org.joda.time.Chronology chronology91 = partial88.getChronology();
        org.joda.time.Partial partial92 = partial61.withChronologyRetainFields(chronology91);
        org.joda.time.Partial partial93 = partial43.withChronologyRetainFields(chronology91);
        org.joda.time.Partial partial94 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial93);
        org.joda.time.ReadablePeriod readablePeriod95 = null;
        org.joda.time.Partial partial97 = partial94.withPeriodAdded(readablePeriod95, 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(dateTimeFormatter68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertNotNull(partial97);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        org.joda.time.Partial partial6 = partial0.without(dateTimeFieldType5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = partial6.getFields();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial18.withChronologyRetainFields(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial18.plus(readablePeriod22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial18.withPeriodAdded(readablePeriod24, (int) (byte) 10);
        int int27 = partial13.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = partial26.isSupported(dateTimeFieldType28);
        int int30 = partial26.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial26.getFormatter();
        org.joda.time.Partial partial32 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial26);
        int int33 = partial6.compareTo((org.joda.time.ReadablePartial) partial26);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial3.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial3.minus(readablePeriod6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial9.withPeriodAdded(readablePeriod15, (int) (byte) 10);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial17.withPeriodAdded(readablePeriod24, (int) ' ');
        org.joda.time.Chronology chronology27 = partial26.getChronology();
        org.joda.time.Partial partial28 = partial7.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        org.joda.time.Partial partial30 = partial28.without(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        java.lang.String str17 = partial14.toString();
        boolean boolean18 = partial8.isAfter((org.joda.time.ReadablePartial) partial14);
        boolean boolean19 = partial6.isBefore((org.joda.time.ReadablePartial) partial14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField21 = partial6.getField(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray56 = new int[] {};
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray56, chronology57);
        boolean boolean59 = partial53.isAfter((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial53.getChronology();
        boolean boolean61 = partial18.equals((java.lang.Object) chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        org.joda.time.Partial partial63 = partial18.without(dateTimeFieldType62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial65.withPeriodAdded(readablePeriod66, (int) (byte) 0);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.DateTime dateTime74 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime75 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        int[] intArray76 = partial69.getValues();
        boolean boolean77 = partial68.isMatch((org.joda.time.ReadablePartial) partial69);
        int int78 = partial63.compareTo((org.joda.time.ReadablePartial) partial69);
        java.util.Locale locale80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = partial69.toString("hi!", locale80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray18 = new int[] {};
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray18, chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial20.withPeriodAdded(readablePeriod21, (int) (short) 100);
        int[] intArray24 = partial20.getValues();
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = partial25.isSupported(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial18.getChronology();
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        java.lang.String str22 = partial19.toString();
        boolean boolean23 = partial13.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial24.toString(dateTimeFormatter26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial24.withPeriodAdded(readablePeriod28, (int) (byte) 100);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        boolean boolean34 = partial24.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = partial36.withChronologyRetainFields(chronology38);
        boolean boolean41 = partial36.equals((java.lang.Object) 10.0f);
        boolean boolean42 = partial24.isMatch((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology43 = partial24.getChronology();
        boolean boolean44 = partial13.isEqual((org.joda.time.ReadablePartial) partial24);
        boolean boolean45 = partial7.isEqual((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = partial24.indexOf(dateTimeFieldType46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial24.plus(readablePeriod48);
        int[] intArray50 = partial24.getValues();
        java.lang.Class<?> wildcardClass51 = intArray50.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = partial8.getFields();
        java.util.Locale locale13 = null;
        java.lang.String str14 = partial8.toString("[]", locale13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial8.withPeriodAdded(readablePeriod15, (int) (short) 100);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial17);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial25.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial25.toString(dateTimeFormatter27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial25.withPeriodAdded(readablePeriod29, (int) (byte) 100);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial25.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        boolean boolean42 = partial37.equals((java.lang.Object) 10.0f);
        boolean boolean43 = partial25.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology44 = partial25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial25.minus(readablePeriod45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = partial47.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial47.toString(dateTimeFormatter49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial47.withChronologyRetainFields(chronology51);
        boolean boolean53 = partial25.equals((java.lang.Object) chronology51);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial54.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial64.withChronologyRetainFields(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial64.plus(readablePeriod68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial64.withPeriodAdded(readablePeriod70, (int) (byte) 10);
        int int73 = partial59.compareTo((org.joda.time.ReadablePartial) partial72);
        boolean boolean74 = partial25.isBefore((org.joda.time.ReadablePartial) partial72);
        boolean boolean75 = partial7.equals((java.lang.Object) partial72);
        java.lang.String str76 = partial72.toStringList();
        org.joda.time.Chronology chronology77 = partial72.getChronology();
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology77);
        org.joda.time.Partial partial79 = new org.joda.time.Partial(chronology77);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNull(dateTimeFormatter48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertNotNull(chronology77);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial18.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial18.plus(readablePeriod21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = partial36.withChronologyRetainFields(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial36.plus(readablePeriod40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial44 = partial36.withPeriodAdded(readablePeriod42, (int) (byte) 10);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime49 = partial45.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial53 = partial44.withPeriodAdded(readablePeriod51, (int) ' ');
        org.joda.time.Chronology chronology54 = partial53.getChronology();
        int[] intArray55 = partial53.getValues();
        boolean boolean56 = partial30.isEqual((org.joda.time.ReadablePartial) partial53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray58 = new int[] {};
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(dateTimeFieldTypeArray57, intArray58, chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial63 = partial60.withPeriodAdded(readablePeriod61, (int) (short) 100);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime68 = partial64.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = partial63.isMatch((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime70 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime68);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = partial0.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial0.withPeriodAdded(readablePeriod23, (int) (byte) 1);
        java.lang.String str26 = partial0.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = partial0.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int[] intArray5 = partial0.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        boolean boolean8 = partial6.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = partial7.withChronologyRetainFields(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial7.plus(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial7.withPeriodAdded(readablePeriod13, (int) (byte) 10);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        java.lang.String str22 = partial15.toStringList();
        boolean boolean23 = partial0.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.DurationFieldType durationFieldType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial26 = partial0.withFieldAdded(durationFieldType24, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial6.plus(readablePeriod20);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = partial21.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial21.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        int[] intArray33 = partial28.getValues();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray33, chronology34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray37 = new int[] {};
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray37, chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray42 = new int[] {};
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(dateTimeFieldTypeArray41, intArray42, chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial44.withPeriodAdded(readablePeriod45, (int) (short) 100);
        int[] intArray48 = partial44.getValues();
        org.joda.time.Partial partial49 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray48);
        java.lang.Class<?> wildcardClass51 = dateTimeFieldTypeArray23.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray2 = new int[] {};
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray2, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray2, chronology5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        org.joda.time.DateTime dateTime11 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        int[] intArray13 = partial6.getValues();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial6.plus(readablePeriod14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = partial15.getFieldTypes();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial22.isBefore((org.joda.time.ReadablePartial) partial23);
        boolean boolean25 = partial17.isBefore((org.joda.time.ReadablePartial) partial22);
        int[] intArray26 = partial17.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = partial17.getFormatter();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial28.toString(dateTimeFormatter30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial28.withChronologyRetainFields(chronology32);
        java.util.Locale locale35 = null;
        java.lang.String str36 = partial28.toString("[]", locale35);
        boolean boolean37 = partial17.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        boolean boolean39 = partial17.isSupported(dateTimeFieldType38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        java.lang.String str45 = partial41.toString();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        boolean boolean54 = partial46.isBefore((org.joda.time.ReadablePartial) partial51);
        int[] intArray55 = partial46.getValues();
        boolean boolean56 = partial41.isEqual((org.joda.time.ReadablePartial) partial46);
        java.lang.String str57 = partial41.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        boolean boolean59 = partial41.isSupported(dateTimeFieldType58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        org.joda.time.Partial partial61 = partial41.without(dateTimeFieldType60);
        int int62 = partial17.compareTo((org.joda.time.ReadablePartial) partial61);
        int int63 = partial15.compareTo((org.joda.time.ReadablePartial) partial17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        java.lang.String str41 = partial38.toString();
        boolean boolean42 = partial32.isAfter((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial38.toDateTime(readableInstant44);
        int int47 = partial6.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial6.toString(dateTimeFormatter48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = partial6.isSupported(dateTimeFieldType50);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = partial7.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = partial7.toString(dateTimeFormatter9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial7.withChronologyRetainFields(chronology11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial7.isMatch((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime19 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        boolean boolean23 = partial15.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial25.plus(readablePeriod29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial25.withPeriodAdded(readablePeriod31, (int) (byte) 10);
        int int34 = partial20.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = partial33.isSupported(dateTimeFieldType35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (-1));
        boolean boolean40 = partial13.isMatch((org.joda.time.ReadablePartial) partial39);
        int[] intArray41 = partial39.getValues();
        int int42 = partial4.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology43 = partial4.getChronology();
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology43);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial34.plus(readablePeriod37);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = partial34.getFields();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial34.plus(readablePeriod40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType43 = partial34.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertNotNull(partial41);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        org.joda.time.Partial partial6 = partial0.without(dateTimeFieldType5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = partial0.getFormatter();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNull(dateTimeFormatter7);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial25.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial25.toString(dateTimeFormatter27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial25.withPeriodAdded(readablePeriod29, (int) (byte) 100);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial25.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        boolean boolean42 = partial37.equals((java.lang.Object) 10.0f);
        boolean boolean43 = partial25.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology44 = partial25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial25.minus(readablePeriod45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = partial47.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial47.toString(dateTimeFormatter49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial47.withChronologyRetainFields(chronology51);
        boolean boolean53 = partial25.equals((java.lang.Object) chronology51);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial54.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial64.withChronologyRetainFields(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial64.plus(readablePeriod68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial64.withPeriodAdded(readablePeriod70, (int) (byte) 10);
        int int73 = partial59.compareTo((org.joda.time.ReadablePartial) partial72);
        boolean boolean74 = partial25.isBefore((org.joda.time.ReadablePartial) partial72);
        boolean boolean75 = partial7.equals((java.lang.Object) partial72);
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = partial78.toDateTime(readableInstant79);
        org.joda.time.DateTime dateTime81 = partial77.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime82 = partial76.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        java.util.Locale locale84 = null;
        java.lang.String str85 = partial76.toString("[]", locale84);
        boolean boolean86 = partial7.isAfter((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Partial partial87 = new org.joda.time.Partial();
        org.joda.time.Partial partial88 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.DateTime dateTime90 = partial88.toDateTime(readableInstant89);
        org.joda.time.DateTime dateTime91 = partial87.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime92 = partial76.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNull(dateTimeFormatter48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[]" + "'", str85, "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        int int8 = partial6.indexOf(dateTimeFieldType7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime13 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        boolean boolean17 = partial9.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial19.withPeriodAdded(readablePeriod25, (int) (byte) 10);
        int int28 = partial14.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = partial27.isSupported(dateTimeFieldType29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial27.withPeriodAdded(readablePeriod31, (-1));
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial35.plus(readablePeriod39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        java.lang.String str44 = partial41.toString();
        boolean boolean45 = partial35.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = partial46.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial46.toString(dateTimeFormatter48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial46.withPeriodAdded(readablePeriod50, (int) (byte) 100);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        boolean boolean56 = partial46.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial57.isBefore((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = partial58.withChronologyRetainFields(chronology60);
        boolean boolean63 = partial58.equals((java.lang.Object) 10.0f);
        boolean boolean64 = partial46.isMatch((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology65 = partial46.getChronology();
        boolean boolean66 = partial35.isEqual((org.joda.time.ReadablePartial) partial46);
        int int67 = partial33.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray69 = new int[] {};
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray68, intArray69, chronology70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = partial71.toString(dateTimeFormatter72);
        boolean boolean74 = partial33.isAfter((org.joda.time.ReadablePartial) partial71);
        boolean boolean75 = partial6.isEqual((org.joda.time.ReadablePartial) partial33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField77 = partial6.getField((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(dateTimeFormatter47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean32 = partial17.equals((java.lang.Object) 0);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial17.plus(readablePeriod33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = partial34.get(dateTimeFieldType35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial34);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial20.minus(readablePeriod40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int[] intArray51 = partial46.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray51, chronology52);
        boolean boolean54 = partial41.equals((java.lang.Object) partial53);
        int int55 = partial19.compareTo((org.joda.time.ReadablePartial) partial41);
        java.lang.Class<?> wildcardClass56 = partial41.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        org.joda.time.Partial partial6 = partial0.without(dateTimeFieldType5);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = partial6.getValue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(partial6);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        int int14 = partial1.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial17 = partial13.withField(dateTimeFieldType15, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        java.util.Locale locale10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = partial3.toString("hi!", locale10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int[] intArray5 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = partial0.toString(dateTimeFormatter6);
        java.lang.String str8 = partial0.toString();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        java.lang.String str14 = partial10.toString();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime19 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        boolean boolean23 = partial15.isBefore((org.joda.time.ReadablePartial) partial20);
        int[] intArray24 = partial15.getValues();
        boolean boolean25 = partial10.isEqual((org.joda.time.ReadablePartial) partial15);
        java.lang.String str26 = partial10.toStringList();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial28.plus(readablePeriod32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial28.withPeriodAdded(readablePeriod34, (int) (byte) 10);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] {};
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray5, chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        int[] intArray13 = partial8.getValues();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray13, chronology14);
        boolean boolean16 = partial3.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial15.getFormatter();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(dateTimeFormatter17);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        int[] intArray14 = partial0.getValues();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = partial0.getFields();
        int[] intArray16 = partial0.getValues();
        int int17 = partial0.size();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = partial18.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray21 = new int[] {};
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray21, chronology22);
        boolean boolean24 = partial18.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = partial23.getFields();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        boolean boolean34 = partial26.isBefore((org.joda.time.ReadablePartial) partial31);
        java.lang.String str35 = partial26.toStringList();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        org.joda.time.DateTime dateTime40 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean41 = partial26.isMatch((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial45 = partial23.withPeriodAdded(readablePeriod43, (int) 'a');
        java.lang.String str46 = partial23.toString();
        boolean boolean47 = partial0.isEqual((org.joda.time.ReadablePartial) partial23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField49 = partial23.getField((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial0.minus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial9.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        boolean boolean26 = partial21.equals((java.lang.Object) 10.0f);
        boolean boolean27 = partial9.isMatch((org.joda.time.ReadablePartial) partial21);
        boolean boolean28 = partial0.isEqual((org.joda.time.ReadablePartial) partial9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType30 = partial9.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial18.withChronologyRetainFields(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial18.plus(readablePeriod22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial18.withPeriodAdded(readablePeriod24, (int) (byte) 10);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial35 = partial26.withPeriodAdded(readablePeriod33, (int) ' ');
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial37.getFieldTypes();
        java.lang.String str41 = partial37.toString("[]");
        boolean boolean42 = partial35.isMatch((org.joda.time.ReadablePartial) partial37);
        int int43 = partial16.compareTo((org.joda.time.ReadablePartial) partial37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial8.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial16.withPeriodAdded(readablePeriod23, (int) ' ');
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial25.equals((java.lang.Object) boolean28);
        boolean boolean30 = partial1.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial1.getFieldTypes();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = partial32.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = partial32.toString(dateTimeFormatter34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial32.withPeriodAdded(readablePeriod36, (int) (byte) 100);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        boolean boolean42 = partial32.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        boolean boolean49 = partial44.equals((java.lang.Object) 10.0f);
        boolean boolean50 = partial32.isMatch((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology51 = partial32.getChronology();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial32.minus(readablePeriod52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial53.getFieldTypes();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime60 = partial56.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        int[] intArray62 = partial55.getValues();
        org.joda.time.Partial partial63 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray62);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray65 = new int[] {};
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(dateTimeFieldTypeArray64, intArray65, chronology66);
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = partial69.toDateTime(readableInstant70);
        org.joda.time.DateTime dateTime72 = partial68.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        int[] intArray73 = partial68.getValues();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(dateTimeFieldTypeArray64, intArray73, chronology74);
        org.joda.time.Partial partial76 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray73);
        org.joda.time.Partial partial77 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray73);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial21.getFieldTypes();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        int[] intArray30 = partial23.getValues();
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray33 = new int[] {};
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray33, chronology34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        org.joda.time.DateTime dateTime40 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        int[] intArray41 = partial36.getValues();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray41, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray41);
        int[] intArray45 = partial44.getValues();
        java.lang.String str46 = partial44.toStringList();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        org.joda.time.Partial partial15 = partial0.without(dateTimeFieldType14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial16.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial16.toString(dateTimeFormatter18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial16.withChronologyRetainFields(chronology20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial16.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial24.toString(dateTimeFormatter26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial24.withChronologyRetainFields(chronology28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial24.isMatch((org.joda.time.ReadablePartial) partial30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        boolean boolean34 = partial16.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = partial36.withChronologyRetainFields(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial36.plus(readablePeriod40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial44 = partial36.withPeriodAdded(readablePeriod42, (int) (byte) 10);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime49 = partial45.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial53 = partial44.withPeriodAdded(readablePeriod51, (int) ' ');
        org.joda.time.Chronology chronology54 = partial53.getChronology();
        org.joda.time.Partial partial55 = partial16.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial55.getFieldTypes();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial57.isBefore((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = partial58.withChronologyRetainFields(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial58.plus(readablePeriod62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial66 = partial58.withPeriodAdded(readablePeriod64, (int) (byte) 10);
        boolean boolean67 = partial55.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray69 = new int[] {};
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray68, intArray69, chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial74 = partial71.withPeriodAdded(readablePeriod72, (int) (short) 100);
        org.joda.time.Chronology chronology75 = partial74.getChronology();
        org.joda.time.Partial partial76 = partial55.withChronologyRetainFields(chronology75);
        boolean boolean77 = partial15.equals((java.lang.Object) chronology75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType79 = partial15.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial22.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial32.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        int int41 = partial27.compareTo((org.joda.time.ReadablePartial) partial40);
        int int42 = partial21.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial44.plus(readablePeriod48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial44.withPeriodAdded(readablePeriod50, (int) (byte) 10);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial52.withPeriodAdded(readablePeriod59, (int) ' ');
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        boolean boolean65 = partial61.equals((java.lang.Object) boolean64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial61.toString(dateTimeFormatter66);
        boolean boolean68 = partial21.isEqual((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime73 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial69.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        boolean boolean80 = partial78.isBefore((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial79.withChronologyRetainFields(chronology81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial84 = partial79.plus(readablePeriod83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial79.withPeriodAdded(readablePeriod85, (int) (byte) 10);
        int int88 = partial74.compareTo((org.joda.time.ReadablePartial) partial87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = partial87.isSupported(dateTimeFieldType89);
        boolean boolean91 = partial21.isEqual((org.joda.time.ReadablePartial) partial87);
        java.lang.String str92 = partial21.toStringList();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[]" + "'", str92, "[]");
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial21.getFieldTypes();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        int[] intArray30 = partial23.getValues();
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray33 = new int[] {};
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray33, chronology34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        org.joda.time.DateTime dateTime40 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        int[] intArray41 = partial36.getValues();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray41, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray46 = new int[] {};
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray46, chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial51 = partial48.withPeriodAdded(readablePeriod49, (int) (short) 100);
        int[] intArray52 = partial48.getValues();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = partial54.withChronologyRetainFields(chronology56);
        java.lang.String str58 = partial54.toString();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial54.withPeriodAdded(readablePeriod59, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray64 = new int[] {};
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(dateTimeFieldTypeArray63, intArray64, chronology65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(dateTimeFieldTypeArray62, intArray64, chronology67);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime73 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime74 = partial68.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Chronology chronology76 = partial61.getChronology();
        org.joda.time.Partial partial77 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray52, chronology76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology76);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = partial1.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = partial1.toString(dateTimeFormatter3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial7 = partial1.withPeriodAdded(readablePeriod5, (int) (byte) 100);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        boolean boolean11 = partial1.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial14 = partial1.withPeriodAdded(readablePeriod12, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray17 = new int[] {};
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray15, intArray17);
        org.joda.time.Partial partial21 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray23 = new int[] {};
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray23, chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray31 = partial26.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray31, chronology32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        java.lang.String str39 = partial35.toString();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime44 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial45.isBefore((org.joda.time.ReadablePartial) partial46);
        boolean boolean48 = partial40.isBefore((org.joda.time.ReadablePartial) partial45);
        int[] intArray49 = partial40.getValues();
        boolean boolean50 = partial35.isEqual((org.joda.time.ReadablePartial) partial40);
        int[] intArray51 = partial40.getValues();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = partial52.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial52.toString(dateTimeFormatter54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial58 = partial52.withPeriodAdded(readablePeriod56, (int) (byte) 100);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial52.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial64.withChronologyRetainFields(chronology66);
        boolean boolean69 = partial64.equals((java.lang.Object) 10.0f);
        boolean boolean70 = partial52.isMatch((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology71 = partial52.getChronology();
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray51, chronology71);
        org.joda.time.Partial partial73 = partial21.withChronologyRetainFields(chronology71);
        org.joda.time.Partial partial74 = new org.joda.time.Partial(chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int76 = partial74.get(dateTimeFieldType75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNull(dateTimeFormatter2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(partial73);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial8.withPeriodAdded(readablePeriod11, (int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial17.plus(readablePeriod21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial17.withPeriodAdded(readablePeriod23, (int) (byte) 10);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial25.withPeriodAdded(readablePeriod32, (int) ' ');
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial34.equals((java.lang.Object) boolean37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial40.plus(readablePeriod44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        java.lang.String str49 = partial46.toString();
        boolean boolean50 = partial40.isAfter((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime54 = partial46.toDateTime(readableInstant52);
        boolean boolean55 = partial34.isAfter((org.joda.time.ReadablePartial) partial46);
        java.util.Locale locale57 = null;
        java.lang.String str58 = partial34.toString("[]", locale57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial60.withChronologyRetainFields(chronology62);
        java.lang.String str64 = partial60.toString();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = partial66.toDateTime(readableInstant67);
        org.joda.time.DateTime dateTime69 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial70.isBefore((org.joda.time.ReadablePartial) partial71);
        boolean boolean73 = partial65.isBefore((org.joda.time.ReadablePartial) partial70);
        int[] intArray74 = partial65.getValues();
        boolean boolean75 = partial60.isEqual((org.joda.time.ReadablePartial) partial65);
        java.lang.String str76 = partial60.toStringList();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        boolean boolean79 = partial77.isBefore((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = partial78.withChronologyRetainFields(chronology80);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial83 = partial78.plus(readablePeriod82);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial86 = partial78.withPeriodAdded(readablePeriod84, (int) (byte) 10);
        org.joda.time.Partial partial87 = new org.joda.time.Partial();
        org.joda.time.Partial partial88 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.DateTime dateTime90 = partial88.toDateTime(readableInstant89);
        org.joda.time.DateTime dateTime91 = partial87.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime92 = partial86.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime93 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTime dateTime94 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTime dateTime95 = partial13.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        java.lang.Class<?> wildcardClass96 = dateTime92.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(partial86);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial0.minus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial9.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        boolean boolean26 = partial21.equals((java.lang.Object) 10.0f);
        boolean boolean27 = partial9.isMatch((org.joda.time.ReadablePartial) partial21);
        boolean boolean28 = partial0.isEqual((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        java.util.Locale locale37 = null;
        java.lang.String str38 = partial29.toString("[]", locale37);
        boolean boolean39 = partial9.isEqual((org.joda.time.ReadablePartial) partial29);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial42 = partial29.withPeriodAdded(readablePeriod40, (int) (short) 0);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(partial42);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] {};
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray5, chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial11.withPeriodAdded(readablePeriod15, (int) (byte) 100);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        boolean boolean21 = partial11.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial11.withPeriodAdded(readablePeriod22, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial11.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray27);
        boolean boolean32 = partial8.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial43.toString(dateTimeFormatter44);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        int int7 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray9 = new int[] {};
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime16 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        int[] intArray17 = partial12.getValues();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isAfter((org.joda.time.ReadablePartial) partial29);
        int int40 = partial1.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        boolean boolean59 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology60 = partial41.getChronology();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial41.minus(readablePeriod61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        boolean boolean64 = partial62.isSupported(dateTimeFieldType63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial62.plus(readablePeriod65);
        boolean boolean67 = partial1.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property69 = partial1.property(dateTimeFieldType68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Chronology chronology19 = partial18.getChronology();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        org.joda.time.Partial partial28 = partial26.without(dateTimeFieldType27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial29.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial30.withChronologyRetainFields(chronology32);
        java.lang.String str34 = partial30.toString();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial35.isBefore((org.joda.time.ReadablePartial) partial40);
        int[] intArray44 = partial35.getValues();
        boolean boolean45 = partial30.isEqual((org.joda.time.ReadablePartial) partial35);
        java.lang.String str46 = partial30.toStringList();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial56 = partial48.withPeriodAdded(readablePeriod54, (int) (byte) 10);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime61 = partial57.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = partial56.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime63 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = partial28.isMatch((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime65 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DurationFieldType durationFieldType66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial68 = partial18.withFieldAddWrapped(durationFieldType66, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        java.lang.String str24 = partial20.toString();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial25.isBefore((org.joda.time.ReadablePartial) partial30);
        int[] intArray34 = partial25.getValues();
        boolean boolean35 = partial20.isEqual((org.joda.time.ReadablePartial) partial25);
        java.lang.String str36 = partial20.toStringList();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial38.plus(readablePeriod42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial38.withPeriodAdded(readablePeriod44, (int) (byte) 10);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime52);
        int int55 = partial0.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial0.toString(dateTimeFormatter56);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = partial18.toString(dateTimeFormatter23);
        int[] intArray25 = partial18.getValues();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Partial partial4 = partial0.plus(readablePeriod3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        java.util.Locale locale8 = null;
        java.lang.String str9 = partial5.toString("[]", locale8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial5.toDateTime(readableInstant10);
        int int12 = partial4.compareTo((org.joda.time.ReadablePartial) partial5);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial31.withChronologyRetainFields(chronology35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial31.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        boolean boolean59 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology60 = partial41.getChronology();
        org.joda.time.Partial partial61 = partial37.withChronologyRetainFields(chronology60);
        boolean boolean62 = partial6.equals((java.lang.Object) partial61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField64 = partial6.getField((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = partial47.indexOf(dateTimeFieldType50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial47.getFieldTypes();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = partial53.toString(dateTimeFormatter55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial53.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial53.isMatch((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial66.isBefore((org.joda.time.ReadablePartial) partial67);
        boolean boolean69 = partial61.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial70.isBefore((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = partial71.withChronologyRetainFields(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial71.plus(readablePeriod75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial79 = partial71.withPeriodAdded(readablePeriod77, (int) (byte) 10);
        int int80 = partial66.compareTo((org.joda.time.ReadablePartial) partial79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        boolean boolean82 = partial79.isSupported(dateTimeFieldType81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial85 = partial79.withPeriodAdded(readablePeriod83, (-1));
        boolean boolean86 = partial59.isMatch((org.joda.time.ReadablePartial) partial85);
        int[] intArray87 = partial85.getValues();
        org.joda.time.Partial partial88 = new org.joda.time.Partial(dateTimeFieldTypeArray52, intArray87);
        int[] intArray89 = null;
        org.joda.time.Partial partial90 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = partial90.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = null;
        java.lang.String str93 = partial90.toString(dateTimeFormatter92);
        org.joda.time.Chronology chronology94 = null;
        org.joda.time.Partial partial95 = partial90.withChronologyRetainFields(chronology94);
        org.joda.time.Chronology chronology96 = partial90.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial97 = new org.joda.time.Partial(dateTimeFieldTypeArray52, intArray89, chronology96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[]" + "'", str93, "[]");
        org.junit.Assert.assertNotNull(partial95);
        org.junit.Assert.assertNotNull(chronology96);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = partial0.getFormatter();
        int[] intArray6 = partial0.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType8 = partial0.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] {};
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray5, chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial15.toString(dateTimeFormatter16);
        int[] intArray18 = partial15.getValues();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = partial19.isAfter((org.joda.time.ReadablePartial) partial22);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = partial19.indexOf(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = partial19.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray18, chronology30);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial33.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (int) (byte) 100);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial33.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial33.withPeriodAdded(readablePeriod44, 0);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        java.lang.String str52 = partial48.toString();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        boolean boolean61 = partial53.isBefore((org.joda.time.ReadablePartial) partial58);
        int[] intArray62 = partial53.getValues();
        boolean boolean63 = partial48.isEqual((org.joda.time.ReadablePartial) partial53);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial66 = partial48.withPeriodAdded(readablePeriod64, (int) (short) 100);
        boolean boolean67 = partial33.isEqual((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial32.isAfter((org.joda.time.ReadablePartial) partial66);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial10.minus(readablePeriod30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial31.getFieldTypes();
        org.joda.time.Chronology chronology33 = partial31.getChronology();
        boolean boolean34 = partial6.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        int int36 = partial31.indexOf(dateTimeFieldType35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial31.plus(readablePeriod37);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(partial38);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        org.joda.time.Partial partial15 = partial0.without(dateTimeFieldType14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray17 = new int[] {};
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        int[] intArray25 = partial20.getValues();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray25, chronology26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray29 = new int[] {};
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray29, chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray29);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        org.joda.time.Partial partial35 = partial32.without(dateTimeFieldType34);
        int int36 = partial32.size();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        java.lang.String str40 = partial37.toString();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        java.lang.String str46 = partial42.toString();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        boolean boolean55 = partial47.isBefore((org.joda.time.ReadablePartial) partial52);
        int[] intArray56 = partial47.getValues();
        boolean boolean57 = partial42.isEqual((org.joda.time.ReadablePartial) partial47);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial42.withPeriodAdded(readablePeriod58, (int) (short) 100);
        boolean boolean61 = partial37.isEqual((org.joda.time.ReadablePartial) partial42);
        boolean boolean62 = partial32.isAfter((org.joda.time.ReadablePartial) partial37);
        boolean boolean63 = partial15.isEqual((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial66 = partial32.with(dateTimeFieldType64, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial1.minus(readablePeriod6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial7.toString(dateTimeFormatter8);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = partial7.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray16 = new int[] {};
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray15, intArray16, chronology17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray16);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = partial19.indexOf(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial19.minus(readablePeriod22);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(partial23);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial9.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial9.getFormatter();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(dateTimeFormatter17);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        java.lang.String str17 = partial6.toStringList();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        org.joda.time.Partial partial12 = partial5.without(dateTimeFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial15 = partial12.withField(dateTimeFieldType13, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(partial12);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = partial6.indexOf(dateTimeFieldType10);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = partial6.getFields();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        java.lang.String str3 = partial0.toString();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        boolean boolean6 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = partial5.withChronologyRetainFields(chronology7);
        java.lang.String str9 = partial5.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        int[] intArray19 = partial10.getValues();
        boolean boolean20 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial5.withPeriodAdded(readablePeriod21, (int) (short) 100);
        boolean boolean24 = partial0.isEqual((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial25.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial25.toString(dateTimeFormatter27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial25.withPeriodAdded(readablePeriod29, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = partial25.isSupported(dateTimeFieldType32);
        boolean boolean34 = partial5.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial35.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial35.withPeriodAdded(readablePeriod39, (int) (byte) 100);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        boolean boolean45 = partial35.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields(chronology49);
        boolean boolean52 = partial47.equals((java.lang.Object) 10.0f);
        boolean boolean53 = partial35.isMatch((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology54 = partial35.getChronology();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial35.minus(readablePeriod55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = partial56.isSupported(dateTimeFieldType57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = partial59.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray62 = new int[] {};
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(dateTimeFieldTypeArray61, intArray62, chronology63);
        boolean boolean65 = partial59.isAfter((org.joda.time.ReadablePartial) partial64);
        int int66 = partial56.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        org.joda.time.Partial partial68 = partial59.without(dateTimeFieldType67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial68.plus(readablePeriod69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = partial70.withChronologyRetainFields(chronology71);
        boolean boolean73 = partial5.isEqual((org.joda.time.ReadablePartial) partial70);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property75 = partial70.property(dateTimeFieldType74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        java.util.Locale locale51 = null;
        java.lang.String str52 = partial0.toString("[]", locale51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        org.joda.time.Partial partial54 = partial0.without(dateTimeFieldType53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime60 = partial56.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        int[] intArray62 = partial55.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        boolean boolean64 = partial55.isSupported(dateTimeFieldType63);
        boolean boolean65 = partial0.equals((java.lang.Object) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = partial0.isSupported(dateTimeFieldType66);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial29.withPeriodAdded(readablePeriod30, (int) (short) 100);
        int int33 = partial20.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        boolean boolean35 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property37 = partial0.property(dateTimeFieldType36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Chronology chronology19 = partial18.getChronology();
        int[] intArray20 = partial18.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        org.joda.time.Partial partial22 = partial18.without(dateTimeFieldType21);
        java.lang.String str24 = partial22.toString("[]");
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial22.indexOf(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial10.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial11.withChronologyRetainFields(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial11.plus(readablePeriod15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        java.lang.String str20 = partial17.toString();
        boolean boolean21 = partial11.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial17.toDateTime(readableInstant23);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial27.withChronologyRetainFields(chronology29);
        boolean boolean32 = partial27.equals((java.lang.Object) 10.0f);
        int int33 = partial27.size();
        boolean boolean34 = partial17.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        org.joda.time.Partial partial45 = partial42.without(dateTimeFieldType44);
        boolean boolean46 = partial6.isEqual((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        int[] intArray54 = partial47.getValues();
        org.joda.time.Chronology chronology55 = partial47.getChronology();
        org.joda.time.Partial partial56 = partial42.withChronologyRetainFields(chronology55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial(chronology55);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(partial56);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial8.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial16.withPeriodAdded(readablePeriod23, (int) ' ');
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial25.equals((java.lang.Object) boolean28);
        boolean boolean30 = partial1.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial1.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial1.minus(readablePeriod32);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(partial33);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial3.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = partial3.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        org.joda.time.Partial partial13 = partial3.without(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = partial1.getFields();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        boolean boolean6 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = partial5.withChronologyRetainFields(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial5.plus(readablePeriod9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial5.withPeriodAdded(readablePeriod11, (int) (byte) 10);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime18 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = partial13.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial22 = partial13.withPeriodAdded(readablePeriod20, (int) ' ');
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial22.equals((java.lang.Object) boolean25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial28.plus(readablePeriod32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        java.lang.String str37 = partial34.toString();
        boolean boolean38 = partial28.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial34.toDateTime(readableInstant40);
        boolean boolean43 = partial22.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = partial44.isAfter((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial53 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial44);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.minus(readablePeriod54);
        boolean boolean56 = partial22.isEqual((org.joda.time.ReadablePartial) partial53);
        int int57 = partial53.size();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology59 = partial58.getChronology();
        org.joda.time.Partial partial60 = partial53.withChronologyRetainFields(chronology59);
        org.joda.time.Partial partial61 = partial1.withChronologyRetainFields(chronology59);
        org.joda.time.DateTimeField[] dateTimeFieldArray62 = partial1.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int64 = partial1.get(dateTimeFieldType63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTimeFieldArray62);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial22.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial32.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        int int41 = partial27.compareTo((org.joda.time.ReadablePartial) partial40);
        int int42 = partial21.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial44.plus(readablePeriod48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial44.withPeriodAdded(readablePeriod50, (int) (byte) 10);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial52.withPeriodAdded(readablePeriod59, (int) ' ');
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        boolean boolean65 = partial61.equals((java.lang.Object) boolean64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial61.toString(dateTimeFormatter66);
        boolean boolean68 = partial21.isEqual((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime73 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial69.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        boolean boolean80 = partial78.isBefore((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial79.withChronologyRetainFields(chronology81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial84 = partial79.plus(readablePeriod83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial79.withPeriodAdded(readablePeriod85, (int) (byte) 10);
        int int88 = partial74.compareTo((org.joda.time.ReadablePartial) partial87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = partial87.isSupported(dateTimeFieldType89);
        boolean boolean91 = partial21.isEqual((org.joda.time.ReadablePartial) partial87);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = null;
        boolean boolean93 = partial87.isSupported(dateTimeFieldType92);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial34.plus(readablePeriod37);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = partial34.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = partial34.toString(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial20.minus(readablePeriod40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int[] intArray51 = partial46.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray51, chronology52);
        boolean boolean54 = partial41.equals((java.lang.Object) partial53);
        int int55 = partial19.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial41.plus(readablePeriod56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial41.plus(readablePeriod58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        boolean boolean62 = partial60.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = partial61.withChronologyRetainFields(chronology63);
        java.lang.String str65 = partial61.toString();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial61.withPeriodAdded(readablePeriod66, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray70 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray71 = new int[] {};
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(dateTimeFieldTypeArray70, intArray71, chronology72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray71, chronology74);
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = partial77.toDateTime(readableInstant78);
        org.joda.time.DateTime dateTime80 = partial76.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime81 = partial75.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime82 = partial68.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray83 = partial68.getFieldTypes();
        boolean boolean84 = partial41.isMatch((org.joda.time.ReadablePartial) partial68);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int86 = partial41.get(dateTimeFieldType85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial22.isMatch((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial30.withChronologyRetainFields(chronology34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial30.isMatch((org.joda.time.ReadablePartial) partial36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = partial36.toString(dateTimeFormatter38);
        boolean boolean40 = partial22.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial42.plus(readablePeriod46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial42.withPeriodAdded(readablePeriod48, (int) (byte) 10);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime55 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial59 = partial50.withPeriodAdded(readablePeriod57, (int) ' ');
        org.joda.time.Chronology chronology60 = partial59.getChronology();
        org.joda.time.Partial partial61 = partial22.withChronologyRetainFields(chronology60);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = partial61.getFieldTypes();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial64.withChronologyRetainFields(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial64.plus(readablePeriod68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial64.withPeriodAdded(readablePeriod70, (int) (byte) 10);
        boolean boolean73 = partial61.isMatch((org.joda.time.ReadablePartial) partial72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        boolean boolean75 = partial61.isSupported(dateTimeFieldType74);
        boolean boolean76 = partial0.equals((java.lang.Object) boolean75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property78 = partial0.property(dateTimeFieldType77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        java.lang.String str20 = partial1.toStringList();
        java.lang.String str21 = partial1.toStringList();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        java.lang.String str3 = partial0.toString();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        boolean boolean6 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = partial5.withChronologyRetainFields(chronology7);
        java.lang.String str9 = partial5.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        int[] intArray19 = partial10.getValues();
        boolean boolean20 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial5.withPeriodAdded(readablePeriod21, (int) (short) 100);
        boolean boolean24 = partial0.isEqual((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray26 = new int[] {};
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray26, chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        int[] intArray34 = partial29.getValues();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray34, chronology35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray38);
        org.joda.time.Partial partial42 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        org.joda.time.Partial partial44 = partial41.without(dateTimeFieldType43);
        boolean boolean45 = partial5.equals((java.lang.Object) partial41);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial41.plus(readablePeriod46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial47.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        java.lang.String str35 = partial32.toString();
        boolean boolean36 = partial26.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial37.withPeriodAdded(readablePeriod41, (int) (byte) 100);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial37.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        boolean boolean54 = partial49.equals((java.lang.Object) 10.0f);
        boolean boolean55 = partial37.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology56 = partial37.getChronology();
        boolean boolean57 = partial26.isEqual((org.joda.time.ReadablePartial) partial37);
        int int58 = partial24.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray60 = new int[] {};
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray60, chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = partial62.toString(dateTimeFormatter63);
        boolean boolean65 = partial24.isAfter((org.joda.time.ReadablePartial) partial62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = partial24.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial24.minus(readablePeriod67);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(partial68);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial19.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial19.toString(dateTimeFormatter21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial19.withChronologyRetainFields(chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial19.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial27.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial27.withChronologyRetainFields(chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial27.isMatch((org.joda.time.ReadablePartial) partial33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        boolean boolean37 = partial19.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial56 = partial47.withPeriodAdded(readablePeriod54, (int) ' ');
        org.joda.time.Chronology chronology57 = partial56.getChronology();
        org.joda.time.Partial partial58 = partial19.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial59 = partial10.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial60 = partial6.withChronologyRetainFields(chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        boolean boolean62 = partial60.isSupported(dateTimeFieldType61);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.DateTimeField[] dateTimeFieldArray66 = partial64.getFields();
        java.lang.String str68 = partial64.toString("[]");
        int int69 = partial60.compareTo((org.joda.time.ReadablePartial) partial64);
        org.joda.time.DateTimeField[] dateTimeFieldArray70 = partial60.getFields();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray70);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial11.withChronologyRetainFields(chronology15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = partial11.toString("[]", locale18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial11);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial21.plus(readablePeriod22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        org.joda.time.Partial partial25 = partial21.without(dateTimeFieldType24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial21);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial2.withChronologyRetainFields(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        java.lang.String str28 = partial25.toString();
        boolean boolean29 = partial19.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial25.toDateTime(readableInstant31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        boolean boolean40 = partial35.equals((java.lang.Object) 10.0f);
        int int41 = partial35.size();
        boolean boolean42 = partial25.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean50 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean51 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str52 = partial0.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial0.toString(dateTimeFormatter53);
        org.joda.time.Chronology chronology55 = partial0.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = partial57.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = null;
        java.lang.String str60 = partial57.toString(dateTimeFormatter59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial63 = partial57.withPeriodAdded(readablePeriod61, (int) (byte) 100);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        boolean boolean67 = partial57.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial70 = partial57.withPeriodAdded(readablePeriod68, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = partial57.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray72 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray73 = new int[] {};
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(dateTimeFieldTypeArray72, intArray73, chronology74);
        org.joda.time.Partial partial76 = new org.joda.time.Partial(dateTimeFieldTypeArray71, intArray73);
        org.joda.time.Partial partial77 = new org.joda.time.Partial(dateTimeFieldTypeArray56, intArray73);
        java.lang.String str78 = partial77.toStringList();
        org.joda.time.Partial partial79 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial77);
        int int80 = partial0.compareTo((org.joda.time.ReadablePartial) partial79);
        java.lang.String str81 = partial0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType83 = partial0.getFieldType(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNull(dateTimeFormatter58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[]" + "'", str81, "[]");
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int int9 = partial0.size();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial10.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial16.toString(dateTimeFormatter18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.Partial partial40 = partial16.withChronologyRetainFields(chronology39);
        boolean boolean41 = partial0.isEqual((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial0.plus(readablePeriod42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = partial0.isSupported(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial24.without(dateTimeFieldType25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial24.withPeriodAdded(readablePeriod27, (int) (short) 100);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray33 = new int[] {};
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray33, chronology34);
        boolean boolean36 = partial30.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeField[] dateTimeFieldArray37 = partial35.getFields();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        boolean boolean46 = partial38.isBefore((org.joda.time.ReadablePartial) partial43);
        java.lang.String str47 = partial38.toStringList();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial35.withPeriodAdded(readablePeriod55, (int) 'a');
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial58.withPeriodAdded(readablePeriod62, (int) (byte) 100);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial58.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        boolean boolean75 = partial70.equals((java.lang.Object) 10.0f);
        boolean boolean76 = partial58.isMatch((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology77 = partial58.getChronology();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial58.minus(readablePeriod78);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray81 = new int[] {};
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray80, intArray81, chronology82);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = partial85.toDateTime(readableInstant86);
        org.joda.time.DateTime dateTime88 = partial84.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        int[] intArray89 = partial84.getValues();
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.Partial partial91 = new org.joda.time.Partial(dateTimeFieldTypeArray80, intArray89, chronology90);
        boolean boolean92 = partial79.equals((java.lang.Object) partial91);
        boolean boolean93 = partial35.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.ReadablePeriod readablePeriod94 = null;
        org.joda.time.Partial partial95 = partial79.minus(readablePeriod94);
        int int96 = partial29.compareTo((org.joda.time.ReadablePartial) partial79);
        java.lang.String str97 = partial29.toStringList();
        org.joda.time.Chronology chronology98 = partial29.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(partial95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "[]" + "'", str97, "[]");
        org.junit.Assert.assertNotNull(chronology98);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial34.plus(readablePeriod37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial34.toString(dateTimeFormatter39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial34.isSupported(dateTimeFieldType41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial34.plus(readablePeriod43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial45.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = partial45.indexOf(dateTimeFieldType54);
        org.joda.time.Chronology chronology56 = partial45.getChronology();
        org.joda.time.Partial partial57 = partial44.withChronologyRetainFields(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial44.minus(readablePeriod58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = partial44.getFormatter();
        int int61 = partial44.size();
        org.joda.time.DurationFieldType durationFieldType62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial64 = partial44.withFieldAddWrapped(durationFieldType62, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNull(dateTimeFormatter60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        java.lang.String str7 = partial4.toStringList();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial16.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial16.toString(dateTimeFormatter18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial16.withChronologyRetainFields(chronology20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial16.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial27.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial27.plus(readablePeriod31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        java.lang.String str36 = partial33.toString();
        boolean boolean37 = partial27.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = partial33.toDateTime(readableInstant39);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial43.withChronologyRetainFields(chronology45);
        boolean boolean48 = partial43.equals((java.lang.Object) 10.0f);
        int int49 = partial43.size();
        boolean boolean50 = partial33.isEqual((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime55 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime57 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean58 = partial15.isMatch((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean59 = partial8.isMatch((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean60 = partial4.isAfter((org.joda.time.ReadablePartial) partial8);
        java.lang.Class<?> wildcardClass61 = partial4.getClass();
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial18.withChronologyRetainFields(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial18.plus(readablePeriod22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial18.withPeriodAdded(readablePeriod24, (int) (byte) 10);
        int int27 = partial13.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = partial26.isSupported(dateTimeFieldType28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial26.withPeriodAdded(readablePeriod30, (-1));
        boolean boolean33 = partial6.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = partial32.getFields();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial35.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial35.withPeriodAdded(readablePeriod39, (int) (byte) 100);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        boolean boolean45 = partial35.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial35.withPeriodAdded(readablePeriod46, 0);
        boolean boolean49 = partial32.equals((java.lang.Object) 0);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial50.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial50.withChronologyRetainFields(chronology54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial50.isMatch((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial58.withChronologyRetainFields(chronology62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial58.isMatch((org.joda.time.ReadablePartial) partial64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial64.toString(dateTimeFormatter66);
        boolean boolean68 = partial50.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial70.plus(readablePeriod74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial78 = partial70.withPeriodAdded(readablePeriod76, (int) (byte) 10);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = partial80.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime83 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime84 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial78.withPeriodAdded(readablePeriod85, (int) ' ');
        org.joda.time.Chronology chronology88 = partial87.getChronology();
        org.joda.time.Partial partial89 = partial50.withChronologyRetainFields(chronology88);
        org.joda.time.Partial partial90 = partial32.withChronologyRetainFields(chronology88);
        org.joda.time.Partial partial91 = new org.joda.time.Partial(chronology88);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField93 = partial91.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(dateTimeFormatter51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(partial90);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        java.lang.String str16 = partial9.toStringList();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial17.isAfter((org.joda.time.ReadablePartial) partial20);
        boolean boolean26 = partial9.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial28.plus(readablePeriod32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        java.lang.String str37 = partial34.toString();
        boolean boolean38 = partial28.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial34.toDateTime(readableInstant40);
        boolean boolean43 = partial9.isEqual((org.joda.time.ReadablePartial) partial34);
        int int44 = partial9.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial6.plus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial22.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        int[] intArray33 = partial28.getValues();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray33, chronology34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        java.lang.String str41 = partial37.toString();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial42.isBefore((org.joda.time.ReadablePartial) partial47);
        int[] intArray51 = partial42.getValues();
        boolean boolean52 = partial37.isEqual((org.joda.time.ReadablePartial) partial42);
        int[] intArray53 = partial42.getValues();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray53, chronology73);
        org.joda.time.Partial partial75 = partial22.withChronologyRetainFields(chronology73);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial75);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial3.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial3.toString(dateTimeFormatter5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial3.withPeriodAdded(readablePeriod7, (int) (byte) 100);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial10.isBefore((org.joda.time.ReadablePartial) partial11);
        boolean boolean13 = partial3.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial3.withPeriodAdded(readablePeriod14, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial3.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray19 = new int[] {};
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(dateTimeFieldTypeArray18, intArray19, chronology20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray19);
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        int[] intArray33 = partial28.getValues();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray33, chronology34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        java.lang.String str41 = partial37.toString();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial42.isBefore((org.joda.time.ReadablePartial) partial47);
        int[] intArray51 = partial42.getValues();
        boolean boolean52 = partial37.isEqual((org.joda.time.ReadablePartial) partial42);
        int[] intArray53 = partial42.getValues();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray53, chronology73);
        org.joda.time.Partial partial75 = partial23.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial76 = new org.joda.time.Partial(chronology73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial77 = new org.joda.time.Partial(dateTimeFieldType0, 10, chronology73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial75);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean9 = partial3.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        int int29 = partial15.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = partial28.isSupported(dateTimeFieldType30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial28.withPeriodAdded(readablePeriod32, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        org.joda.time.Partial partial36 = partial34.without(dateTimeFieldType35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        java.lang.String str42 = partial38.toString();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial43.isBefore((org.joda.time.ReadablePartial) partial48);
        int[] intArray52 = partial43.getValues();
        boolean boolean53 = partial38.isEqual((org.joda.time.ReadablePartial) partial43);
        boolean boolean54 = partial34.isMatch((org.joda.time.ReadablePartial) partial38);
        boolean boolean55 = partial3.isMatch((org.joda.time.ReadablePartial) partial34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField57 = partial3.getField((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = partial0.getFormatter();
        int[] intArray6 = partial0.getValues();
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial3.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial3.minus(readablePeriod6);
        java.lang.String str8 = partial3.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        org.joda.time.Partial partial10 = partial3.without(dateTimeFieldType9);
        java.lang.String str11 = partial10.toStringList();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial27.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int[] intArray40 = partial35.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray40, chronology41);
        boolean boolean43 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial30.plus(readablePeriod44);
        boolean boolean46 = partial21.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray48 = new int[] {};
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray47, intArray48, chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial53 = partial50.withPeriodAdded(readablePeriod51, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray55 = new int[] {};
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray55, chronology56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime62 = partial58.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        int[] intArray63 = partial58.getValues();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray63, chronology64);
        boolean boolean66 = partial53.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial65.getChronology();
        boolean boolean68 = partial45.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.DateTimeField[] dateTimeFieldArray69 = partial45.getFields();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray69);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial0.minus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial9.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        boolean boolean26 = partial21.equals((java.lang.Object) 10.0f);
        boolean boolean27 = partial9.isMatch((org.joda.time.ReadablePartial) partial21);
        boolean boolean28 = partial0.isEqual((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        java.util.Locale locale37 = null;
        java.lang.String str38 = partial29.toString("[]", locale37);
        boolean boolean39 = partial9.isEqual((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial41.plus(readablePeriod45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial41.withPeriodAdded(readablePeriod47, (int) (byte) 10);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime54 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime55 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = partial29.isMatch((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        org.joda.time.Partial partial58 = partial29.without(dateTimeFieldType57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        org.joda.time.Partial partial60 = partial58.without(dateTimeFieldType59);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial60);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = partial47.indexOf(dateTimeFieldType50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial47.getFieldTypes();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = partial53.toString(dateTimeFormatter55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial53.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial53.isMatch((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial66.isBefore((org.joda.time.ReadablePartial) partial67);
        boolean boolean69 = partial61.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial70.isBefore((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = partial71.withChronologyRetainFields(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial71.plus(readablePeriod75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial79 = partial71.withPeriodAdded(readablePeriod77, (int) (byte) 10);
        int int80 = partial66.compareTo((org.joda.time.ReadablePartial) partial79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        boolean boolean82 = partial79.isSupported(dateTimeFieldType81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial85 = partial79.withPeriodAdded(readablePeriod83, (-1));
        boolean boolean86 = partial59.isMatch((org.joda.time.ReadablePartial) partial85);
        int[] intArray87 = partial85.getValues();
        org.joda.time.Partial partial88 = new org.joda.time.Partial(dateTimeFieldTypeArray52, intArray87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = partial88.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        java.lang.String str24 = partial20.toString();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial25.isBefore((org.joda.time.ReadablePartial) partial30);
        int[] intArray34 = partial25.getValues();
        boolean boolean35 = partial20.isEqual((org.joda.time.ReadablePartial) partial25);
        java.lang.String str36 = partial20.toStringList();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial38.plus(readablePeriod42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial38.withPeriodAdded(readablePeriod44, (int) (byte) 10);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial0.plus(readablePeriod55);
        org.joda.time.DurationFieldType durationFieldType57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial59 = partial0.withFieldAdded(durationFieldType57, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(partial56);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = partial18.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = partial18.toString(dateTimeFormatter20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial18.withChronologyRetainFields(chronology22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial18.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial24.toString(dateTimeFormatter26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial28.toString(dateTimeFormatter30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial28.withPeriodAdded(readablePeriod32, (int) (byte) 100);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial28.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        boolean boolean45 = partial40.equals((java.lang.Object) 10.0f);
        boolean boolean46 = partial28.isMatch((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology47 = partial28.getChronology();
        org.joda.time.Partial partial48 = partial24.withChronologyRetainFields(chronology47);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = partial49.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial49.toString(dateTimeFormatter51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial49.withChronologyRetainFields(chronology53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial49.isMatch((org.joda.time.ReadablePartial) partial55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = partial55.toString(dateTimeFormatter57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = partial59.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = null;
        java.lang.String str62 = partial59.toString(dateTimeFormatter61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial65 = partial59.withPeriodAdded(readablePeriod63, (int) (byte) 100);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial66.isBefore((org.joda.time.ReadablePartial) partial67);
        boolean boolean69 = partial59.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial70.isBefore((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = partial71.withChronologyRetainFields(chronology73);
        boolean boolean76 = partial71.equals((java.lang.Object) 10.0f);
        boolean boolean77 = partial59.isMatch((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology78 = partial59.getChronology();
        org.joda.time.Partial partial79 = partial55.withChronologyRetainFields(chronology78);
        boolean boolean80 = partial24.equals((java.lang.Object) partial79);
        org.joda.time.Chronology chronology81 = partial79.getChronology();
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial83 = partial79.plus(readablePeriod82);
        int int84 = partial17.compareTo((org.joda.time.ReadablePartial) partial83);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = null;
        java.lang.String str86 = partial17.toString(dateTimeFormatter85);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Partial partial88 = partial17.plus(readablePeriod87);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[]" + "'", str86, "[]");
        org.junit.Assert.assertNotNull(partial88);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        java.lang.String str13 = partial9.toString();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial16 = partial9.withFieldAdded(durationFieldType14, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        java.lang.String str9 = partial6.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial10.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial16.toString(dateTimeFormatter18);
        int int20 = partial16.size();
        int int21 = partial16.size();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial16.plus(readablePeriod22);
        boolean boolean24 = partial6.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property26 = partial16.property(dateTimeFieldType25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial25.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        int int35 = partial7.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial7.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial7.plus(readablePeriod37);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(partial38);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        java.lang.String str24 = partial20.toString();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial25.isBefore((org.joda.time.ReadablePartial) partial30);
        int[] intArray34 = partial25.getValues();
        boolean boolean35 = partial20.isEqual((org.joda.time.ReadablePartial) partial25);
        int[] intArray36 = partial25.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        int[] intArray46 = partial41.getValues();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray46, chronology47);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial50.withChronologyRetainFields(chronology52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial50.plus(readablePeriod54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial58 = partial50.withPeriodAdded(readablePeriod56, (int) (byte) 10);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = partial60.toDateTime(readableInstant61);
        org.joda.time.DateTime dateTime63 = partial59.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime64 = partial58.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial67 = partial58.withPeriodAdded(readablePeriod65, (int) ' ');
        boolean boolean68 = partial48.isAfter((org.joda.time.ReadablePartial) partial58);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray70 = new int[] {};
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray70, chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial75 = partial72.withPeriodAdded(readablePeriod73, (int) (short) 100);
        org.joda.time.Chronology chronology76 = partial75.getChronology();
        org.joda.time.Partial partial77 = partial48.withChronologyRetainFields(chronology76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray36, chronology76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 10, chronology76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(partial77);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        boolean boolean30 = partial24.isAfter((org.joda.time.ReadablePartial) partial29);
        int int31 = partial21.compareTo((org.joda.time.ReadablePartial) partial24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField33 = partial21.getField(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial2.withChronologyRetainFields(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        java.lang.String str28 = partial25.toString();
        boolean boolean29 = partial19.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial25.toDateTime(readableInstant31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        boolean boolean40 = partial35.equals((java.lang.Object) 10.0f);
        int int41 = partial35.size();
        boolean boolean42 = partial25.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean50 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean51 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str52 = partial0.toString();
        java.lang.String str53 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial0.withPeriodAdded(readablePeriod55, (int) '4');
        org.joda.time.DurationFieldType durationFieldType58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial60 = partial57.withFieldAdded(durationFieldType58, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(partial57);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial0.indexOf(dateTimeFieldType9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        java.lang.String str14 = partial11.toString();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = partial16.withChronologyRetainFields(chronology18);
        java.lang.String str20 = partial16.toString();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial21.isBefore((org.joda.time.ReadablePartial) partial26);
        int[] intArray30 = partial21.getValues();
        boolean boolean31 = partial16.isEqual((org.joda.time.ReadablePartial) partial21);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial16.withPeriodAdded(readablePeriod32, (int) (short) 100);
        boolean boolean35 = partial11.isEqual((org.joda.time.ReadablePartial) partial16);
        boolean boolean36 = partial0.isEqual((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial37.withPeriodAdded(readablePeriod41, (int) (byte) 100);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial37.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        boolean boolean54 = partial49.equals((java.lang.Object) 10.0f);
        boolean boolean55 = partial37.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = partial57.withChronologyRetainFields(chronology59);
        java.lang.String str61 = partial57.toString();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        boolean boolean69 = partial67.isBefore((org.joda.time.ReadablePartial) partial68);
        boolean boolean70 = partial62.isBefore((org.joda.time.ReadablePartial) partial67);
        int[] intArray71 = partial62.getValues();
        boolean boolean72 = partial57.isEqual((org.joda.time.ReadablePartial) partial62);
        java.lang.String str73 = partial57.toStringList();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = partial75.withChronologyRetainFields(chronology77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial80 = partial75.plus(readablePeriod79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial83 = partial75.withPeriodAdded(readablePeriod81, (int) (byte) 10);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = partial85.toDateTime(readableInstant86);
        org.joda.time.DateTime dateTime88 = partial84.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime89 = partial83.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime90 = partial57.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        boolean boolean91 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = null;
        org.joda.time.Partial partial93 = partial37.without(dateTimeFieldType92);
        int int94 = partial16.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = null;
        int int96 = partial37.indexOf(dateTimeFieldType95);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        boolean boolean6 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = partial5.withChronologyRetainFields(chronology7);
        java.lang.String str9 = partial5.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        int[] intArray19 = partial10.getValues();
        boolean boolean20 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        java.lang.String str21 = partial5.toStringList();
        boolean boolean22 = partial3.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property24 = partial3.property(dateTimeFieldType23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        boolean boolean30 = partial24.isAfter((org.joda.time.ReadablePartial) partial29);
        int int31 = partial21.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        org.joda.time.Partial partial33 = partial24.without(dateTimeFieldType32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial35.withChronologyRetainFields(chronology36);
        java.lang.String str38 = partial37.toString();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        boolean boolean4 = partial2.isBefore((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = partial3.withChronologyRetainFields(chronology5);
        java.lang.String str7 = partial3.toString();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        int[] intArray17 = partial8.getValues();
        boolean boolean18 = partial3.isEqual((org.joda.time.ReadablePartial) partial8);
        int[] intArray19 = partial8.getValues();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial26.toString(dateTimeFormatter27);
        int[] intArray29 = partial26.getValues();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial30.withChronologyRetainFields(chronology34);
        java.util.Locale locale37 = null;
        java.lang.String str38 = partial30.toString("[]", locale37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = partial39.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = partial39.toString(dateTimeFormatter41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial39.withChronologyRetainFields(chronology43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial39.isMatch((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = partial47.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial47.toString(dateTimeFormatter49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial47.withChronologyRetainFields(chronology51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial47.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = partial53.toString(dateTimeFormatter55);
        boolean boolean57 = partial39.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = partial59.withChronologyRetainFields(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial59.plus(readablePeriod63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial67 = partial59.withPeriodAdded(readablePeriod65, (int) (byte) 10);
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = partial69.toDateTime(readableInstant70);
        org.joda.time.DateTime dateTime72 = partial68.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime73 = partial67.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial76 = partial67.withPeriodAdded(readablePeriod74, (int) ' ');
        org.joda.time.Chronology chronology77 = partial76.getChronology();
        org.joda.time.Partial partial78 = partial39.withChronologyRetainFields(chronology77);
        org.joda.time.Partial partial79 = partial30.withChronologyRetainFields(chronology77);
        org.joda.time.Partial partial80 = partial26.withChronologyRetainFields(chronology77);
        org.joda.time.Partial partial81 = partial8.withChronologyRetainFields(chronology77);
        org.joda.time.Partial partial82 = new org.joda.time.Partial(chronology77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 100, chronology77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(dateTimeFormatter48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertNotNull(partial81);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        int int7 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray9 = new int[] {};
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime16 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        int[] intArray17 = partial12.getValues();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isAfter((org.joda.time.ReadablePartial) partial29);
        int int40 = partial1.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        boolean boolean59 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology60 = partial41.getChronology();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial41.minus(readablePeriod61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        boolean boolean64 = partial62.isSupported(dateTimeFieldType63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial62.plus(readablePeriod65);
        boolean boolean67 = partial1.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial70 = partial1.withField(dateTimeFieldType68, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial0.minus(readablePeriod11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial0.getFormatter();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNull(dateTimeFormatter13);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial0.minus(readablePeriod10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial13.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = partial13.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial13.withChronologyRetainFields(chronology17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial13.isMatch((org.joda.time.ReadablePartial) partial19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial19.toString(dateTimeFormatter21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = partial23.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial23.withPeriodAdded(readablePeriod27, (int) (byte) 100);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial23.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        boolean boolean40 = partial35.equals((java.lang.Object) 10.0f);
        boolean boolean41 = partial23.isMatch((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology42 = partial23.getChronology();
        org.joda.time.Partial partial43 = partial19.withChronologyRetainFields(chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime48 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial50.withChronologyRetainFields(chronology52);
        boolean boolean54 = partial44.isMatch((org.joda.time.ReadablePartial) partial53);
        boolean boolean56 = partial53.equals((java.lang.Object) 10);
        java.lang.String str57 = partial53.toString();
        boolean boolean58 = partial19.equals((java.lang.Object) str57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = partial60.toDateTime(readableInstant61);
        org.joda.time.DateTime dateTime63 = partial59.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        int int64 = partial19.compareTo((org.joda.time.ReadablePartial) partial59);
        boolean boolean65 = partial0.isEqual((org.joda.time.ReadablePartial) partial59);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial10.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial11.withChronologyRetainFields(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial11.plus(readablePeriod15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        java.lang.String str20 = partial17.toString();
        boolean boolean21 = partial11.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial17.toDateTime(readableInstant23);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial27.withChronologyRetainFields(chronology29);
        boolean boolean32 = partial27.equals((java.lang.Object) 10.0f);
        int int33 = partial27.size();
        boolean boolean34 = partial17.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        org.joda.time.Partial partial45 = partial42.without(dateTimeFieldType44);
        boolean boolean46 = partial6.isEqual((org.joda.time.ReadablePartial) partial42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = partial6.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray50 = new int[] {};
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(dateTimeFieldTypeArray49, intArray50, chronology51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial52.toString(dateTimeFormatter53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial52.minus(readablePeriod55);
        java.lang.String str57 = partial52.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        org.joda.time.Partial partial59 = partial52.without(dateTimeFieldType58);
        int int60 = partial6.compareTo((org.joda.time.ReadablePartial) partial52);
        java.util.Locale locale62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = partial6.toString("hi!", locale62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial13.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = partial28.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology31 = partial6.getChronology();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial6.withPeriodAdded(readablePeriod32, (int) ' ');
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(partial34);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int int9 = partial0.size();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial10.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial16.toString(dateTimeFormatter18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.Partial partial40 = partial16.withChronologyRetainFields(chronology39);
        boolean boolean41 = partial0.isEqual((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial0.plus(readablePeriod42);
        org.joda.time.DurationFieldType durationFieldType44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial46 = partial43.withFieldAdded(durationFieldType44, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(partial43);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial2.isBefore((org.joda.time.ReadablePartial) partial7);
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = partial7.getChronology();
        org.joda.time.Partial partial13 = partial0.withChronologyRetainFields(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField15 = partial13.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(partial13);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.minus(readablePeriod25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = partial26.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial26.without(dateTimeFieldType28);
        org.joda.time.DurationFieldType durationFieldType30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial32 = partial29.withFieldAddWrapped(durationFieldType30, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(partial29);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        boolean boolean30 = partial24.isAfter((org.joda.time.ReadablePartial) partial29);
        int int31 = partial21.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        org.joda.time.Partial partial33 = partial24.without(dateTimeFieldType32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = partial33.indexOf(dateTimeFieldType34);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial22.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial32.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        int int41 = partial27.compareTo((org.joda.time.ReadablePartial) partial40);
        int int42 = partial21.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial44.plus(readablePeriod48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial44.withPeriodAdded(readablePeriod50, (int) (byte) 10);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial52.withPeriodAdded(readablePeriod59, (int) ' ');
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        boolean boolean65 = partial61.equals((java.lang.Object) boolean64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial61.toString(dateTimeFormatter66);
        boolean boolean68 = partial21.isEqual((org.joda.time.ReadablePartial) partial61);
        java.util.Locale locale70 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = partial61.toString("", locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int[] intArray5 = partial0.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        boolean boolean8 = partial6.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = partial7.withChronologyRetainFields(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial7.plus(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial7.withPeriodAdded(readablePeriod13, (int) (byte) 10);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        java.lang.String str22 = partial15.toStringList();
        boolean boolean23 = partial0.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial25.plus(readablePeriod29);
        boolean boolean31 = partial15.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial30.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial18.withChronologyRetainFields(chronology20);
        java.lang.String str22 = partial18.toString();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime27 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        boolean boolean31 = partial23.isBefore((org.joda.time.ReadablePartial) partial28);
        int[] intArray32 = partial23.getValues();
        boolean boolean33 = partial18.isEqual((org.joda.time.ReadablePartial) partial23);
        int[] intArray34 = partial23.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray36 = new int[] {};
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldTypeArray35, intArray36, chronology37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        int[] intArray44 = partial39.getValues();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(dateTimeFieldTypeArray35, intArray44, chronology45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial56 = partial48.withPeriodAdded(readablePeriod54, (int) (byte) 10);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime61 = partial57.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = partial56.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial65 = partial56.withPeriodAdded(readablePeriod63, (int) ' ');
        boolean boolean66 = partial46.isAfter((org.joda.time.ReadablePartial) partial56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray68 = new int[] {};
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(dateTimeFieldTypeArray67, intArray68, chronology69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial73 = partial70.withPeriodAdded(readablePeriod71, (int) (short) 100);
        org.joda.time.Chronology chronology74 = partial73.getChronology();
        org.joda.time.Partial partial75 = partial46.withChronologyRetainFields(chronology74);
        org.joda.time.Partial partial76 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray34, chronology74);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = null;
        java.lang.String str78 = partial76.toString(dateTimeFormatter77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial80 = partial76.minus(readablePeriod79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(partial80);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial31.withPeriodAdded(readablePeriod35, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = partial37.toString(dateTimeFormatter38);
        int[] intArray40 = partial37.getValues();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial41.withChronologyRetainFields(chronology45);
        java.util.Locale locale48 = null;
        java.lang.String str49 = partial41.toString("[]", locale48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial50.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial50.withChronologyRetainFields(chronology54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial50.isMatch((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial58.withChronologyRetainFields(chronology62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial58.isMatch((org.joda.time.ReadablePartial) partial64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial64.toString(dateTimeFormatter66);
        boolean boolean68 = partial50.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial70.plus(readablePeriod74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial78 = partial70.withPeriodAdded(readablePeriod76, (int) (byte) 10);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = partial80.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime83 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime84 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial78.withPeriodAdded(readablePeriod85, (int) ' ');
        org.joda.time.Chronology chronology88 = partial87.getChronology();
        org.joda.time.Partial partial89 = partial50.withChronologyRetainFields(chronology88);
        org.joda.time.Partial partial90 = partial41.withChronologyRetainFields(chronology88);
        org.joda.time.Partial partial91 = partial37.withChronologyRetainFields(chronology88);
        int int92 = partial6.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = null;
        boolean boolean94 = partial6.isSupported(dateTimeFieldType93);
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = null;
        int int96 = partial6.indexOf(dateTimeFieldType95);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter97 = null;
        java.lang.String str98 = partial6.toString(dateTimeFormatter97);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[]" + "'", str98, "[]");
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = partial8.getFields();
        java.util.Locale locale13 = null;
        java.lang.String str14 = partial8.toString("[]", locale13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial8);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        org.joda.time.Partial partial17 = partial15.without(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial17);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        java.lang.String str19 = partial16.toString();
        boolean boolean20 = partial10.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial22.plus(readablePeriod26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        java.lang.String str31 = partial28.toString();
        boolean boolean32 = partial22.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial33.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (int) (byte) 100);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial33.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = partial45.withChronologyRetainFields(chronology47);
        boolean boolean50 = partial45.equals((java.lang.Object) 10.0f);
        boolean boolean51 = partial33.isMatch((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology52 = partial33.getChronology();
        boolean boolean53 = partial22.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean54 = partial16.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean55 = partial8.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial33.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial33.plus(readablePeriod57);
        java.lang.Object obj59 = null;
        boolean boolean60 = partial33.equals(obj59);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial18.withChronologyRetainFields(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial18.plus(readablePeriod22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial18.withPeriodAdded(readablePeriod24, (int) (byte) 10);
        int int27 = partial13.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = partial26.isSupported(dateTimeFieldType28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial26.withPeriodAdded(readablePeriod30, (-1));
        boolean boolean33 = partial6.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        java.lang.String str39 = partial35.toString();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime44 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial45.isBefore((org.joda.time.ReadablePartial) partial46);
        boolean boolean48 = partial40.isBefore((org.joda.time.ReadablePartial) partial45);
        int[] intArray49 = partial40.getValues();
        boolean boolean50 = partial35.isEqual((org.joda.time.ReadablePartial) partial40);
        java.lang.String str51 = partial35.toStringList();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial53.plus(readablePeriod57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial53.withPeriodAdded(readablePeriod59, (int) (byte) 10);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime68 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = partial6.isMatch((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Partial partial70 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial6);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = partial1.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = partial6.getFormatter();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = partial14.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = partial14.withChronologyRetainFields(chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial14.isMatch((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial25.plus(readablePeriod29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        java.lang.String str34 = partial31.toString();
        boolean boolean35 = partial25.isAfter((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial31.toDateTime(readableInstant37);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        boolean boolean46 = partial41.equals((java.lang.Object) 10.0f);
        int int47 = partial41.size();
        boolean boolean48 = partial31.isEqual((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime53 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean56 = partial13.isMatch((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean57 = partial6.isMatch((org.joda.time.ReadableInstant) dateTime52);
        java.lang.String str58 = partial6.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = null;
        java.lang.String str60 = partial6.toString(dateTimeFormatter59);
        org.joda.time.Chronology chronology61 = partial6.getChronology();
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology61);
        boolean boolean63 = partial1.isAfter((org.joda.time.ReadablePartial) partial62);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isBefore((org.joda.time.ReadablePartial) partial29);
        java.lang.String str41 = partial19.toString("[]");
        java.lang.String str42 = partial19.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial3.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial3.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial3.minus(readablePeriod8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        org.joda.time.Partial partial11 = partial3.without(dateTimeFieldType10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial12.withChronologyRetainFields(chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial12.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        java.lang.String str30 = partial27.toString();
        boolean boolean31 = partial21.isAfter((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial27.toDateTime(readableInstant33);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        boolean boolean42 = partial37.equals((java.lang.Object) 10.0f);
        int int43 = partial37.size();
        boolean boolean44 = partial27.isEqual((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime49 = partial45.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = partial12.isEqual((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = partial52.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial52.toString(dateTimeFormatter54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial58 = partial52.withPeriodAdded(readablePeriod56, (int) (byte) 100);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial60.withChronologyRetainFields(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial60.plus(readablePeriod64);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = partial66.toDateTime(readableInstant67);
        java.lang.String str69 = partial66.toString();
        boolean boolean70 = partial60.isAfter((org.joda.time.ReadablePartial) partial66);
        boolean boolean71 = partial52.isEqual((org.joda.time.ReadablePartial) partial66);
        boolean boolean72 = partial37.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean73 = partial3.equals((java.lang.Object) partial66);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(dateTimeFormatter53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        java.lang.String str16 = partial9.toStringList();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial17.isAfter((org.joda.time.ReadablePartial) partial20);
        boolean boolean26 = partial9.isEqual((org.joda.time.ReadablePartial) partial17);
        int[] intArray27 = partial17.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField29 = partial17.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial37 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        java.util.Locale locale39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = partial37.toString("", locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] {};
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray5, chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial15.toString(dateTimeFormatter16);
        int[] intArray18 = partial15.getValues();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = partial19.isAfter((org.joda.time.ReadablePartial) partial22);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = partial19.indexOf(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = partial19.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray18, chronology30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = partial32.getFormatter();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNull(dateTimeFormatter33);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial33 = partial6.with(dateTimeFieldType31, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        java.util.Locale locale7 = null;
        java.lang.String str8 = partial0.toString("[]", locale7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial9.withChronologyRetainFields(chronology13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial9.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial17.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial17.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial17.withChronologyRetainFields(chronology21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial17.isMatch((org.joda.time.ReadablePartial) partial23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        boolean boolean27 = partial9.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial29.withChronologyRetainFields(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial29.plus(readablePeriod33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial29.withPeriodAdded(readablePeriod35, (int) (byte) 10);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial37.withPeriodAdded(readablePeriod44, (int) ' ');
        org.joda.time.Chronology chronology47 = partial46.getChronology();
        org.joda.time.Partial partial48 = partial9.withChronologyRetainFields(chronology47);
        org.joda.time.Partial partial49 = partial0.withChronologyRetainFields(chronology47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        boolean boolean56 = partial51.equals((java.lang.Object) 10.0f);
        int int57 = partial51.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray59 = new int[] {};
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldTypeArray58, intArray59, chronology60);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        int[] intArray67 = partial62.getValues();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(dateTimeFieldTypeArray58, intArray67, chronology68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial70.isBefore((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = partial71.withChronologyRetainFields(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial71.plus(readablePeriod75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial79 = partial71.withPeriodAdded(readablePeriod77, (int) (byte) 10);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = partial81.toDateTime(readableInstant82);
        org.joda.time.DateTime dateTime84 = partial80.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.Partial partial88 = partial79.withPeriodAdded(readablePeriod86, (int) ' ');
        boolean boolean89 = partial69.isAfter((org.joda.time.ReadablePartial) partial79);
        int int90 = partial51.compareTo((org.joda.time.ReadablePartial) partial69);
        boolean boolean91 = partial49.isEqual((org.joda.time.ReadablePartial) partial51);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = null;
        int int93 = partial51.indexOf(dateTimeFieldType92);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = partial5.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial10 = partial5.withPeriodAdded(readablePeriod8, (int) (short) -1);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(partial10);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        java.lang.String str7 = partial1.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial10 = partial1.with(dateTimeFieldType8, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = partial3.isSupported(dateTimeFieldType9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial11.isMatch((org.joda.time.ReadablePartial) partial20);
        boolean boolean23 = partial20.equals((java.lang.Object) 10);
        java.lang.String str24 = partial20.toString();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial20.withPeriodAdded(readablePeriod25, (int) '4');
        int[] intArray28 = partial27.getValues();
        boolean boolean29 = partial3.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial30.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial40.plus(readablePeriod44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial40.withPeriodAdded(readablePeriod46, (int) (byte) 10);
        int int49 = partial35.compareTo((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = partial48.isSupported(dateTimeFieldType50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial54 = partial48.withPeriodAdded(readablePeriod52, (-1));
        boolean boolean55 = partial3.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = partial56.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = partial56.toString(dateTimeFormatter58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial62 = partial56.withPeriodAdded(readablePeriod60, (int) (byte) 100);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        boolean boolean66 = partial56.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        boolean boolean69 = partial67.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = partial68.withChronologyRetainFields(chronology70);
        boolean boolean73 = partial68.equals((java.lang.Object) 10.0f);
        boolean boolean74 = partial56.isMatch((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology75 = partial56.getChronology();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial56.minus(readablePeriod76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        boolean boolean79 = partial77.isSupported(dateTimeFieldType78);
        org.joda.time.Chronology chronology80 = partial77.getChronology();
        boolean boolean81 = partial54.equals((java.lang.Object) partial77);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int83 = partial77.get(dateTimeFieldType82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(dateTimeFormatter57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        int[] intArray53 = partial48.getValues();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray53, chronology54);
        boolean boolean56 = partial43.isMatch((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = partial55.indexOf(dateTimeFieldType57);
        boolean boolean59 = partial34.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial55.plus(readablePeriod60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = partial55.indexOf(dateTimeFieldType62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial65.withChronologyRetainFields(chronology67);
        boolean boolean70 = partial65.equals((java.lang.Object) 10.0f);
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        boolean boolean73 = partial71.isBefore((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = partial72.withChronologyRetainFields(chronology74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial72.plus(readablePeriod76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial80 = partial72.withPeriodAdded(readablePeriod78, (int) (byte) 10);
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = partial82.toDateTime(readableInstant83);
        org.joda.time.DateTime dateTime85 = partial81.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime86 = partial80.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Partial partial89 = partial80.withPeriodAdded(readablePeriod87, (int) ' ');
        org.joda.time.Partial partial90 = new org.joda.time.Partial();
        org.joda.time.Partial partial91 = new org.joda.time.Partial();
        boolean boolean92 = partial90.isBefore((org.joda.time.ReadablePartial) partial91);
        boolean boolean93 = partial89.equals((java.lang.Object) boolean92);
        boolean boolean94 = partial65.isAfter((org.joda.time.ReadablePartial) partial89);
        org.joda.time.Partial partial95 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial89);
        boolean boolean96 = partial55.isEqual((org.joda.time.ReadablePartial) partial89);
        org.joda.time.Chronology chronology97 = partial55.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(chronology97);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray7 = new int[] {};
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(dateTimeFieldTypeArray6, intArray7, chronology8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray7);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial11.withPeriodAdded(readablePeriod15, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial17.toString(dateTimeFormatter18);
        int[] intArray20 = partial17.getValues();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = partial21.isAfter((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = partial21.indexOf(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = partial21.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray20, chronology32);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = partial36.withChronologyRetainFields(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial36.plus(readablePeriod40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial44 = partial36.withPeriodAdded(readablePeriod42, (int) (byte) 10);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime49 = partial45.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        java.lang.String str51 = partial44.toStringList();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        org.joda.time.DateTime dateTime59 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = partial52.isAfter((org.joda.time.ReadablePartial) partial55);
        boolean boolean61 = partial44.isEqual((org.joda.time.ReadablePartial) partial52);
        int[] intArray62 = partial52.getValues();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = partial63.getFormatter();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = partial66.toDateTime(readableInstant67);
        org.joda.time.DateTime dateTime69 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial70.isBefore((org.joda.time.ReadablePartial) partial71);
        boolean boolean73 = partial65.isBefore((org.joda.time.ReadablePartial) partial70);
        int[] intArray74 = partial70.getValues();
        org.joda.time.Chronology chronology75 = partial70.getChronology();
        org.joda.time.Partial partial76 = partial63.withChronologyRetainFields(chronology75);
        org.joda.time.Partial partial77 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray62, chronology75);
        org.joda.time.Partial partial78 = new org.joda.time.Partial(chronology75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldType0, 0, chronology75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(partial76);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = partial7.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = partial7.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = partial7.indexOf(dateTimeFieldType20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial7.isSupported(dateTimeFieldType22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray31 = partial24.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = partial24.isSupported(dateTimeFieldType32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = partial34.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial34.toString(dateTimeFormatter36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial34.withPeriodAdded(readablePeriod38, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        org.joda.time.Partial partial42 = partial40.without(dateTimeFieldType41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        java.lang.String str48 = partial44.toString();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime53 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        boolean boolean57 = partial49.isBefore((org.joda.time.ReadablePartial) partial54);
        int[] intArray58 = partial49.getValues();
        boolean boolean59 = partial44.isEqual((org.joda.time.ReadablePartial) partial49);
        java.lang.String str60 = partial44.toStringList();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = partial62.withChronologyRetainFields(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial62.plus(readablePeriod66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial70 = partial62.withPeriodAdded(readablePeriod68, (int) (byte) 10);
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = partial72.toDateTime(readableInstant73);
        org.joda.time.DateTime dateTime75 = partial71.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime76 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime77 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime79 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean80 = partial7.isEqual((org.joda.time.ReadablePartial) partial24);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        java.lang.String str57 = partial54.toString();
        boolean boolean58 = partial48.isAfter((org.joda.time.ReadablePartial) partial54);
        boolean boolean59 = partial40.isEqual((org.joda.time.ReadablePartial) partial54);
        boolean boolean60 = partial29.equals((java.lang.Object) partial40);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial63 = partial40.with(dateTimeFieldType61, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        java.lang.String str11 = partial0.toString("[]");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray14 = new int[] {};
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray14, chronology15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        int[] intArray22 = partial17.getValues();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray22, chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        java.lang.String str30 = partial26.toString();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        boolean boolean39 = partial31.isBefore((org.joda.time.ReadablePartial) partial36);
        int[] intArray40 = partial31.getValues();
        boolean boolean41 = partial26.isEqual((org.joda.time.ReadablePartial) partial31);
        int[] intArray42 = partial31.getValues();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = partial43.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = partial43.toString(dateTimeFormatter45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial43.withPeriodAdded(readablePeriod47, (int) (byte) 100);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        boolean boolean53 = partial43.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial55.withChronologyRetainFields(chronology57);
        boolean boolean60 = partial55.equals((java.lang.Object) 10.0f);
        boolean boolean61 = partial43.isMatch((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology62 = partial43.getChronology();
        org.joda.time.Partial partial63 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray42, chronology62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = partial66.toDateTime(readableInstant67);
        org.joda.time.DateTime dateTime69 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime70 = partial64.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        int[] intArray71 = partial64.getValues();
        org.joda.time.Chronology chronology72 = partial64.getChronology();
        org.joda.time.Partial partial73 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray42, chronology72);
        org.joda.time.Chronology chronology74 = partial73.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(chronology74);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        int[] intArray53 = partial48.getValues();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray53, chronology54);
        boolean boolean56 = partial43.isMatch((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = partial55.indexOf(dateTimeFieldType57);
        boolean boolean59 = partial34.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        org.joda.time.Partial partial61 = partial55.without(dateTimeFieldType60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = partial55.indexOf(dateTimeFieldType62);
        int[] intArray64 = partial55.getValues();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        java.lang.String str9 = partial8.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = partial8.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray12 = new int[] {};
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(dateTimeFieldTypeArray11, intArray12, chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial14.withPeriodAdded(readablePeriod15, (int) (short) 100);
        int[] intArray18 = partial14.getValues();
        int[] intArray19 = partial14.getValues();
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray19);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        boolean boolean19 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray21 = new int[] {};
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray21, chronology22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        int[] intArray29 = partial24.getValues();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray29, chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial33.plus(readablePeriod37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial33.withPeriodAdded(readablePeriod39, (int) (byte) 10);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial41.withPeriodAdded(readablePeriod48, (int) ' ');
        boolean boolean51 = partial31.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = partial41.indexOf(dateTimeFieldType52);
        boolean boolean54 = partial5.isEqual((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = partial41.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = partial41.getFormatter();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNull(dateTimeFormatter56);
        org.junit.Assert.assertNull(dateTimeFormatter57);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        int int7 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray9 = new int[] {};
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime16 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        int[] intArray17 = partial12.getValues();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isAfter((org.joda.time.ReadablePartial) partial29);
        boolean boolean40 = partial1.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial41.minus(readablePeriod48);
        int[] intArray50 = partial49.getValues();
        int int51 = partial29.compareTo((org.joda.time.ReadablePartial) partial49);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        int int14 = partial1.compareTo((org.joda.time.ReadablePartial) partial13);
        java.lang.String str15 = partial1.toStringList();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = partial34.isSupported(dateTimeFieldType36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial34.withPeriodAdded(readablePeriod38, (-1));
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial42.plus(readablePeriod46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        java.lang.String str51 = partial48.toString();
        boolean boolean52 = partial42.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = partial53.toString(dateTimeFormatter55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial59 = partial53.withPeriodAdded(readablePeriod57, (int) (byte) 100);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        boolean boolean62 = partial60.isBefore((org.joda.time.ReadablePartial) partial61);
        boolean boolean63 = partial53.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial65.withChronologyRetainFields(chronology67);
        boolean boolean70 = partial65.equals((java.lang.Object) 10.0f);
        boolean boolean71 = partial53.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology72 = partial53.getChronology();
        boolean boolean73 = partial42.isEqual((org.joda.time.ReadablePartial) partial53);
        int int74 = partial40.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray75 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray76 = new int[] {};
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(dateTimeFieldTypeArray75, intArray76, chronology77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = partial78.toString(dateTimeFormatter79);
        boolean boolean81 = partial40.isAfter((org.joda.time.ReadablePartial) partial78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = partial40.getFormatter();
        int int83 = partial1.compareTo((org.joda.time.ReadablePartial) partial40);
        java.lang.String str85 = partial40.toString("[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(dateTimeFormatter82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "[]" + "'", str85, "[]");
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial19.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial19.toString(dateTimeFormatter21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial19.withChronologyRetainFields(chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial19.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial27.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial27.withChronologyRetainFields(chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial27.isMatch((org.joda.time.ReadablePartial) partial33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        boolean boolean37 = partial19.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial56 = partial47.withPeriodAdded(readablePeriod54, (int) ' ');
        org.joda.time.Chronology chronology57 = partial56.getChronology();
        org.joda.time.Partial partial58 = partial19.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial59 = partial10.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial60 = partial6.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = partial63.withChronologyRetainFields(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial63.plus(readablePeriod67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial71 = partial63.withPeriodAdded(readablePeriod69, (int) (byte) 10);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = partial73.toDateTime(readableInstant74);
        org.joda.time.DateTime dateTime76 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = partial71.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        java.lang.String str78 = partial71.toStringList();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = partial83.toDateTime(readableInstant84);
        org.joda.time.DateTime dateTime86 = partial82.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean87 = partial79.isAfter((org.joda.time.ReadablePartial) partial82);
        boolean boolean88 = partial71.isEqual((org.joda.time.ReadablePartial) partial79);
        int[] intArray89 = partial79.getValues();
        boolean boolean90 = partial61.isMatch((org.joda.time.ReadablePartial) partial79);
        java.lang.String str91 = partial61.toString();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[]" + "'", str91, "[]");
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        boolean boolean8 = partial6.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = partial7.getFields();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial10.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial11.withChronologyRetainFields(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial11.plus(readablePeriod15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial11.withPeriodAdded(readablePeriod17, (int) (byte) 10);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial19.withPeriodAdded(readablePeriod26, (int) ' ');
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial29.isBefore((org.joda.time.ReadablePartial) partial30);
        boolean boolean32 = partial28.equals((java.lang.Object) boolean31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial33.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial34.withChronologyRetainFields(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial34.plus(readablePeriod38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        java.lang.String str43 = partial40.toString();
        boolean boolean44 = partial34.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime48 = partial40.toDateTime(readableInstant46);
        boolean boolean49 = partial28.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Partial partial59 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial50);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial59.minus(readablePeriod60);
        boolean boolean62 = partial28.isEqual((org.joda.time.ReadablePartial) partial59);
        int int63 = partial59.size();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology65 = partial64.getChronology();
        org.joda.time.Partial partial66 = partial59.withChronologyRetainFields(chronology65);
        org.joda.time.Partial partial67 = partial7.withChronologyRetainFields(chronology65);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        org.joda.time.Partial partial69 = partial67.without(dateTimeFieldType68);
        boolean boolean70 = partial1.isMatch((org.joda.time.ReadablePartial) partial67);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial2.withChronologyRetainFields(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        java.lang.String str28 = partial25.toString();
        boolean boolean29 = partial19.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial25.toDateTime(readableInstant31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        boolean boolean40 = partial35.equals((java.lang.Object) 10.0f);
        int int41 = partial35.size();
        boolean boolean42 = partial25.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean50 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean51 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str52 = partial0.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial0.toString(dateTimeFormatter53);
        org.joda.time.Chronology chronology55 = partial0.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = partial57.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = null;
        java.lang.String str60 = partial57.toString(dateTimeFormatter59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial63 = partial57.withPeriodAdded(readablePeriod61, (int) (byte) 100);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        boolean boolean67 = partial57.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial70 = partial57.withPeriodAdded(readablePeriod68, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = partial57.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray72 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray73 = new int[] {};
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(dateTimeFieldTypeArray72, intArray73, chronology74);
        org.joda.time.Partial partial76 = new org.joda.time.Partial(dateTimeFieldTypeArray71, intArray73);
        org.joda.time.Partial partial77 = new org.joda.time.Partial(dateTimeFieldTypeArray56, intArray73);
        java.lang.String str78 = partial77.toStringList();
        org.joda.time.Partial partial79 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial77);
        int int80 = partial0.compareTo((org.joda.time.ReadablePartial) partial79);
        org.joda.time.DurationFieldType durationFieldType81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial83 = partial79.withFieldAdded(durationFieldType81, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNull(dateTimeFormatter58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial13.plus(readablePeriod27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial5.isEqual((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = partial5.isSupported(dateTimeFieldType31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        org.joda.time.Partial partial34 = partial5.without(dateTimeFieldType33);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial34);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray11, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        java.lang.String str23 = partial8.toStringList();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        boolean boolean19 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = partial5.toString(dateTimeFormatter20);
        int[] intArray22 = partial5.getValues();
        org.joda.time.DurationFieldType durationFieldType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial25 = partial5.withFieldAdded(durationFieldType23, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        int int53 = partial49.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = partial49.indexOf(dateTimeFieldType54);
        java.util.Locale locale57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = partial49.toString("", locale57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial11.withChronologyRetainFields(chronology15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = partial11.toString("[]", locale18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Partial partial21 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial11);
        int[] intArray22 = partial21.getValues();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        boolean boolean4 = partial2.isBefore((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = partial3.withChronologyRetainFields(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial11 = partial3.withPeriodAdded(readablePeriod9, (int) (byte) 10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime16 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial20 = partial11.withPeriodAdded(readablePeriod18, (int) ' ');
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        int int28 = partial20.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial21.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray32, chronology35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray40 = new int[] {};
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray40, chronology41);
        boolean boolean43 = partial37.isAfter((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = partial37.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray32, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = partial46.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial46.toString(dateTimeFormatter48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial46.withChronologyRetainFields(chronology50);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial46.isMatch((org.joda.time.ReadablePartial) partial52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial52.toString(dateTimeFormatter54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = partial56.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = partial56.toString(dateTimeFormatter58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial62 = partial56.withPeriodAdded(readablePeriod60, (int) (byte) 100);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        boolean boolean66 = partial56.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        boolean boolean69 = partial67.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = partial68.withChronologyRetainFields(chronology70);
        boolean boolean73 = partial68.equals((java.lang.Object) 10.0f);
        boolean boolean74 = partial56.isMatch((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology75 = partial56.getChronology();
        org.joda.time.Partial partial76 = partial52.withChronologyRetainFields(chronology75);
        org.joda.time.Partial partial77 = partial45.withChronologyRetainFields(chronology75);
        java.util.Locale locale79 = null;
        java.lang.String str80 = partial45.toString("[]", locale79);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray81 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray82 = new int[] {};
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(dateTimeFieldTypeArray81, intArray82, chronology83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial84.withPeriodAdded(readablePeriod85, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Partial partial89 = partial84.plus(readablePeriod88);
        boolean boolean90 = partial45.isBefore((org.joda.time.ReadablePartial) partial89);
        org.joda.time.Chronology chronology91 = partial89.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial92 = new org.joda.time.Partial(dateTimeFieldType0, (int) '#', chronology91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNull(dateTimeFormatter47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial25.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial25.toString(dateTimeFormatter27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial25.withPeriodAdded(readablePeriod29, (int) (byte) 100);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial25.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        boolean boolean42 = partial37.equals((java.lang.Object) 10.0f);
        boolean boolean43 = partial25.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology44 = partial25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial25.minus(readablePeriod45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = partial47.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial47.toString(dateTimeFormatter49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial47.withChronologyRetainFields(chronology51);
        boolean boolean53 = partial25.equals((java.lang.Object) chronology51);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial54.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial64.withChronologyRetainFields(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial64.plus(readablePeriod68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial64.withPeriodAdded(readablePeriod70, (int) (byte) 10);
        int int73 = partial59.compareTo((org.joda.time.ReadablePartial) partial72);
        boolean boolean74 = partial25.isBefore((org.joda.time.ReadablePartial) partial72);
        boolean boolean75 = partial7.equals((java.lang.Object) partial72);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray77 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray78 = new int[] {};
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray77, intArray78, chronology79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = new org.joda.time.Partial(dateTimeFieldTypeArray76, intArray78, chronology81);
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = partial84.toDateTime(readableInstant85);
        org.joda.time.DateTime dateTime87 = partial83.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime88 = partial82.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        boolean boolean89 = partial7.isMatch((org.joda.time.ReadablePartial) partial82);
        java.util.Locale locale91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = partial7.toString("", locale91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNull(dateTimeFormatter48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray76);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = partial8.getFields();
        java.util.Locale locale13 = null;
        java.lang.String str14 = partial8.toString("[]", locale13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial8);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = partial8.getFields();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        java.lang.String str19 = partial16.toString();
        boolean boolean20 = partial10.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial22.plus(readablePeriod26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        java.lang.String str31 = partial28.toString();
        boolean boolean32 = partial22.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial33.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (int) (byte) 100);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial33.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = partial45.withChronologyRetainFields(chronology47);
        boolean boolean50 = partial45.equals((java.lang.Object) 10.0f);
        boolean boolean51 = partial33.isMatch((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology52 = partial33.getChronology();
        boolean boolean53 = partial22.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean54 = partial16.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean55 = partial8.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = partial33.isSupported(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        java.util.Locale locale7 = null;
        java.lang.String str8 = partial0.toString("[]", locale7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial9.withChronologyRetainFields(chronology13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial9.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial17.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial17.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial17.withChronologyRetainFields(chronology21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial17.isMatch((org.joda.time.ReadablePartial) partial23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        boolean boolean27 = partial9.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial29.withChronologyRetainFields(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial29.plus(readablePeriod33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial29.withPeriodAdded(readablePeriod35, (int) (byte) 10);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial37.withPeriodAdded(readablePeriod44, (int) ' ');
        org.joda.time.Chronology chronology47 = partial46.getChronology();
        org.joda.time.Partial partial48 = partial9.withChronologyRetainFields(chronology47);
        org.joda.time.Partial partial49 = partial0.withChronologyRetainFields(chronology47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = partial0.getFormatter();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNull(dateTimeFormatter50);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = partial47.indexOf(dateTimeFieldType50);
        org.joda.time.DateTimeField[] dateTimeFieldArray52 = partial47.getFields();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray52);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial8.withPeriodAdded(readablePeriod11, (int) (short) 0);
        org.joda.time.Partial partial14 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial14.minus(readablePeriod15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial16);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = partial6.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial6.withChronologyRetainFields(chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial6.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = partial14.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = partial14.withChronologyRetainFields(chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial14.isMatch((org.joda.time.ReadablePartial) partial20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        boolean boolean24 = partial6.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial34.withPeriodAdded(readablePeriod41, (int) ' ');
        org.joda.time.Chronology chronology44 = partial43.getChronology();
        org.joda.time.Partial partial45 = partial6.withChronologyRetainFields(chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial(chronology44);
        boolean boolean47 = partial1.isBefore((org.joda.time.ReadablePartial) partial46);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        boolean boolean6 = partial0.isAfter((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = partial5.getFields();
        int[] intArray8 = partial5.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = partial5.getValue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean9 = partial3.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial3.plus(readablePeriod10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial12.withPeriodAdded(readablePeriod23, 0);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial27.withChronologyRetainFields(chronology29);
        java.lang.String str31 = partial27.toString();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime36 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        boolean boolean40 = partial32.isBefore((org.joda.time.ReadablePartial) partial37);
        int[] intArray41 = partial32.getValues();
        boolean boolean42 = partial27.isEqual((org.joda.time.ReadablePartial) partial32);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial45 = partial27.withPeriodAdded(readablePeriod43, (int) (short) 100);
        boolean boolean46 = partial12.isEqual((org.joda.time.ReadablePartial) partial45);
        int int47 = partial12.size();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial12.withPeriodAdded(readablePeriod48, (int) (byte) 0);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial52.withChronologyRetainFields(chronology54);
        java.lang.String str56 = partial52.toString();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial59 = partial52.withPeriodAdded(readablePeriod57, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray62 = new int[] {};
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(dateTimeFieldTypeArray61, intArray62, chronology63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(dateTimeFieldTypeArray60, intArray62, chronology65);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        org.joda.time.DateTime dateTime71 = partial67.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = partial66.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = partial59.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime74 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial21 = partial13.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial21.withPeriodAdded(readablePeriod28, (int) ' ');
        org.joda.time.Chronology chronology31 = partial30.getChronology();
        int[] intArray32 = partial30.getValues();
        boolean boolean33 = partial7.isEqual((org.joda.time.ReadablePartial) partial30);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial30.plus(readablePeriod34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        java.lang.Object obj37 = null;
        boolean boolean38 = partial35.equals(obj37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial39.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial49.plus(readablePeriod53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial49.withPeriodAdded(readablePeriod55, (int) (byte) 10);
        int int58 = partial44.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = partial57.isSupported(dateTimeFieldType59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial63 = partial57.withPeriodAdded(readablePeriod61, (-1));
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.minus(readablePeriod64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        org.joda.time.Partial partial67 = partial63.without(dateTimeFieldType66);
        boolean boolean68 = partial35.isEqual((org.joda.time.ReadablePartial) partial63);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property70 = partial63.property(dateTimeFieldType69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        java.lang.String str17 = partial14.toString();
        boolean boolean18 = partial8.isAfter((org.joda.time.ReadablePartial) partial14);
        boolean boolean19 = partial6.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = partial14.getChronology();
        java.lang.String str21 = partial14.toStringList();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial22.isMatch((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial30.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial40.plus(readablePeriod44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial40.withPeriodAdded(readablePeriod46, (int) (byte) 10);
        int int49 = partial35.compareTo((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = partial48.isSupported(dateTimeFieldType50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial54 = partial48.withPeriodAdded(readablePeriod52, (-1));
        boolean boolean55 = partial28.isMatch((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = partial57.withChronologyRetainFields(chronology59);
        java.lang.String str61 = partial57.toString();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        boolean boolean69 = partial67.isBefore((org.joda.time.ReadablePartial) partial68);
        boolean boolean70 = partial62.isBefore((org.joda.time.ReadablePartial) partial67);
        int[] intArray71 = partial62.getValues();
        boolean boolean72 = partial57.isEqual((org.joda.time.ReadablePartial) partial62);
        java.lang.String str73 = partial57.toStringList();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = partial75.withChronologyRetainFields(chronology77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial80 = partial75.plus(readablePeriod79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial83 = partial75.withPeriodAdded(readablePeriod81, (int) (byte) 10);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = partial85.toDateTime(readableInstant86);
        org.joda.time.DateTime dateTime88 = partial84.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime89 = partial83.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime90 = partial57.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        boolean boolean91 = partial28.isMatch((org.joda.time.ReadableInstant) dateTime89);
        boolean boolean92 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime89);
        int int93 = partial14.size();
        org.joda.time.DurationFieldType durationFieldType94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial96 = partial14.withFieldAddWrapped(durationFieldType94, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        java.lang.String str17 = partial14.toString();
        boolean boolean18 = partial8.isAfter((org.joda.time.ReadablePartial) partial14);
        boolean boolean19 = partial0.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial14.isSupported(dateTimeFieldType20);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = partial1.getFormatter();
        org.joda.time.Chronology chronology7 = partial1.getChronology();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        java.lang.String str17 = partial13.toString();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial18.isBefore((org.joda.time.ReadablePartial) partial23);
        int[] intArray27 = partial18.getValues();
        boolean boolean28 = partial13.isEqual((org.joda.time.ReadablePartial) partial18);
        int[] intArray29 = partial18.getValues();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial30.withPeriodAdded(readablePeriod34, (int) (byte) 100);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        boolean boolean40 = partial30.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        boolean boolean47 = partial42.equals((java.lang.Object) 10.0f);
        boolean boolean48 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology49 = partial30.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray29, chronology49);
        int int51 = partial50.size();
        org.joda.time.DurationFieldType durationFieldType52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial54 = partial50.withFieldAdded(durationFieldType52, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        java.lang.String str3 = partial0.toString();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        boolean boolean6 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = partial5.withChronologyRetainFields(chronology7);
        java.lang.String str9 = partial5.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        int[] intArray19 = partial10.getValues();
        boolean boolean20 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial5.withPeriodAdded(readablePeriod21, (int) (short) 100);
        boolean boolean24 = partial0.isEqual((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray26 = new int[] {};
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray26, chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        int[] intArray34 = partial29.getValues();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray34, chronology35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray38);
        org.joda.time.Partial partial42 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        org.joda.time.Partial partial44 = partial41.without(dateTimeFieldType43);
        boolean boolean45 = partial5.equals((java.lang.Object) partial41);
        java.util.Locale locale47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = partial5.toString("hi!", locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray56 = new int[] {};
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray56, chronology57);
        boolean boolean59 = partial53.isAfter((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial53.getChronology();
        boolean boolean61 = partial18.equals((java.lang.Object) chronology60);
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology60);
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology60);
        org.joda.time.Partial partial64 = new org.joda.time.Partial(chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial67 = partial64.with(dateTimeFieldType65, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        java.util.Locale locale77 = null;
        java.lang.String str78 = partial43.toString("[]", locale77);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray79 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray80 = new int[] {};
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = new org.joda.time.Partial(dateTimeFieldTypeArray79, intArray80, chronology81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial85 = partial82.withPeriodAdded(readablePeriod83, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.Partial partial87 = partial82.plus(readablePeriod86);
        boolean boolean88 = partial43.isBefore((org.joda.time.ReadablePartial) partial87);
        java.lang.String str89 = partial87.toStringList();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[]" + "'", str89, "[]");
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial40.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime55 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        boolean boolean59 = partial51.isBefore((org.joda.time.ReadablePartial) partial56);
        java.lang.String str60 = partial51.toStringList();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = partial51.isMatch((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial40.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial19.isBefore((org.joda.time.ReadablePartial) partial69);
        java.lang.String str71 = partial69.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = partial69.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = null;
        boolean boolean74 = partial69.isSupported(dateTimeFieldType73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = partial69.getFormatter();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(dateTimeFormatter75);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        java.lang.String str29 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial34.withPeriodAdded(readablePeriod35, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray39 = new int[] {};
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(dateTimeFieldTypeArray38, intArray39, chronology40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        int[] intArray47 = partial42.getValues();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(dateTimeFieldTypeArray38, intArray47, chronology48);
        boolean boolean50 = partial37.isMatch((org.joda.time.ReadablePartial) partial49);
        int[] intArray51 = partial37.getValues();
        org.joda.time.Partial partial52 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial55 = partial52.withPeriodAdded(readablePeriod53, (int) 'a');
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(partial55);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        java.lang.String str32 = partial28.toString();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        boolean boolean41 = partial33.isBefore((org.joda.time.ReadablePartial) partial38);
        int[] intArray42 = partial33.getValues();
        boolean boolean43 = partial28.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = partial33.isSupported(dateTimeFieldType44);
        boolean boolean46 = partial19.isMatch((org.joda.time.ReadablePartial) partial33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = partial19.getFormatter();
        org.joda.time.DurationFieldType durationFieldType48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial50 = partial19.withFieldAdded(durationFieldType48, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(dateTimeFormatter47);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.minus(readablePeriod8);
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = partial9.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial13 = partial9.withField(dateTimeFieldType11, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial13.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = partial13.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial13.withChronologyRetainFields(chronology17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial13.isMatch((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = partial21.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = partial21.toString(dateTimeFormatter23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = partial21.withChronologyRetainFields(chronology25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial21.isMatch((org.joda.time.ReadablePartial) partial27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        boolean boolean31 = partial13.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial33.plus(readablePeriod37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial33.withPeriodAdded(readablePeriod39, (int) (byte) 10);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial41.withPeriodAdded(readablePeriod48, (int) ' ');
        org.joda.time.Chronology chronology51 = partial50.getChronology();
        org.joda.time.Partial partial52 = partial13.withChronologyRetainFields(chronology51);
        org.joda.time.Partial partial53 = partial9.withChronologyRetainFields(chronology51);
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology51);
        org.joda.time.Partial partial55 = new org.joda.time.Partial(chronology51);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial53);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.Object obj5 = null;
        boolean boolean6 = partial4.equals(obj5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial4.minus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        java.lang.String str19 = partial16.toString();
        boolean boolean20 = partial10.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial16.toDateTime(readableInstant22);
        boolean boolean25 = partial4.isMatch(readableInstant22);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        int[] intArray21 = partial16.getValues();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray21, chronology22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        java.lang.String str29 = partial25.toString();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial30.isBefore((org.joda.time.ReadablePartial) partial35);
        int[] intArray39 = partial30.getValues();
        boolean boolean40 = partial25.isEqual((org.joda.time.ReadablePartial) partial30);
        int[] intArray41 = partial30.getValues();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial42.toString(dateTimeFormatter44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial42.withPeriodAdded(readablePeriod46, (int) (byte) 100);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        boolean boolean52 = partial42.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = partial54.withChronologyRetainFields(chronology56);
        boolean boolean59 = partial54.equals((java.lang.Object) 10.0f);
        boolean boolean60 = partial42.isMatch((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology61 = partial42.getChronology();
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray41, chronology61);
        int[] intArray63 = partial62.getValues();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial65.withChronologyRetainFields(chronology67);
        java.lang.String str69 = partial65.toString();
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial65.withPeriodAdded(readablePeriod70, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray74 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray75 = new int[] {};
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(dateTimeFieldTypeArray74, intArray75, chronology76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray73, intArray75, chronology78);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = partial81.toDateTime(readableInstant82);
        org.joda.time.DateTime dateTime84 = partial80.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime86 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Chronology chronology87 = partial72.getChronology();
        org.joda.time.Partial partial88 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray63, chronology87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        int int90 = partial88.indexOf(dateTimeFieldType89);
        java.lang.Class<?> wildcardClass91 = partial88.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial18.withChronologyRetainFields(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial18.plus(readablePeriod22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial18.withPeriodAdded(readablePeriod24, (int) (byte) 10);
        int int27 = partial13.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = partial26.isSupported(dateTimeFieldType28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial26.withPeriodAdded(readablePeriod30, (-1));
        boolean boolean33 = partial6.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial32.getFormatter();
        int int35 = partial32.size();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial37.plus(readablePeriod41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        java.lang.String str46 = partial43.toString();
        boolean boolean47 = partial37.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial43.toDateTime(readableInstant49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        int int59 = partial53.size();
        boolean boolean60 = partial43.isEqual((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime68 = partial64.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = partial61.isAfter((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Partial partial70 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial61);
        int int71 = partial43.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        org.joda.time.Partial partial73 = partial61.without(dateTimeFieldType72);
        int int74 = partial32.compareTo((org.joda.time.ReadablePartial) partial73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        org.joda.time.Partial partial76 = partial73.without(dateTimeFieldType75);
        int[] intArray77 = partial73.getValues();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        java.lang.String str9 = partial6.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial10.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial16.toString(dateTimeFormatter18);
        int int20 = partial16.size();
        int int21 = partial16.size();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial16.plus(readablePeriod22);
        boolean boolean24 = partial6.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial25.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial25.toString(dateTimeFormatter27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial25.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial25.isMatch((org.joda.time.ReadablePartial) partial31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial35.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial35.withPeriodAdded(readablePeriod39, (int) (byte) 100);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        boolean boolean45 = partial35.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields(chronology49);
        boolean boolean52 = partial47.equals((java.lang.Object) 10.0f);
        boolean boolean53 = partial35.isMatch((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology54 = partial35.getChronology();
        org.joda.time.Partial partial55 = partial31.withChronologyRetainFields(chronology54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial(chronology54);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial56.minus(readablePeriod57);
        boolean boolean59 = partial16.isBefore((org.joda.time.ReadablePartial) partial58);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        java.lang.String str26 = partial20.toString("[]");
        boolean boolean27 = partial5.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial29.getFieldTypes();
        java.lang.String str33 = partial29.toString("[]");
        boolean boolean34 = partial5.isEqual((org.joda.time.ReadablePartial) partial29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType36 = partial29.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial21 = partial13.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial21.withPeriodAdded(readablePeriod28, (int) ' ');
        boolean boolean31 = partial11.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = partial21.indexOf(dateTimeFieldType32);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = partial21.getFields();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = partial21.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        int[] intArray53 = partial48.getValues();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray53, chronology54);
        boolean boolean56 = partial43.isMatch((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = partial55.indexOf(dateTimeFieldType57);
        boolean boolean59 = partial34.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = partial60.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial60.toString(dateTimeFormatter62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = partial60.withChronologyRetainFields(chronology64);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial60.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = partial68.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = null;
        java.lang.String str71 = partial68.toString(dateTimeFormatter70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial68.withChronologyRetainFields(chronology72);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        boolean boolean75 = partial68.isMatch((org.joda.time.ReadablePartial) partial74);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = null;
        java.lang.String str77 = partial74.toString(dateTimeFormatter76);
        boolean boolean78 = partial60.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        boolean boolean81 = partial79.isBefore((org.joda.time.ReadablePartial) partial80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = partial80.withChronologyRetainFields(chronology82);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial80.plus(readablePeriod84);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray87 = new int[] {};
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Partial partial89 = new org.joda.time.Partial(dateTimeFieldTypeArray86, intArray87, chronology88);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.Partial partial92 = partial89.withPeriodAdded(readablePeriod90, (int) (short) 100);
        int int93 = partial80.compareTo((org.joda.time.ReadablePartial) partial92);
        org.joda.time.Partial partial94 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial80);
        boolean boolean95 = partial60.isBefore((org.joda.time.ReadablePartial) partial94);
        boolean boolean96 = partial34.isMatch((org.joda.time.ReadablePartial) partial60);
        org.joda.time.ReadablePeriod readablePeriod97 = null;
        org.joda.time.Partial partial98 = partial60.plus(readablePeriod97);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(dateTimeFormatter61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(dateTimeFormatter69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[]" + "'", str77, "[]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(partial98);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial40.withChronologyRetainFields(chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial40.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = partial48.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = partial48.toString(dateTimeFormatter50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial48.withChronologyRetainFields(chronology52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial48.isMatch((org.joda.time.ReadablePartial) partial54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        boolean boolean58 = partial40.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial60.withChronologyRetainFields(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial60.plus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial60.withPeriodAdded(readablePeriod66, (int) (byte) 10);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime73 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime74 = partial68.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial68.withPeriodAdded(readablePeriod75, (int) ' ');
        org.joda.time.Chronology chronology78 = partial77.getChronology();
        org.joda.time.Partial partial79 = partial40.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = partial79.getFieldTypes();
        boolean boolean81 = partial0.isEqual((org.joda.time.ReadablePartial) partial79);
        org.joda.time.DurationFieldType durationFieldType82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial84 = partial0.withFieldAddWrapped(durationFieldType82, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(dateTimeFormatter49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial0.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial0.minus(readablePeriod12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial16 = partial13.withField(dateTimeFieldType14, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(partial13);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        java.lang.String str9 = partial6.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = partial6.getFieldTypes();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Partial partial4 = partial0.plus(readablePeriod3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        org.joda.time.Partial partial6 = partial4.without(dateTimeFieldType5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField8 = partial4.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial17.plus(readablePeriod21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        java.lang.String str26 = partial23.toString();
        boolean boolean27 = partial17.isAfter((org.joda.time.ReadablePartial) partial23);
        boolean boolean28 = partial15.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology29 = partial23.getChronology();
        boolean boolean30 = partial8.isAfter((org.joda.time.ReadablePartial) partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial21 = partial13.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial21.withPeriodAdded(readablePeriod28, (int) ' ');
        boolean boolean31 = partial11.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = partial21.indexOf(dateTimeFieldType32);
        org.joda.time.Chronology chronology34 = partial21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial21.withPeriodAdded(readablePeriod35, (int) (short) -1);
        java.lang.String str38 = partial37.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        java.lang.String str17 = partial1.toStringList();
        org.joda.time.DurationFieldType durationFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial20 = partial1.withFieldAdded(durationFieldType18, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        boolean boolean19 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray21 = new int[] {};
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray21, chronology22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        int[] intArray29 = partial24.getValues();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray29, chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial33.plus(readablePeriod37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial33.withPeriodAdded(readablePeriod39, (int) (byte) 10);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial41.withPeriodAdded(readablePeriod48, (int) ' ');
        boolean boolean51 = partial31.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = partial41.indexOf(dateTimeFieldType52);
        boolean boolean54 = partial5.isEqual((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial55.isBefore((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial56.withChronologyRetainFields(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial56.plus(readablePeriod60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial56.withPeriodAdded(readablePeriod62, (int) (byte) 10);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = partial66.toDateTime(readableInstant67);
        org.joda.time.DateTime dateTime69 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime70 = partial64.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray72 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray74 = new int[] {};
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(dateTimeFieldTypeArray73, intArray74, chronology75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(dateTimeFieldTypeArray72, intArray74, chronology77);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = partial80.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime83 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime84 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean85 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime84);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray72);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = partial8.getFields();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        java.lang.String str17 = partial13.toString();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial18.isBefore((org.joda.time.ReadablePartial) partial23);
        int[] intArray27 = partial18.getValues();
        boolean boolean28 = partial13.isEqual((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial13.withPeriodAdded(readablePeriod29, (int) (short) 100);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = partial32.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = partial32.toString(dateTimeFormatter34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial32.withPeriodAdded(readablePeriod36, (int) (byte) 100);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        boolean boolean42 = partial32.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        boolean boolean49 = partial44.equals((java.lang.Object) 10.0f);
        boolean boolean50 = partial32.isMatch((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology51 = partial32.getChronology();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial32.minus(readablePeriod52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray55 = new int[] {};
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray55, chronology56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime62 = partial58.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        int[] intArray63 = partial58.getValues();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray63, chronology64);
        boolean boolean66 = partial53.equals((java.lang.Object) partial65);
        int int67 = partial31.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial53.plus(readablePeriod68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial53.plus(readablePeriod70);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        int int73 = partial71.indexOf(dateTimeFieldType72);
        boolean boolean74 = partial8.isEqual((org.joda.time.ReadablePartial) partial71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = partial8.getFormatter();
        org.joda.time.Chronology chronology76 = partial8.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(chronology76);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial29.withPeriodAdded(readablePeriod30, (int) (short) 100);
        int int33 = partial20.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        boolean boolean35 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = partial36.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = partial36.toString(dateTimeFormatter38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial42 = partial36.withPeriodAdded(readablePeriod40, (int) (byte) 100);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        boolean boolean46 = partial36.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        boolean boolean53 = partial48.equals((java.lang.Object) 10.0f);
        boolean boolean54 = partial36.isMatch((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology55 = partial36.getChronology();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial36.minus(readablePeriod56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial58.withChronologyRetainFields(chronology62);
        boolean boolean64 = partial36.equals((java.lang.Object) chronology62);
        java.lang.String str65 = partial36.toStringList();
        java.util.Locale locale67 = null;
        java.lang.String str68 = partial36.toString("[]", locale67);
        boolean boolean69 = partial34.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.DateTimeField[] dateTimeFieldArray70 = partial34.getFields();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(dateTimeFormatter37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray70);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Partial partial4 = partial0.plus(readablePeriod3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial6.plus(readablePeriod10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        java.lang.String str22 = partial19.toString();
        boolean boolean23 = partial13.isAfter((org.joda.time.ReadablePartial) partial19);
        boolean boolean24 = partial11.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial25.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial25.toString(dateTimeFormatter27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial25.withPeriodAdded(readablePeriod29, (int) (byte) 100);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial25.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        boolean boolean42 = partial37.equals((java.lang.Object) 10.0f);
        boolean boolean43 = partial25.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology44 = partial25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial25.minus(readablePeriod45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = partial46.isSupported(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = partial46.getChronology();
        org.joda.time.Partial partial50 = partial19.withChronologyRetainFields(chronology49);
        boolean boolean51 = partial0.isEqual((org.joda.time.ReadablePartial) partial19);
        java.lang.Class<?> wildcardClass52 = partial0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial6);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = partial7.getValue((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial13.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = partial13.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial13.withChronologyRetainFields(chronology17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial13.isMatch((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = partial21.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = partial21.toString(dateTimeFormatter23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = partial21.withChronologyRetainFields(chronology25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial21.isMatch((org.joda.time.ReadablePartial) partial27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        boolean boolean31 = partial13.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial33.plus(readablePeriod37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial33.withPeriodAdded(readablePeriod39, (int) (byte) 10);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial41.withPeriodAdded(readablePeriod48, (int) ' ');
        org.joda.time.Chronology chronology51 = partial50.getChronology();
        org.joda.time.Partial partial52 = partial13.withChronologyRetainFields(chronology51);
        org.joda.time.Partial partial53 = partial9.withChronologyRetainFields(chronology51);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial54.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial64.withChronologyRetainFields(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial64.plus(readablePeriod68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial64.withPeriodAdded(readablePeriod70, (int) (byte) 10);
        int int73 = partial59.compareTo((org.joda.time.ReadablePartial) partial72);
        boolean boolean74 = partial53.isEqual((org.joda.time.ReadablePartial) partial72);
        java.lang.String str75 = partial72.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray77 = new int[] {};
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray76, intArray77, chronology78);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray81 = new int[] {};
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray80, intArray81, chronology82);
        org.joda.time.Partial partial84 = new org.joda.time.Partial(dateTimeFieldTypeArray76, intArray81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray85 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray86 = new int[] {};
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Partial partial88 = new org.joda.time.Partial(dateTimeFieldTypeArray85, intArray86, chronology87);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray89 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray90 = new int[] {};
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.Partial partial92 = new org.joda.time.Partial(dateTimeFieldTypeArray89, intArray90, chronology91);
        org.joda.time.Partial partial93 = new org.joda.time.Partial(dateTimeFieldTypeArray85, intArray90);
        boolean boolean94 = partial84.equals((java.lang.Object) intArray90);
        org.joda.time.ReadablePeriod readablePeriod95 = null;
        org.joda.time.Partial partial96 = partial84.plus(readablePeriod95);
        boolean boolean97 = partial72.isAfter((org.joda.time.ReadablePartial) partial84);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[]" + "'", str75, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(partial96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial21 = partial13.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial21.withPeriodAdded(readablePeriod28, (int) ' ');
        boolean boolean31 = partial11.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray33 = new int[] {};
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray33, chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial35.withPeriodAdded(readablePeriod36, (int) (short) 100);
        org.joda.time.Chronology chronology39 = partial38.getChronology();
        org.joda.time.Partial partial40 = partial11.withChronologyRetainFields(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial11.withPeriodAdded(readablePeriod41, (int) (byte) 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial43);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        java.lang.String str16 = partial9.toStringList();
        java.util.Locale locale18 = null;
        java.lang.String str19 = partial9.toString("[]", locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial22 = partial9.withField(dateTimeFieldType20, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        java.lang.String str57 = partial54.toString();
        boolean boolean58 = partial48.isAfter((org.joda.time.ReadablePartial) partial54);
        boolean boolean59 = partial40.isEqual((org.joda.time.ReadablePartial) partial54);
        boolean boolean60 = partial29.equals((java.lang.Object) partial40);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial63 = partial29.withPeriodAdded(readablePeriod61, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial63.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType66 = partial63.getFieldType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        org.joda.time.Partial partial12 = partial5.without(dateTimeFieldType11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray14 = new int[] {};
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray14, chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray18 = new int[] {};
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray18, chronology19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray18);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial22.withPeriodAdded(readablePeriod26, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial28.toString(dateTimeFormatter29);
        int[] intArray31 = partial28.getValues();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = partial32.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = partial32.indexOf(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = partial32.getChronology();
        org.joda.time.Partial partial44 = new org.joda.time.Partial(chronology43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray31, chronology43);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial47.plus(readablePeriod51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        java.lang.String str56 = partial53.toString();
        boolean boolean57 = partial47.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = partial59.withChronologyRetainFields(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial59.plus(readablePeriod63);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        java.lang.String str68 = partial65.toString();
        boolean boolean69 = partial59.isAfter((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = partial70.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = partial70.toString(dateTimeFormatter72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial76 = partial70.withPeriodAdded(readablePeriod74, (int) (byte) 100);
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        boolean boolean79 = partial77.isBefore((org.joda.time.ReadablePartial) partial78);
        boolean boolean80 = partial70.isBefore((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        boolean boolean83 = partial81.isBefore((org.joda.time.ReadablePartial) partial82);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = partial82.withChronologyRetainFields(chronology84);
        boolean boolean87 = partial82.equals((java.lang.Object) 10.0f);
        boolean boolean88 = partial70.isMatch((org.joda.time.ReadablePartial) partial82);
        org.joda.time.Chronology chronology89 = partial70.getChronology();
        boolean boolean90 = partial59.isEqual((org.joda.time.ReadablePartial) partial70);
        boolean boolean91 = partial53.isEqual((org.joda.time.ReadablePartial) partial70);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = null;
        int int93 = partial70.indexOf(dateTimeFieldType92);
        org.joda.time.ReadablePeriod readablePeriod94 = null;
        org.joda.time.Partial partial95 = partial70.plus(readablePeriod94);
        int[] intArray96 = partial70.getValues();
        org.joda.time.Partial partial97 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray96);
        boolean boolean98 = partial12.isEqual((org.joda.time.ReadablePartial) partial97);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(dateTimeFormatter71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(partial95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial0.minus(readablePeriod10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray14 = new int[] {};
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray14, chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray18 = new int[] {};
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray18, chronology19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int[] intArray26 = partial21.getValues();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray26, chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial29.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial30.withChronologyRetainFields(chronology32);
        java.lang.String str34 = partial30.toString();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial35.isBefore((org.joda.time.ReadablePartial) partial40);
        int[] intArray44 = partial35.getValues();
        boolean boolean45 = partial30.isEqual((org.joda.time.ReadablePartial) partial35);
        int[] intArray46 = partial35.getValues();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = partial47.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial47.toString(dateTimeFormatter49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial53 = partial47.withPeriodAdded(readablePeriod51, (int) (byte) 100);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        boolean boolean57 = partial47.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = partial59.withChronologyRetainFields(chronology61);
        boolean boolean64 = partial59.equals((java.lang.Object) 10.0f);
        boolean boolean65 = partial47.isMatch((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology66 = partial47.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray46, chronology66);
        org.joda.time.Partial partial68 = new org.joda.time.Partial(chronology66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray14, chronology66);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(chronology66);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial2.withPeriodAdded(readablePeriod6, (int) (byte) 100);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        boolean boolean12 = partial2.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial14.withChronologyRetainFields(chronology16);
        boolean boolean19 = partial14.equals((java.lang.Object) 10.0f);
        boolean boolean20 = partial2.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology21 = partial2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial2.minus(readablePeriod22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = partial23.isSupported(dateTimeFieldType24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial29.withPeriodAdded(readablePeriod30, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray34 = new int[] {};
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray33, intArray34, chronology35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        int[] intArray42 = partial37.getValues();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(dateTimeFieldTypeArray33, intArray42, chronology43);
        boolean boolean45 = partial32.isMatch((org.joda.time.ReadablePartial) partial44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial32.plus(readablePeriod46);
        boolean boolean48 = partial23.isAfter((org.joda.time.ReadablePartial) partial47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray50 = new int[] {};
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(dateTimeFieldTypeArray49, intArray50, chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial55 = partial52.withPeriodAdded(readablePeriod53, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray57 = new int[] {};
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldTypeArray56, intArray57, chronology58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.DateTime dateTime64 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        int[] intArray65 = partial60.getValues();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(dateTimeFieldTypeArray56, intArray65, chronology66);
        boolean boolean68 = partial55.isMatch((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = partial67.getChronology();
        boolean boolean70 = partial47.isMatch((org.joda.time.ReadablePartial) partial67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = null;
        java.lang.String str72 = partial47.toString(dateTimeFormatter71);
        int int73 = partial47.size();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = partial74.getFormatter();
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = partial77.toDateTime(readableInstant78);
        org.joda.time.DateTime dateTime80 = partial76.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        boolean boolean83 = partial81.isBefore((org.joda.time.ReadablePartial) partial82);
        boolean boolean84 = partial76.isBefore((org.joda.time.ReadablePartial) partial81);
        int[] intArray85 = partial81.getValues();
        org.joda.time.Chronology chronology86 = partial81.getChronology();
        org.joda.time.Partial partial87 = partial74.withChronologyRetainFields(chronology86);
        org.joda.time.Partial partial88 = new org.joda.time.Partial(chronology86);
        org.joda.time.Partial partial89 = partial47.withChronologyRetainFields(chronology86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial90 = new org.joda.time.Partial(dateTimeFieldType0, 100, chronology86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(partial89);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial0.minus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial9.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        boolean boolean26 = partial21.equals((java.lang.Object) 10.0f);
        boolean boolean27 = partial9.isMatch((org.joda.time.ReadablePartial) partial21);
        boolean boolean28 = partial0.isEqual((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        java.util.Locale locale37 = null;
        java.lang.String str38 = partial29.toString("[]", locale37);
        boolean boolean39 = partial9.isEqual((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial41.plus(readablePeriod45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial41.withPeriodAdded(readablePeriod47, (int) (byte) 10);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime54 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime55 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = partial29.isMatch((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Partial partial57 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial29);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray29 = new int[] {};
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray29, chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime36 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        int[] intArray37 = partial32.getValues();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray37, chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        java.lang.String str45 = partial41.toString();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        boolean boolean54 = partial46.isBefore((org.joda.time.ReadablePartial) partial51);
        int[] intArray55 = partial46.getValues();
        boolean boolean56 = partial41.isEqual((org.joda.time.ReadablePartial) partial46);
        int[] intArray57 = partial46.getValues();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial58.withPeriodAdded(readablePeriod62, (int) (byte) 100);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial58.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        boolean boolean75 = partial70.equals((java.lang.Object) 10.0f);
        boolean boolean76 = partial58.isMatch((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology77 = partial58.getChronology();
        org.joda.time.Partial partial78 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray57, chronology77);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = partial79.getFormatter();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = partial82.toDateTime(readableInstant83);
        org.joda.time.DateTime dateTime85 = partial81.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Partial partial86 = new org.joda.time.Partial();
        org.joda.time.Partial partial87 = new org.joda.time.Partial();
        boolean boolean88 = partial86.isBefore((org.joda.time.ReadablePartial) partial87);
        boolean boolean89 = partial81.isBefore((org.joda.time.ReadablePartial) partial86);
        int[] intArray90 = partial86.getValues();
        org.joda.time.Chronology chronology91 = partial86.getChronology();
        org.joda.time.Partial partial92 = partial79.withChronologyRetainFields(chronology91);
        org.joda.time.Partial partial93 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray57, chronology91);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = partial93.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property96 = partial93.property(dateTimeFieldType95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertNull(dateTimeFormatter94);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial15.withChronologyRetainFields(chronology17);
        java.lang.String str19 = partial15.toString();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        boolean boolean28 = partial20.isBefore((org.joda.time.ReadablePartial) partial25);
        int[] intArray29 = partial20.getValues();
        boolean boolean30 = partial15.isEqual((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial15.withPeriodAdded(readablePeriod31, (int) (short) 100);
        boolean boolean34 = partial0.isEqual((org.joda.time.ReadablePartial) partial33);
        int int35 = partial0.size();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial0.withPeriodAdded(readablePeriod36, (int) (byte) 0);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        java.lang.String str44 = partial40.toString();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial40.withPeriodAdded(readablePeriod45, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray50 = new int[] {};
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(dateTimeFieldTypeArray49, intArray50, chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(dateTimeFieldTypeArray48, intArray50, chronology53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        org.joda.time.DateTime dateTime59 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime60 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.DateTimeField[] dateTimeFieldArray66 = partial64.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray69 = new int[] {};
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray68, intArray69, chronology70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(dateTimeFieldTypeArray67, intArray69, chronology72);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.DateTime dateTime78 = partial74.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime79 = partial73.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        boolean boolean80 = partial64.isMatch((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean81 = partial38.isMatch((org.joda.time.ReadableInstant) dateTime79);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray66);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        java.lang.String str35 = partial32.toString();
        boolean boolean36 = partial26.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial37.withPeriodAdded(readablePeriod41, (int) (byte) 100);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial37.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        boolean boolean54 = partial49.equals((java.lang.Object) 10.0f);
        boolean boolean55 = partial37.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology56 = partial37.getChronology();
        boolean boolean57 = partial26.isEqual((org.joda.time.ReadablePartial) partial37);
        int int58 = partial24.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray60 = new int[] {};
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray60, chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = partial62.toString(dateTimeFormatter63);
        boolean boolean65 = partial24.isAfter((org.joda.time.ReadablePartial) partial62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = partial24.getFormatter();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        boolean boolean69 = partial67.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray70 = partial68.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = partial68.getFormatter();
        java.lang.String str72 = partial68.toStringList();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        boolean boolean75 = partial73.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial74.withChronologyRetainFields(chronology76);
        java.lang.String str78 = partial74.toString();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial81 = partial74.withPeriodAdded(readablePeriod79, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray82 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray83 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray84 = new int[] {};
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Partial partial86 = new org.joda.time.Partial(dateTimeFieldTypeArray83, intArray84, chronology85);
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Partial partial88 = new org.joda.time.Partial(dateTimeFieldTypeArray82, intArray84, chronology87);
        org.joda.time.Partial partial89 = new org.joda.time.Partial();
        org.joda.time.Partial partial90 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.DateTime dateTime92 = partial90.toDateTime(readableInstant91);
        org.joda.time.DateTime dateTime93 = partial89.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTime dateTime94 = partial88.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.DateTime dateTime95 = partial81.toDateTime((org.joda.time.ReadableInstant) dateTime94);
        boolean boolean96 = partial68.isMatch((org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.DateTime dateTime97 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime94);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(dateTimeFormatter66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray70);
        org.junit.Assert.assertNull(dateTimeFormatter71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray82);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology38);
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology38);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int[] intArray5 = partial0.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        boolean boolean8 = partial6.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = partial7.withChronologyRetainFields(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial7.plus(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial7.withPeriodAdded(readablePeriod13, (int) (byte) 10);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        java.lang.String str22 = partial15.toStringList();
        boolean boolean23 = partial0.isAfter((org.joda.time.ReadablePartial) partial15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = partial15.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial0.minus(readablePeriod10);
        org.joda.time.DurationFieldType durationFieldType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial14 = partial11.withFieldAddWrapped(durationFieldType12, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial11);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.minus(readablePeriod25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial27.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial27.withPeriodAdded(readablePeriod31, (int) (byte) 100);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial27.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        boolean boolean44 = partial39.equals((java.lang.Object) 10.0f);
        boolean boolean45 = partial27.isMatch((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology46 = partial27.getChronology();
        org.joda.time.Partial partial47 = partial26.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial50 = partial26.withField(dateTimeFieldType48, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(partial47);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        java.lang.String str20 = partial11.toStringList();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = partial11.isMatch((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial0.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = partial0.indexOf(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial34 = partial0.withFieldAdded(durationFieldType32, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray22 = new int[] {};
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray21, intArray22, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray22, chronology25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = partial6.isMatch((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = partial34.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial34.toString(dateTimeFormatter36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial34.withPeriodAdded(readablePeriod38, (int) (byte) 100);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        boolean boolean44 = partial34.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial45.isBefore((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial46.withChronologyRetainFields(chronology48);
        boolean boolean51 = partial46.equals((java.lang.Object) 10.0f);
        boolean boolean52 = partial34.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology53 = partial34.getChronology();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial34.minus(readablePeriod54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = partial55.isSupported(dateTimeFieldType56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray61 = new int[] {};
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(dateTimeFieldTypeArray60, intArray61, chronology62);
        boolean boolean64 = partial58.isAfter((org.joda.time.ReadablePartial) partial63);
        int int65 = partial55.compareTo((org.joda.time.ReadablePartial) partial58);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        org.joda.time.Partial partial67 = partial58.without(dateTimeFieldType66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial67.plus(readablePeriod68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = partial69.withChronologyRetainFields(chronology70);
        boolean boolean72 = partial6.isAfter((org.joda.time.ReadablePartial) partial69);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial34.plus(readablePeriod37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial38.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial0.minus(readablePeriod10);
        org.joda.time.Chronology chronology12 = partial0.getChronology();
        org.joda.time.DurationFieldType durationFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial15 = partial0.withFieldAdded(durationFieldType13, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial6.minus(readablePeriod8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = partial9.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial12.withPeriodAdded(readablePeriod23, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial12.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray28 = new int[] {};
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray28, chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray28);
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray11, intArray28);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial33.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial34.withChronologyRetainFields(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial34.plus(readablePeriod38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial42 = partial34.withPeriodAdded(readablePeriod40, (int) (byte) 10);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str49 = partial42.toStringList();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean59 = partial42.isEqual((org.joda.time.ReadablePartial) partial50);
        int[] intArray60 = partial50.getValues();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        java.lang.String str64 = partial61.toString();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        java.lang.String str70 = partial66.toString();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = partial72.toDateTime(readableInstant73);
        org.joda.time.DateTime dateTime75 = partial71.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        boolean boolean78 = partial76.isBefore((org.joda.time.ReadablePartial) partial77);
        boolean boolean79 = partial71.isBefore((org.joda.time.ReadablePartial) partial76);
        int[] intArray80 = partial71.getValues();
        boolean boolean81 = partial66.isEqual((org.joda.time.ReadablePartial) partial71);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial84 = partial66.withPeriodAdded(readablePeriod82, (int) (short) 100);
        boolean boolean85 = partial61.isEqual((org.joda.time.ReadablePartial) partial66);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = null;
        org.joda.time.Partial partial87 = partial66.without(dateTimeFieldType86);
        org.joda.time.Chronology chronology88 = partial87.getChronology();
        org.joda.time.Partial partial89 = new org.joda.time.Partial(dateTimeFieldTypeArray11, intArray60, chronology88);
        org.joda.time.Partial partial90 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray60);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(chronology88);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        int int77 = partial43.indexOf(dateTimeFieldType76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        boolean boolean80 = partial78.isBefore((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial79.withChronologyRetainFields(chronology81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial84 = partial79.plus(readablePeriod83);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray85 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray86 = new int[] {};
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.Partial partial88 = new org.joda.time.Partial(dateTimeFieldTypeArray85, intArray86, chronology87);
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        org.joda.time.Partial partial91 = partial88.withPeriodAdded(readablePeriod89, (int) (short) 100);
        int int92 = partial79.compareTo((org.joda.time.ReadablePartial) partial91);
        java.lang.String str93 = partial79.toStringList();
        org.joda.time.Partial partial94 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial79);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter95 = null;
        java.lang.String str96 = partial79.toString(dateTimeFormatter95);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray97 = partial79.getFieldTypes();
        boolean boolean98 = partial43.equals((java.lang.Object) partial79);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray85);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[]" + "'", str93, "[]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[]" + "'", str96, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean9 = partial3.isAfter((org.joda.time.ReadablePartial) partial8);
        java.lang.String str10 = partial3.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial6.plus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = partial22.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = partial18.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        org.joda.time.Partial partial21 = partial18.without(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial24 = partial18.withFieldAddWrapped(durationFieldType22, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(partial21);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int[] intArray5 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = partial0.toString(dateTimeFormatter6);
        java.lang.String str8 = partial0.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray10 = new int[] {};
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray10, chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial12.withPeriodAdded(readablePeriod13, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray17 = new int[] {};
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        int[] intArray25 = partial20.getValues();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray25, chronology26);
        boolean boolean28 = partial15.isMatch((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = partial27.getChronology();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray33 = new int[] {};
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray33, chronology34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        org.joda.time.DateTime dateTime40 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        int[] intArray41 = partial36.getValues();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray41, chronology42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray45);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial30.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial52.withChronologyRetainFields(chronology54);
        java.lang.String str56 = partial52.toString();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime61 = partial57.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        boolean boolean65 = partial57.isBefore((org.joda.time.ReadablePartial) partial62);
        int[] intArray66 = partial57.getValues();
        boolean boolean67 = partial52.isEqual((org.joda.time.ReadablePartial) partial57);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial70 = partial52.withPeriodAdded(readablePeriod68, (int) (short) 100);
        boolean boolean71 = partial48.isMatch((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = partial73.toDateTime(readableInstant74);
        org.joda.time.DateTime dateTime76 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime78 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        boolean boolean79 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Partial partial80 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = partial0.getValue(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        java.lang.String str11 = partial0.toString("[]");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = partial0.isSupported(dateTimeFieldType13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial0.withPeriodAdded(readablePeriod15, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = partial17.indexOf(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int int9 = partial0.size();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial10.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial16.toString(dateTimeFormatter18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.Partial partial40 = partial16.withChronologyRetainFields(chronology39);
        boolean boolean41 = partial0.isEqual((org.joda.time.ReadablePartial) partial40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial0.toString(dateTimeFormatter42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial45.withPeriodAdded(readablePeriod46, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial48.toString(dateTimeFormatter49);
        java.lang.String str51 = partial48.toStringList();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.minus(readablePeriod52);
        boolean boolean54 = partial0.isMatch((org.joda.time.ReadablePartial) partial48);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial6.plus(readablePeriod20);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = partial21.getFields();
        java.lang.Class<?> wildcardClass23 = partial21.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        java.lang.String str18 = partial15.toString();
        boolean boolean19 = partial9.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = partial15.toDateTime(readableInstant21);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        boolean boolean30 = partial25.equals((java.lang.Object) 10.0f);
        int int31 = partial25.size();
        boolean boolean32 = partial15.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = partial0.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial0.minus(readablePeriod40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        org.joda.time.Partial partial43 = partial0.without(dateTimeFieldType42);
        java.lang.String str44 = partial0.toString();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        int int14 = partial1.compareTo((org.joda.time.ReadablePartial) partial13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType16 = partial1.getFieldType(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.Chronology chronology40 = partial39.getChronology();
        org.joda.time.DurationFieldType durationFieldType41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial43 = partial39.withFieldAdded(durationFieldType41, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        java.lang.String str57 = partial54.toString();
        boolean boolean58 = partial48.isAfter((org.joda.time.ReadablePartial) partial54);
        boolean boolean59 = partial40.isEqual((org.joda.time.ReadablePartial) partial54);
        boolean boolean60 = partial29.equals((java.lang.Object) partial40);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial63 = partial29.withPeriodAdded(readablePeriod61, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial63.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        org.joda.time.Partial partial66 = partial63.without(dateTimeFieldType65);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = partial63.getValue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
        org.junit.Assert.assertNotNull(partial66);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = partial18.indexOf(dateTimeFieldType20);
        int int22 = partial18.size();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Partial partial4 = partial0.plus(readablePeriod3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        org.joda.time.Partial partial6 = partial4.without(dateTimeFieldType5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        org.joda.time.DateTime dateTime11 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        boolean boolean17 = partial7.isMatch((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial6.isMatch((org.joda.time.ReadablePartial) partial16);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial5);
        int[] intArray11 = partial5.getValues();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        java.lang.String str29 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial0.getFieldTypes();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial31.withPeriodAdded(readablePeriod35, (int) (byte) 100);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        boolean boolean41 = partial31.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial43.withChronologyRetainFields(chronology45);
        boolean boolean48 = partial43.equals((java.lang.Object) 10.0f);
        boolean boolean49 = partial31.isMatch((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology50 = partial31.getChronology();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial31.minus(readablePeriod51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = partial52.isSupported(dateTimeFieldType53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = partial55.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray58 = new int[] {};
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(dateTimeFieldTypeArray57, intArray58, chronology59);
        boolean boolean61 = partial55.isAfter((org.joda.time.ReadablePartial) partial60);
        int int62 = partial52.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        org.joda.time.Partial partial64 = partial55.without(dateTimeFieldType63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial64.plus(readablePeriod65);
        int[] intArray67 = partial64.getValues();
        org.joda.time.Partial partial68 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial71 = partial68.withPeriodAdded(readablePeriod69, (int) (byte) 1);
        java.lang.String str72 = partial71.toStringList();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial15.withChronologyRetainFields(chronology17);
        java.lang.String str19 = partial15.toString();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        boolean boolean28 = partial20.isBefore((org.joda.time.ReadablePartial) partial25);
        int[] intArray29 = partial20.getValues();
        boolean boolean30 = partial15.isEqual((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial15.withPeriodAdded(readablePeriod31, (int) (short) 100);
        boolean boolean34 = partial0.isEqual((org.joda.time.ReadablePartial) partial33);
        int int35 = partial0.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        org.joda.time.Partial partial37 = partial0.without(dateTimeFieldType36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology39 = partial38.getChronology();
        java.util.Locale locale41 = null;
        java.lang.String str42 = partial38.toString("[]", locale41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial38.toDateTime(readableInstant43);
        boolean boolean45 = partial0.isMatch(readableInstant43);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = partial3.isSupported(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial13.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = partial28.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int[] intArray40 = partial35.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray40, chronology41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial44.plus(readablePeriod48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial44.withPeriodAdded(readablePeriod50, (int) (byte) 10);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial52.withPeriodAdded(readablePeriod59, (int) ' ');
        boolean boolean62 = partial42.isAfter((org.joda.time.ReadablePartial) partial52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray64 = new int[] {};
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(dateTimeFieldTypeArray63, intArray64, chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial69 = partial66.withPeriodAdded(readablePeriod67, (int) (short) 100);
        org.joda.time.Chronology chronology70 = partial69.getChronology();
        org.joda.time.Partial partial71 = partial42.withChronologyRetainFields(chronology70);
        boolean boolean72 = partial30.isBefore((org.joda.time.ReadablePartial) partial71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType74 = partial71.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = partial45.withChronologyRetainFields(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial45.plus(readablePeriod49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        java.lang.String str54 = partial51.toString();
        boolean boolean55 = partial45.isAfter((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = partial57.withChronologyRetainFields(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial57.plus(readablePeriod61);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        java.lang.String str66 = partial63.toString();
        boolean boolean67 = partial57.isAfter((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = partial68.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = null;
        java.lang.String str71 = partial68.toString(dateTimeFormatter70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial74 = partial68.withPeriodAdded(readablePeriod72, (int) (byte) 100);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        boolean boolean77 = partial75.isBefore((org.joda.time.ReadablePartial) partial76);
        boolean boolean78 = partial68.isBefore((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        boolean boolean81 = partial79.isBefore((org.joda.time.ReadablePartial) partial80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = partial80.withChronologyRetainFields(chronology82);
        boolean boolean85 = partial80.equals((java.lang.Object) 10.0f);
        boolean boolean86 = partial68.isMatch((org.joda.time.ReadablePartial) partial80);
        org.joda.time.Chronology chronology87 = partial68.getChronology();
        boolean boolean88 = partial57.isEqual((org.joda.time.ReadablePartial) partial68);
        boolean boolean89 = partial51.isEqual((org.joda.time.ReadablePartial) partial68);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = null;
        int int91 = partial68.indexOf(dateTimeFieldType90);
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        org.joda.time.Partial partial93 = partial68.plus(readablePeriod92);
        org.joda.time.Partial partial94 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial68);
        boolean boolean95 = partial43.isEqual((org.joda.time.ReadablePartial) partial94);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(dateTimeFormatter69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial15.withChronologyRetainFields(chronology17);
        java.lang.String str19 = partial15.toString();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        boolean boolean28 = partial20.isBefore((org.joda.time.ReadablePartial) partial25);
        int[] intArray29 = partial20.getValues();
        boolean boolean30 = partial15.isEqual((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial15.withPeriodAdded(readablePeriod31, (int) (short) 100);
        boolean boolean34 = partial0.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial0.toDateTime(readableInstant35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial37.withChronologyRetainFields(chronology41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial37.isMatch((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = partial45.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = partial45.toString(dateTimeFormatter47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial45.withChronologyRetainFields(chronology49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial45.isMatch((org.joda.time.ReadablePartial) partial51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial51.toString(dateTimeFormatter53);
        boolean boolean55 = partial37.isBefore((org.joda.time.ReadablePartial) partial51);
        int int56 = partial0.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        org.joda.time.Partial partial58 = partial37.without(dateTimeFieldType57);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(dateTimeFormatter46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(partial58);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = partial2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime5 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime6 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial11 = partial8.withPeriodAdded(readablePeriod9, (int) (byte) 0);
        int int12 = partial0.compareTo((org.joda.time.ReadablePartial) partial8);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = partial8.indexOf(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = partial8.getChronology();
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = partial8.isMatch(readableInstant16);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial40.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime55 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        boolean boolean59 = partial51.isBefore((org.joda.time.ReadablePartial) partial56);
        java.lang.String str60 = partial51.toStringList();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = partial51.isMatch((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial40.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial19.isBefore((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = partial69.withChronologyRetainFields(chronology71);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(partial72);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        java.lang.String str11 = partial0.toString("[]");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = partial0.isSupported(dateTimeFieldType13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = partial0.indexOf(dateTimeFieldType15);
        int int17 = partial0.size();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        int int20 = partial16.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        org.joda.time.Partial partial22 = partial16.without(dateTimeFieldType21);
        int int23 = partial22.size();
        org.joda.time.DurationFieldType durationFieldType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial26 = partial22.withFieldAddWrapped(durationFieldType24, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial2.withChronologyRetainFields(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        java.lang.String str28 = partial25.toString();
        boolean boolean29 = partial19.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial25.toDateTime(readableInstant31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        boolean boolean40 = partial35.equals((java.lang.Object) 10.0f);
        int int41 = partial35.size();
        boolean boolean42 = partial25.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean50 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean51 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str52 = partial0.toString();
        java.lang.String str53 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial0.withPeriodAdded(readablePeriod55, (int) '4');
        org.joda.time.Chronology chronology58 = partial57.getChronology();
        org.joda.time.Partial partial59 = new org.joda.time.Partial(chronology58);
        org.joda.time.Chronology chronology60 = partial59.getChronology();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(chronology60);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        int int20 = partial16.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        org.joda.time.Partial partial22 = partial16.without(dateTimeFieldType21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int24 = partial22.get(dateTimeFieldType23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial22);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial8.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial16.withPeriodAdded(readablePeriod23, (int) ' ');
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial25.equals((java.lang.Object) boolean28);
        boolean boolean30 = partial1.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial1.getFieldTypes();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        java.lang.String str37 = partial33.toString();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        boolean boolean46 = partial38.isBefore((org.joda.time.ReadablePartial) partial43);
        int[] intArray47 = partial38.getValues();
        boolean boolean48 = partial33.isEqual((org.joda.time.ReadablePartial) partial38);
        java.lang.String str49 = partial33.toStringList();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial51.plus(readablePeriod55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial59 = partial51.withPeriodAdded(readablePeriod57, (int) (byte) 10);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.DateTime dateTime64 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime65 = partial59.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime66 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        boolean boolean30 = partial24.isAfter((org.joda.time.ReadablePartial) partial29);
        int int31 = partial21.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        org.joda.time.Partial partial33 = partial24.without(dateTimeFieldType32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = partial34.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial34.toString(dateTimeFormatter36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial34.withPeriodAdded(readablePeriod38, (int) (byte) 100);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        boolean boolean44 = partial34.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial45.isBefore((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial46.withChronologyRetainFields(chronology48);
        boolean boolean51 = partial46.equals((java.lang.Object) 10.0f);
        boolean boolean52 = partial34.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology53 = partial34.getChronology();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial34.minus(readablePeriod54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial55.getFieldTypes();
        org.joda.time.Chronology chronology57 = partial55.getChronology();
        org.joda.time.Partial partial58 = new org.joda.time.Partial(chronology57);
        org.joda.time.Partial partial59 = partial24.withChronologyRetainFields(chronology57);
        org.joda.time.DurationFieldType durationFieldType60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial62 = partial24.withFieldAdded(durationFieldType60, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(partial59);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        java.lang.String str3 = partial0.toString();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        boolean boolean6 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = partial5.withChronologyRetainFields(chronology7);
        java.lang.String str9 = partial5.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        int[] intArray19 = partial10.getValues();
        boolean boolean20 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial5.withPeriodAdded(readablePeriod21, (int) (short) 100);
        boolean boolean24 = partial0.isEqual((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray26 = new int[] {};
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray26, chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        int[] intArray34 = partial29.getValues();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray34, chronology35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray38);
        org.joda.time.Partial partial42 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        org.joda.time.Partial partial44 = partial41.without(dateTimeFieldType43);
        boolean boolean45 = partial5.equals((java.lang.Object) partial41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = partial5.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial5.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = partial0.getFieldTypes();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial14.withChronologyRetainFields(chronology16);
        boolean boolean18 = partial8.isMatch((org.joda.time.ReadablePartial) partial17);
        int int19 = partial0.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial17.isSupported(dateTimeFieldType20);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = partial18.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        org.joda.time.Partial partial21 = partial18.without(dateTimeFieldType20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial18.isSupported(dateTimeFieldType22);
        java.lang.String str24 = partial18.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        java.lang.String str19 = partial16.toString();
        boolean boolean20 = partial10.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial22.plus(readablePeriod26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        java.lang.String str31 = partial28.toString();
        boolean boolean32 = partial22.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial33.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (int) (byte) 100);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial33.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = partial45.withChronologyRetainFields(chronology47);
        boolean boolean50 = partial45.equals((java.lang.Object) 10.0f);
        boolean boolean51 = partial33.isMatch((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology52 = partial33.getChronology();
        boolean boolean53 = partial22.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean54 = partial16.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean55 = partial8.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial33.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial33.plus(readablePeriod57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField60 = partial58.getField(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(partial58);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial40.withChronologyRetainFields(chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial40.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = partial48.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = partial48.toString(dateTimeFormatter50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial48.withChronologyRetainFields(chronology52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial48.isMatch((org.joda.time.ReadablePartial) partial54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        boolean boolean58 = partial40.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial60.withChronologyRetainFields(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial60.plus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial60.withPeriodAdded(readablePeriod66, (int) (byte) 10);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime73 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime74 = partial68.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial68.withPeriodAdded(readablePeriod75, (int) ' ');
        org.joda.time.Chronology chronology78 = partial77.getChronology();
        org.joda.time.Partial partial79 = partial40.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = partial79.getFieldTypes();
        boolean boolean81 = partial0.isEqual((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology82 = partial79.getChronology();
        org.joda.time.Partial partial83 = new org.joda.time.Partial(chronology82);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(dateTimeFormatter49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(chronology82);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial21 = partial13.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial21.withPeriodAdded(readablePeriod28, (int) ' ');
        org.joda.time.Chronology chronology31 = partial30.getChronology();
        int[] intArray32 = partial30.getValues();
        boolean boolean33 = partial7.isEqual((org.joda.time.ReadablePartial) partial30);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial30.plus(readablePeriod34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        java.lang.Object obj37 = null;
        boolean boolean38 = partial35.equals(obj37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial39.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial49.plus(readablePeriod53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial49.withPeriodAdded(readablePeriod55, (int) (byte) 10);
        int int58 = partial44.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = partial57.isSupported(dateTimeFieldType59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial63 = partial57.withPeriodAdded(readablePeriod61, (-1));
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.minus(readablePeriod64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        org.joda.time.Partial partial67 = partial63.without(dateTimeFieldType66);
        boolean boolean68 = partial35.isEqual((org.joda.time.ReadablePartial) partial63);
        java.lang.String str69 = partial35.toStringList();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial22.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial32.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        int int41 = partial27.compareTo((org.joda.time.ReadablePartial) partial40);
        int int42 = partial21.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial44.plus(readablePeriod48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial44.withPeriodAdded(readablePeriod50, (int) (byte) 10);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial52.withPeriodAdded(readablePeriod59, (int) ' ');
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        boolean boolean65 = partial61.equals((java.lang.Object) boolean64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial61.toString(dateTimeFormatter66);
        boolean boolean68 = partial21.isEqual((org.joda.time.ReadablePartial) partial61);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = partial61.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial8.withPeriodAdded(readablePeriod11, (int) (short) 0);
        org.joda.time.Partial partial14 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime19 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        boolean boolean23 = partial15.isBefore((org.joda.time.ReadablePartial) partial20);
        java.lang.String str24 = partial15.toStringList();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean30 = partial15.isMatch((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        boolean boolean39 = partial31.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial41.plus(readablePeriod45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial41.withPeriodAdded(readablePeriod47, (int) (byte) 10);
        int int50 = partial36.compareTo((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial15.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial49.plus(readablePeriod52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial49.toString(dateTimeFormatter54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = partial49.isSupported(dateTimeFieldType56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial49.plus(readablePeriod58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = partial60.toDateTime(readableInstant61);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.DateTime dateTime67 = partial63.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean68 = partial60.isAfter((org.joda.time.ReadablePartial) partial63);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = partial60.indexOf(dateTimeFieldType69);
        org.joda.time.Chronology chronology71 = partial60.getChronology();
        org.joda.time.Partial partial72 = partial59.withChronologyRetainFields(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial59.minus(readablePeriod73);
        boolean boolean75 = partial14.isEqual((org.joda.time.ReadablePartial) partial74);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.minus(readablePeriod25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial27.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial27.withPeriodAdded(readablePeriod31, (int) (byte) 100);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial27.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        boolean boolean44 = partial39.equals((java.lang.Object) 10.0f);
        boolean boolean45 = partial27.isMatch((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology46 = partial27.getChronology();
        org.joda.time.Partial partial47 = partial26.withChronologyRetainFields(chronology46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial47.toString(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial6.plus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial21);
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = partial22.toString("hi!", locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial21);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial2.isBefore((org.joda.time.ReadablePartial) partial7);
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = partial7.getChronology();
        org.joda.time.Partial partial13 = partial0.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = partial0.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = partial0.isSupported(dateTimeFieldType15);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = partial1.getFields();
        java.lang.String str5 = partial1.toString("[]");
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = partial6.toDateTime(readableInstant7);
        java.lang.String str9 = partial6.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial10.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial11.withChronologyRetainFields(chronology13);
        java.lang.String str15 = partial11.toString();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        int[] intArray25 = partial16.getValues();
        boolean boolean26 = partial11.isEqual((org.joda.time.ReadablePartial) partial16);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial11.withPeriodAdded(readablePeriod27, (int) (short) 100);
        boolean boolean30 = partial6.isEqual((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        org.joda.time.Partial partial32 = partial11.without(dateTimeFieldType31);
        boolean boolean33 = partial1.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial32);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = partial6.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial6.withChronologyRetainFields(chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial6.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial17.plus(readablePeriod21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        java.lang.String str26 = partial23.toString();
        boolean boolean27 = partial17.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial23.toDateTime(readableInstant29);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        boolean boolean38 = partial33.equals((java.lang.Object) 10.0f);
        int int39 = partial33.size();
        boolean boolean40 = partial23.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean48 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime53 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        boolean boolean57 = partial49.isBefore((org.joda.time.ReadablePartial) partial54);
        int[] intArray58 = partial54.getValues();
        org.joda.time.Chronology chronology59 = partial54.getChronology();
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Partial partial61 = partial5.withChronologyRetainFields(chronology59);
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray64 = new int[] {};
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(dateTimeFieldTypeArray63, intArray64, chronology65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = partial66.toString(dateTimeFormatter67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray70 = new int[] {};
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray70, chronology71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = null;
        java.lang.String str74 = partial72.toString(dateTimeFormatter73);
        boolean boolean75 = partial66.isMatch((org.joda.time.ReadablePartial) partial72);
        org.joda.time.DateTimeField[] dateTimeFieldArray76 = partial66.getFields();
        boolean boolean77 = partial62.equals((java.lang.Object) dateTimeFieldArray76);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[]" + "'", str74, "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray20 = new int[] {};
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(dateTimeFieldTypeArray19, intArray20, chronology21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray20);
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial23.without(dateTimeFieldType25);
        int int27 = partial23.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial23.without(dateTimeFieldType28);
        boolean boolean30 = partial4.isAfter((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int32 = partial4.get(dateTimeFieldType31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        java.lang.String str9 = partial8.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = partial8.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray12 = new int[] {};
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = new org.joda.time.Partial(dateTimeFieldTypeArray11, intArray12, chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial14.withPeriodAdded(readablePeriod15, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray19 = new int[] {};
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(dateTimeFieldTypeArray18, intArray19, chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial21.withPeriodAdded(readablePeriod22, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray26 = new int[] {};
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray26, chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        int[] intArray34 = partial29.getValues();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray34, chronology35);
        boolean boolean37 = partial24.isMatch((org.joda.time.ReadablePartial) partial36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial24.plus(readablePeriod38);
        org.joda.time.Chronology chronology40 = partial39.getChronology();
        org.joda.time.Partial partial41 = partial17.withChronologyRetainFields(chronology40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial42.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial52.withChronologyRetainFields(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial52.plus(readablePeriod56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial52.withPeriodAdded(readablePeriod58, (int) (byte) 10);
        int int61 = partial47.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.DateTimeField[] dateTimeFieldArray62 = partial60.getFields();
        boolean boolean63 = partial41.isEqual((org.joda.time.ReadablePartial) partial60);
        boolean boolean64 = partial8.equals((java.lang.Object) partial60);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial51.plus(readablePeriod55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        java.lang.String str60 = partial57.toString();
        boolean boolean61 = partial51.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial57.toDateTime(readableInstant63);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial66.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial67.withChronologyRetainFields(chronology69);
        boolean boolean72 = partial67.equals((java.lang.Object) 10.0f);
        int int73 = partial67.size();
        boolean boolean74 = partial57.isEqual((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = partial75.isAfter((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Partial partial84 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial75);
        int int85 = partial57.compareTo((org.joda.time.ReadablePartial) partial75);
        boolean boolean86 = partial47.isEqual((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeField[] dateTimeFieldArray87 = partial47.getFields();
        org.joda.time.Partial partial88 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial89 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property91 = partial89.property(dateTimeFieldType90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray87);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray56 = new int[] {};
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray56, chronology57);
        boolean boolean59 = partial53.isAfter((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial53.getChronology();
        boolean boolean61 = partial18.equals((java.lang.Object) chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        org.joda.time.Partial partial63 = partial18.without(dateTimeFieldType62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial65.withPeriodAdded(readablePeriod66, (int) (byte) 0);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.DateTime dateTime74 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime75 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        int[] intArray76 = partial69.getValues();
        boolean boolean77 = partial68.isMatch((org.joda.time.ReadablePartial) partial69);
        int int78 = partial63.compareTo((org.joda.time.ReadablePartial) partial69);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray79 = partial63.getFieldTypes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray79);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        int int10 = partial6.size();
        int int11 = partial6.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = partial6.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = partial19.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField22 = partial19.getField((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        java.lang.String str16 = partial9.toStringList();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial17.isAfter((org.joda.time.ReadablePartial) partial20);
        boolean boolean26 = partial9.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial17.toString(dateTimeFormatter27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial35 = partial32.withPeriodAdded(readablePeriod33, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray37 = new int[] {};
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray37, chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime44 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        int[] intArray45 = partial40.getValues();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray45, chronology46);
        boolean boolean48 = partial35.isMatch((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = partial47.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial(chronology49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial(chronology49);
        org.joda.time.Partial partial53 = partial17.withChronologyRetainFields(chronology49);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(partial53);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        java.lang.String str4 = partial3.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = partial3.getFormatter();
        java.lang.String str6 = partial3.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial21.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = partial21.toString(dateTimeFormatter23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = partial21.isSupported(dateTimeFieldType25);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial0.minus(readablePeriod19);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(partial20);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        boolean boolean32 = partial1.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = partial34.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial34.toString(dateTimeFormatter36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial34.withPeriodAdded(readablePeriod38, (int) (byte) 100);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        boolean boolean44 = partial34.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial45.isBefore((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial46.withChronologyRetainFields(chronology48);
        boolean boolean51 = partial46.equals((java.lang.Object) 10.0f);
        boolean boolean52 = partial34.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology53 = partial34.getChronology();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial34.minus(readablePeriod54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = partial55.isSupported(dateTimeFieldType56);
        org.joda.time.Chronology chronology58 = partial55.getChronology();
        org.joda.time.Partial partial59 = partial33.withChronologyRetainFields(chronology58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = partial33.indexOf(dateTimeFieldType60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        org.joda.time.Partial partial63 = partial33.without(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(partial63);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.minus(readablePeriod25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        org.joda.time.Partial partial28 = partial26.without(dateTimeFieldType27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial26.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        org.joda.time.Partial partial8 = partial6.without(dateTimeFieldType7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial9.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        boolean boolean26 = partial21.equals((java.lang.Object) 10.0f);
        boolean boolean27 = partial9.isMatch((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial29.withChronologyRetainFields(chronology31);
        java.lang.String str33 = partial29.toString();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        boolean boolean42 = partial34.isBefore((org.joda.time.ReadablePartial) partial39);
        int[] intArray43 = partial34.getValues();
        boolean boolean44 = partial29.isEqual((org.joda.time.ReadablePartial) partial34);
        java.lang.String str45 = partial29.toStringList();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial47.plus(readablePeriod51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial55 = partial47.withPeriodAdded(readablePeriod53, (int) (byte) 10);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime60 = partial56.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime62 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean63 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        org.joda.time.Partial partial65 = partial9.without(dateTimeFieldType64);
        boolean boolean66 = partial6.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        int int68 = partial65.indexOf(dateTimeFieldType67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        boolean boolean70 = partial65.isSupported(dateTimeFieldType69);
        org.joda.time.Partial partial71 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Chronology chronology10 = partial5.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.minus(readablePeriod12);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = partial11.getValue(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(partial13);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial24.without(dateTimeFieldType25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial24.withPeriodAdded(readablePeriod27, (int) (short) 100);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray33 = new int[] {};
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray33, chronology34);
        boolean boolean36 = partial30.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeField[] dateTimeFieldArray37 = partial35.getFields();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        boolean boolean46 = partial38.isBefore((org.joda.time.ReadablePartial) partial43);
        java.lang.String str47 = partial38.toStringList();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial35.withPeriodAdded(readablePeriod55, (int) 'a');
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial58.withPeriodAdded(readablePeriod62, (int) (byte) 100);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial58.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        boolean boolean75 = partial70.equals((java.lang.Object) 10.0f);
        boolean boolean76 = partial58.isMatch((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology77 = partial58.getChronology();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial58.minus(readablePeriod78);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray81 = new int[] {};
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray80, intArray81, chronology82);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = partial85.toDateTime(readableInstant86);
        org.joda.time.DateTime dateTime88 = partial84.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        int[] intArray89 = partial84.getValues();
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.Partial partial91 = new org.joda.time.Partial(dateTimeFieldTypeArray80, intArray89, chronology90);
        boolean boolean92 = partial79.equals((java.lang.Object) partial91);
        boolean boolean93 = partial35.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.ReadablePeriod readablePeriod94 = null;
        org.joda.time.Partial partial95 = partial79.minus(readablePeriod94);
        int int96 = partial29.compareTo((org.joda.time.ReadablePartial) partial79);
        org.joda.time.ReadablePeriod readablePeriod97 = null;
        org.joda.time.Partial partial98 = partial29.minus(readablePeriod97);
        int int99 = partial29.size();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(partial95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(partial98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial8.withPeriodAdded(readablePeriod11, (int) (short) 0);
        org.joda.time.Partial partial14 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial8);
        java.lang.String str15 = partial8.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial9.withChronologyRetainFields(chronology13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial9.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = partial15.toString(dateTimeFormatter17);
        int int19 = partial15.size();
        int int20 = partial15.size();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial15.plus(readablePeriod21);
        boolean boolean23 = partial6.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial25.plus(readablePeriod29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial25.withPeriodAdded(readablePeriod31, (int) (byte) 10);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial42 = partial33.withPeriodAdded(readablePeriod40, (int) ' ');
        org.joda.time.Chronology chronology43 = partial42.getChronology();
        int[] intArray44 = partial42.getValues();
        boolean boolean45 = partial6.equals((java.lang.Object) intArray44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial6.plus(readablePeriod46);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial2.withChronologyRetainFields(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        java.lang.String str28 = partial25.toString();
        boolean boolean29 = partial19.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial25.toDateTime(readableInstant31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        boolean boolean40 = partial35.equals((java.lang.Object) 10.0f);
        int int41 = partial35.size();
        boolean boolean42 = partial25.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean50 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean51 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str52 = partial0.toString();
        java.lang.String str53 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial0.getFieldTypes();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = partial55.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray58 = new int[] {};
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(dateTimeFieldTypeArray57, intArray58, chronology59);
        boolean boolean61 = partial55.isAfter((org.joda.time.ReadablePartial) partial60);
        org.joda.time.DateTimeField[] dateTimeFieldArray62 = partial60.getFields();
        int[] intArray63 = partial60.getValues();
        org.joda.time.Partial partial64 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray63);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial10.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial11.withChronologyRetainFields(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial11.plus(readablePeriod15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        java.lang.String str20 = partial17.toString();
        boolean boolean21 = partial11.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial17.toDateTime(readableInstant23);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial27.withChronologyRetainFields(chronology29);
        boolean boolean32 = partial27.equals((java.lang.Object) 10.0f);
        int int33 = partial27.size();
        boolean boolean34 = partial17.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        org.joda.time.Partial partial45 = partial42.without(dateTimeFieldType44);
        boolean boolean46 = partial6.isEqual((org.joda.time.ReadablePartial) partial42);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial49 = partial6.withFieldAdded(durationFieldType47, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = partial1.getFieldTypes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        int[] intArray53 = partial48.getValues();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray53, chronology54);
        boolean boolean56 = partial43.isMatch((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = partial55.indexOf(dateTimeFieldType57);
        boolean boolean59 = partial34.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        org.joda.time.Partial partial61 = partial55.without(dateTimeFieldType60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = partial61.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        org.joda.time.Partial partial64 = partial61.without(dateTimeFieldType63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        int int66 = partial64.indexOf(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial40.withChronologyRetainFields(chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial40.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = partial48.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = partial48.toString(dateTimeFormatter50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial48.withChronologyRetainFields(chronology52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial48.isMatch((org.joda.time.ReadablePartial) partial54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        boolean boolean58 = partial40.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial60.withChronologyRetainFields(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial60.plus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial60.withPeriodAdded(readablePeriod66, (int) (byte) 10);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime73 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime74 = partial68.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial68.withPeriodAdded(readablePeriod75, (int) ' ');
        org.joda.time.Chronology chronology78 = partial77.getChronology();
        org.joda.time.Partial partial79 = partial40.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = partial79.getFieldTypes();
        boolean boolean81 = partial0.isEqual((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology82 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial84 = partial0.plus(readablePeriod83);
        org.joda.time.Chronology chronology85 = partial84.getChronology();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(dateTimeFormatter49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(chronology85);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial51.plus(readablePeriod55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        java.lang.String str60 = partial57.toString();
        boolean boolean61 = partial51.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial57.toDateTime(readableInstant63);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial66.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial67.withChronologyRetainFields(chronology69);
        boolean boolean72 = partial67.equals((java.lang.Object) 10.0f);
        int int73 = partial67.size();
        boolean boolean74 = partial57.isEqual((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = partial75.isAfter((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Partial partial84 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial75);
        int int85 = partial57.compareTo((org.joda.time.ReadablePartial) partial75);
        boolean boolean86 = partial47.isEqual((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeField[] dateTimeFieldArray87 = partial47.getFields();
        org.joda.time.Partial partial88 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        java.lang.String str89 = partial88.toString();
        int[] intArray90 = partial88.getValues();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[]" + "'", str89, "[]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        int int4 = partial0.indexOf(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial2.withChronologyRetainFields(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        java.lang.String str28 = partial25.toString();
        boolean boolean29 = partial19.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial25.toDateTime(readableInstant31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        boolean boolean40 = partial35.equals((java.lang.Object) 10.0f);
        int int41 = partial35.size();
        boolean boolean42 = partial25.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean50 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean51 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str52 = partial0.toString();
        java.lang.String str53 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial0.withPeriodAdded(readablePeriod55, (int) '4');
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = partial59.withChronologyRetainFields(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial59.plus(readablePeriod63);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        java.lang.String str68 = partial65.toString();
        boolean boolean69 = partial59.isAfter((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = partial70.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = partial70.toString(dateTimeFormatter72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial76 = partial70.withPeriodAdded(readablePeriod74, (int) (byte) 100);
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        boolean boolean79 = partial77.isBefore((org.joda.time.ReadablePartial) partial78);
        boolean boolean80 = partial70.isBefore((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        boolean boolean83 = partial81.isBefore((org.joda.time.ReadablePartial) partial82);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = partial82.withChronologyRetainFields(chronology84);
        boolean boolean87 = partial82.equals((java.lang.Object) 10.0f);
        boolean boolean88 = partial70.isMatch((org.joda.time.ReadablePartial) partial82);
        org.joda.time.Chronology chronology89 = partial70.getChronology();
        boolean boolean90 = partial59.isEqual((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Partial partial91 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial59);
        int int92 = partial0.compareTo((org.joda.time.ReadablePartial) partial59);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(dateTimeFormatter71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        java.lang.String str19 = partial16.toString();
        boolean boolean20 = partial10.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial22.plus(readablePeriod26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        java.lang.String str31 = partial28.toString();
        boolean boolean32 = partial22.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial33.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (int) (byte) 100);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial33.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = partial45.withChronologyRetainFields(chronology47);
        boolean boolean50 = partial45.equals((java.lang.Object) 10.0f);
        boolean boolean51 = partial33.isMatch((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology52 = partial33.getChronology();
        boolean boolean53 = partial22.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean54 = partial16.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean55 = partial8.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial33.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial33.plus(readablePeriod57);
        java.lang.String str59 = partial58.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = partial58.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial58.minus(readablePeriod61);
        java.lang.String str63 = partial62.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        java.lang.String str17 = partial13.toString();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial18.isBefore((org.joda.time.ReadablePartial) partial23);
        int[] intArray27 = partial18.getValues();
        boolean boolean28 = partial13.isEqual((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial13.withPeriodAdded(readablePeriod29, (int) (short) 100);
        java.lang.String str32 = partial13.toStringList();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial13.plus(readablePeriod33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = partial13.getFormatter();
        boolean boolean36 = partial11.isAfter((org.joda.time.ReadablePartial) partial13);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = partial0.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial0.withPeriodAdded(readablePeriod23, (int) (byte) 1);
        java.lang.String str26 = partial0.toStringList();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] {};
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray5, chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray10 = new int[] {};
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray10, chronology11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray14 = new int[] {};
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray14, chronology15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray14);
        boolean boolean18 = partial8.equals((java.lang.Object) intArray14);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial8.plus(readablePeriod19);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = partial8.getFields();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        java.lang.String str26 = partial22.toString();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial27.isBefore((org.joda.time.ReadablePartial) partial32);
        int[] intArray36 = partial27.getValues();
        boolean boolean37 = partial22.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial22.withPeriodAdded(readablePeriod38, (int) (short) 100);
        boolean boolean41 = partial18.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial43.withChronologyRetainFields(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial43.plus(readablePeriod47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial51 = partial43.withPeriodAdded(readablePeriod49, (int) (byte) 10);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.DateTime dateTime56 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial51.withPeriodAdded(readablePeriod58, (int) ' ');
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        int int68 = partial60.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial61.getFieldTypes();
        boolean boolean70 = partial22.isBefore((org.joda.time.ReadablePartial) partial61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = partial61.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial1.minus(readablePeriod6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial14 = partial8.withPeriodAdded(readablePeriod12, (int) (byte) 100);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial8.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        boolean boolean25 = partial20.equals((java.lang.Object) 10.0f);
        boolean boolean26 = partial8.isMatch((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology27 = partial8.getChronology();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial8.minus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial30.withChronologyRetainFields(chronology34);
        boolean boolean36 = partial8.equals((java.lang.Object) chronology34);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        boolean boolean45 = partial37.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial47.plus(readablePeriod51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial55 = partial47.withPeriodAdded(readablePeriod53, (int) (byte) 10);
        int int56 = partial42.compareTo((org.joda.time.ReadablePartial) partial55);
        boolean boolean57 = partial8.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime62 = partial58.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        boolean boolean66 = partial58.isBefore((org.joda.time.ReadablePartial) partial63);
        int[] intArray67 = partial63.getValues();
        org.joda.time.Chronology chronology68 = partial63.getChronology();
        boolean boolean69 = partial8.equals((java.lang.Object) partial63);
        int int70 = partial7.compareTo((org.joda.time.ReadablePartial) partial8);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial27.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int[] intArray40 = partial35.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray40, chronology41);
        boolean boolean43 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial30.plus(readablePeriod44);
        boolean boolean46 = partial21.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray48 = new int[] {};
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray47, intArray48, chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial53 = partial50.withPeriodAdded(readablePeriod51, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray55 = new int[] {};
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray55, chronology56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime62 = partial58.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        int[] intArray63 = partial58.getValues();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray63, chronology64);
        boolean boolean66 = partial53.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial65.getChronology();
        boolean boolean68 = partial45.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = partial45.toString(dateTimeFormatter69);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = partial72.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = null;
        java.lang.String str75 = partial72.toString(dateTimeFormatter74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial78 = partial72.withPeriodAdded(readablePeriod76, (int) (byte) 100);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        boolean boolean81 = partial79.isBefore((org.joda.time.ReadablePartial) partial80);
        boolean boolean82 = partial72.isBefore((org.joda.time.ReadablePartial) partial80);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial85 = partial72.withPeriodAdded(readablePeriod83, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = partial72.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray87 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray88 = new int[] {};
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Partial partial90 = new org.joda.time.Partial(dateTimeFieldTypeArray87, intArray88, chronology89);
        org.joda.time.Partial partial91 = new org.joda.time.Partial(dateTimeFieldTypeArray86, intArray88);
        org.joda.time.Partial partial92 = new org.joda.time.Partial(dateTimeFieldTypeArray71, intArray88);
        boolean boolean93 = partial45.isMatch((org.joda.time.ReadablePartial) partial92);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
        org.junit.Assert.assertNull(dateTimeFormatter73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[]" + "'", str75, "[]");
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        java.lang.String str17 = partial14.toString();
        boolean boolean18 = partial8.isAfter((org.joda.time.ReadablePartial) partial14);
        boolean boolean19 = partial0.isEqual((org.joda.time.ReadablePartial) partial14);
        java.util.Locale locale21 = null;
        java.lang.String str22 = partial14.toString("[]", locale21);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray56 = new int[] {};
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray56, chronology57);
        boolean boolean59 = partial53.isAfter((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial53.getChronology();
        boolean boolean61 = partial18.equals((java.lang.Object) chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        org.joda.time.Partial partial63 = partial18.without(dateTimeFieldType62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial66 = partial63.withPeriodAdded(readablePeriod64, 100);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial66);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = partial6.toString(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial39.getFieldTypes();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial41.withChronologyRetainFields(chronology45);
        org.joda.time.Chronology chronology47 = partial46.getChronology();
        org.joda.time.Partial partial48 = partial39.withChronologyRetainFields(chronology47);
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial49);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial48);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        java.lang.String str4 = partial3.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = partial3.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        org.joda.time.Partial partial7 = partial3.without(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property9 = partial7.property(dateTimeFieldType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(partial7);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = partial2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime5 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime6 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        int[] intArray7 = partial0.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = partial0.isSupported(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        org.joda.time.Partial partial18 = partial16.without(dateTimeFieldType17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        java.lang.String str24 = partial20.toString();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial25.isBefore((org.joda.time.ReadablePartial) partial30);
        int[] intArray34 = partial25.getValues();
        boolean boolean35 = partial20.isEqual((org.joda.time.ReadablePartial) partial25);
        java.lang.String str36 = partial20.toStringList();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial38.plus(readablePeriod42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial38.withPeriodAdded(readablePeriod44, (int) (byte) 10);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadablePartial readablePartial56 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = partial0.isEqual(readablePartial56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = partial31.isSupported(dateTimeFieldType32);
        java.util.Locale locale35 = null;
        java.lang.String str36 = partial31.toString("[]", locale35);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial40.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime55 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        boolean boolean59 = partial51.isBefore((org.joda.time.ReadablePartial) partial56);
        java.lang.String str60 = partial51.toStringList();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = partial51.isMatch((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial40.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial19.isBefore((org.joda.time.ReadablePartial) partial69);
        java.lang.String str71 = partial69.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = partial69.getFormatter();
        java.lang.String str73 = partial69.toStringList();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        int int6 = partial4.indexOf(dateTimeFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial9 = partial4.withFieldAdded(durationFieldType7, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        boolean boolean32 = partial1.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = partial34.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial34.toString(dateTimeFormatter36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial34.withPeriodAdded(readablePeriod38, (int) (byte) 100);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        boolean boolean44 = partial34.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial45.isBefore((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial46.withChronologyRetainFields(chronology48);
        boolean boolean51 = partial46.equals((java.lang.Object) 10.0f);
        boolean boolean52 = partial34.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology53 = partial34.getChronology();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial34.minus(readablePeriod54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = partial55.isSupported(dateTimeFieldType56);
        org.joda.time.Chronology chronology58 = partial55.getChronology();
        org.joda.time.Partial partial59 = partial33.withChronologyRetainFields(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial33.plus(readablePeriod60);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial61);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        java.lang.String str16 = partial9.toStringList();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial17.isAfter((org.joda.time.ReadablePartial) partial20);
        boolean boolean26 = partial9.isEqual((org.joda.time.ReadablePartial) partial17);
        int[] intArray27 = partial17.getValues();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial28.toString(dateTimeFormatter30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial28.withChronologyRetainFields(chronology32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial28.isMatch((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = partial36.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = partial36.toString(dateTimeFormatter38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial36.withChronologyRetainFields(chronology40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial36.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial42.toString(dateTimeFormatter44);
        boolean boolean46 = partial28.isBefore((org.joda.time.ReadablePartial) partial42);
        int int47 = partial17.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        org.joda.time.Partial partial49 = partial28.without(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(dateTimeFormatter37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(partial49);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        java.lang.String str76 = partial43.toStringList();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = partial77.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = partial77.toString(dateTimeFormatter79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial83 = partial77.withPeriodAdded(readablePeriod81, (int) (byte) 100);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        boolean boolean86 = partial84.isBefore((org.joda.time.ReadablePartial) partial85);
        boolean boolean87 = partial77.isBefore((org.joda.time.ReadablePartial) partial85);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Partial partial90 = partial77.withPeriodAdded(readablePeriod88, 0);
        boolean boolean91 = partial43.isAfter((org.joda.time.ReadablePartial) partial77);
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        org.joda.time.Partial partial93 = partial77.minus(readablePeriod92);
        int[] intArray94 = partial77.getValues();
        org.joda.time.DateTimeField[] dateTimeFieldArray95 = partial77.getFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray95);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean21 = partial13.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = partial13.indexOf(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = partial13.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial13.indexOf(dateTimeFieldType25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = partial13.isSupported(dateTimeFieldType27);
        boolean boolean29 = partial12.isAfter((org.joda.time.ReadablePartial) partial13);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial0.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology11 = partial0.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = partial0.indexOf(dateTimeFieldType12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial0.withPeriodAdded(readablePeriod14, (-1));
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(partial16);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] {};
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray5, chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial11.withPeriodAdded(readablePeriod15, (int) (byte) 100);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        boolean boolean21 = partial11.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial11.withPeriodAdded(readablePeriod22, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial11.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray27);
        boolean boolean32 = partial8.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        org.joda.time.Partial partial34 = partial8.without(dateTimeFieldType33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial8.plus(readablePeriod35);
        int int37 = partial8.size();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        boolean boolean4 = partial2.isBefore((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = partial3.withChronologyRetainFields(chronology5);
        java.lang.String str7 = partial3.toString();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        int[] intArray17 = partial8.getValues();
        boolean boolean18 = partial3.isEqual((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial21 = partial3.withPeriodAdded(readablePeriod19, (int) (short) 100);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial22.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = partial23.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial23.plus(readablePeriod27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial23.withPeriodAdded(readablePeriod29, (int) (byte) 10);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime36 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial31.withPeriodAdded(readablePeriod38, (int) ' ');
        boolean boolean41 = partial21.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial42.toString(dateTimeFormatter44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial42.withPeriodAdded(readablePeriod46, (int) (byte) 100);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        boolean boolean52 = partial42.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        boolean boolean61 = partial53.isBefore((org.joda.time.ReadablePartial) partial58);
        java.lang.String str62 = partial53.toStringList();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.DateTime dateTime67 = partial63.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean68 = partial53.isMatch((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime69 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = partial42.withChronologyRetainFields(chronology70);
        boolean boolean72 = partial21.isBefore((org.joda.time.ReadablePartial) partial71);
        java.lang.String str73 = partial71.toStringList();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.DateTime dateTime78 = partial74.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        boolean boolean81 = partial79.isBefore((org.joda.time.ReadablePartial) partial80);
        boolean boolean82 = partial74.isBefore((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology83 = partial74.getChronology();
        org.joda.time.Partial partial84 = partial71.withChronologyRetainFields(chronology83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial85 = new org.joda.time.Partial(dateTimeFieldType0, (int) '4', chronology83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(partial84);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = partial1.indexOf(dateTimeFieldType12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField15 = partial1.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = partial1.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = partial25.getChronology();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray31 = new int[] {};
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray31, chronology32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        int[] intArray39 = partial34.getValues();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray39, chronology40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray43);
        org.joda.time.Partial partial47 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial46);
        boolean boolean48 = partial28.isAfter((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial50.withChronologyRetainFields(chronology52);
        java.lang.String str54 = partial50.toString();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        org.joda.time.DateTime dateTime59 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        boolean boolean62 = partial60.isBefore((org.joda.time.ReadablePartial) partial61);
        boolean boolean63 = partial55.isBefore((org.joda.time.ReadablePartial) partial60);
        int[] intArray64 = partial55.getValues();
        boolean boolean65 = partial50.isEqual((org.joda.time.ReadablePartial) partial55);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial50.withPeriodAdded(readablePeriod66, (int) (short) 100);
        boolean boolean69 = partial46.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.DateTime dateTime74 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime75 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime76 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType79 = partial1.getFieldType((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = partial11.indexOf(dateTimeFieldType12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = partial11.toString(dateTimeFormatter15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial17.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial17.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial17.withPeriodAdded(readablePeriod21, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial17.minus(readablePeriod24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = partial26.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = partial26.toString(dateTimeFormatter28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial26.withPeriodAdded(readablePeriod30, (int) (byte) 100);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial33.isBefore((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial26.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        boolean boolean43 = partial38.equals((java.lang.Object) 10.0f);
        boolean boolean44 = partial26.isMatch((org.joda.time.ReadablePartial) partial38);
        boolean boolean45 = partial17.isEqual((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        java.util.Locale locale54 = null;
        java.lang.String str55 = partial46.toString("[]", locale54);
        boolean boolean56 = partial26.isEqual((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial57.isBefore((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = partial58.withChronologyRetainFields(chronology60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial58.plus(readablePeriod62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial66 = partial58.withPeriodAdded(readablePeriod64, (int) (byte) 10);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        org.joda.time.DateTime dateTime71 = partial67.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = partial66.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean73 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean74 = partial11.equals((java.lang.Object) dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNull(dateTimeFormatter27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property16 = partial14.property(dateTimeFieldType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray41 = new int[] {};
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray41, chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial43.toString(dateTimeFormatter44);
        boolean boolean46 = partial18.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology47 = partial18.getChronology();
        org.joda.time.DateTimeField[] dateTimeFieldArray48 = partial18.getFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFieldArray48);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray11, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial8.getFieldTypes();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial25.plus(readablePeriod29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial25.withPeriodAdded(readablePeriod31, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = partial25.toString(dateTimeFormatter34);
        int[] intArray36 = partial25.getValues();
        org.joda.time.Partial partial37 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray36);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = partial37.getValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        int[] intArray14 = partial0.getValues();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = partial0.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray17 = new int[] {};
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray17, chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial22 = partial19.withPeriodAdded(readablePeriod20, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray24 = new int[] {};
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray24, chronology25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        int[] intArray32 = partial27.getValues();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray32, chronology33);
        boolean boolean35 = partial22.isMatch((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = partial34.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray40 = new int[] {};
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray40, chronology41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        int[] intArray48 = partial43.getValues();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray48, chronology49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray52 = new int[] {};
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(dateTimeFieldTypeArray51, intArray52, chronology53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray52);
        org.joda.time.Partial partial56 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial55);
        boolean boolean57 = partial37.isAfter((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = partial59.withChronologyRetainFields(chronology61);
        java.lang.String str63 = partial59.toString();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime68 = partial64.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        boolean boolean72 = partial64.isBefore((org.joda.time.ReadablePartial) partial69);
        int[] intArray73 = partial64.getValues();
        boolean boolean74 = partial59.isEqual((org.joda.time.ReadablePartial) partial64);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial59.withPeriodAdded(readablePeriod75, (int) (short) 100);
        boolean boolean78 = partial55.isMatch((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = partial80.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime83 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime84 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime86 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Partial partial88 = partial0.minus(readablePeriod87);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(partial88);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        java.lang.String str6 = partial0.toString("[]");
        int int7 = partial0.size();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial14 = partial8.withPeriodAdded(readablePeriod12, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial8.minus(readablePeriod15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial17.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial17.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial17.withPeriodAdded(readablePeriod21, (int) (byte) 100);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        boolean boolean27 = partial17.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial29.withChronologyRetainFields(chronology31);
        boolean boolean34 = partial29.equals((java.lang.Object) 10.0f);
        boolean boolean35 = partial17.isMatch((org.joda.time.ReadablePartial) partial29);
        boolean boolean36 = partial8.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        java.util.Locale locale45 = null;
        java.lang.String str46 = partial37.toString("[]", locale45);
        boolean boolean47 = partial17.isEqual((org.joda.time.ReadablePartial) partial37);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial17.minus(readablePeriod48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial17.plus(readablePeriod50);
        boolean boolean52 = partial0.isEqual((org.joda.time.ReadablePartial) partial51);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial17.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial17.toString(dateTimeFormatter26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial17.without(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial29);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial0.getFormatter();
        org.joda.time.DurationFieldType durationFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial6 = partial0.withFieldAdded(durationFieldType4, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(dateTimeFormatter3);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        int[] intArray17 = partial6.getValues();
        org.joda.time.Partial partial18 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial6);
        java.lang.String str19 = partial18.toStringList();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        boolean boolean30 = partial24.isAfter((org.joda.time.ReadablePartial) partial29);
        int int31 = partial21.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        org.joda.time.Partial partial33 = partial24.without(dateTimeFieldType32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial37.plus(readablePeriod41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial45 = partial37.withPeriodAdded(readablePeriod43, (int) (byte) 10);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = partial45.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial54 = partial45.withPeriodAdded(readablePeriod52, (int) ' ');
        org.joda.time.Chronology chronology55 = partial54.getChronology();
        org.joda.time.Partial partial56 = partial33.withChronologyRetainFields(chronology55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField58 = partial33.getField((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(partial56);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = partial21.getFormatter();
        java.util.Locale locale26 = null;
        java.lang.String str27 = partial21.toString("[]", locale26);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 0, chronology2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial19.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial19.toString(dateTimeFormatter21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial19.withChronologyRetainFields(chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial19.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial27.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial27.withChronologyRetainFields(chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial27.isMatch((org.joda.time.ReadablePartial) partial33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        boolean boolean37 = partial19.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial56 = partial47.withPeriodAdded(readablePeriod54, (int) ' ');
        org.joda.time.Chronology chronology57 = partial56.getChronology();
        org.joda.time.Partial partial58 = partial19.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial59 = partial10.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial60 = partial6.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = partial63.withChronologyRetainFields(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial63.plus(readablePeriod67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial71 = partial63.withPeriodAdded(readablePeriod69, (int) (byte) 10);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = partial73.toDateTime(readableInstant74);
        org.joda.time.DateTime dateTime76 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = partial71.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        java.lang.String str78 = partial71.toStringList();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = partial83.toDateTime(readableInstant84);
        org.joda.time.DateTime dateTime86 = partial82.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean87 = partial79.isAfter((org.joda.time.ReadablePartial) partial82);
        boolean boolean88 = partial71.isEqual((org.joda.time.ReadablePartial) partial79);
        int[] intArray89 = partial79.getValues();
        boolean boolean90 = partial61.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        org.joda.time.Partial partial92 = partial79.minus(readablePeriod91);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = null;
        java.lang.String str94 = partial79.toString(dateTimeFormatter93);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[]" + "'", str94, "[]");
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        int[] intArray10 = partial9.getValues();
        java.lang.String str11 = partial9.toString();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        java.lang.String str35 = partial32.toString();
        boolean boolean36 = partial26.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial37.withPeriodAdded(readablePeriod41, (int) (byte) 100);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial37.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        boolean boolean54 = partial49.equals((java.lang.Object) 10.0f);
        boolean boolean55 = partial37.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology56 = partial37.getChronology();
        boolean boolean57 = partial26.isEqual((org.joda.time.ReadablePartial) partial37);
        int int58 = partial24.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray60 = new int[] {};
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray60, chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = partial62.toString(dateTimeFormatter63);
        boolean boolean65 = partial24.isAfter((org.joda.time.ReadablePartial) partial62);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        int int67 = partial62.indexOf(dateTimeFieldType66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial70 = partial62.with(dateTimeFieldType68, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        int int51 = partial47.indexOf(dateTimeFieldType50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial47.minus(readablePeriod52);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(partial53);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial31.withChronologyRetainFields(chronology35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial31.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        boolean boolean59 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology60 = partial41.getChronology();
        org.joda.time.Partial partial61 = partial37.withChronologyRetainFields(chronology60);
        boolean boolean62 = partial6.equals((java.lang.Object) partial61);
        org.joda.time.Chronology chronology63 = partial61.getChronology();
        org.joda.time.DurationFieldType durationFieldType64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial66 = partial61.withFieldAddWrapped(durationFieldType64, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        boolean boolean30 = partial24.isAfter((org.joda.time.ReadablePartial) partial29);
        int int31 = partial21.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        org.joda.time.Partial partial33 = partial24.without(dateTimeFieldType32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial37.plus(readablePeriod41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial45 = partial37.withPeriodAdded(readablePeriod43, (int) (byte) 10);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = partial45.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial54 = partial45.withPeriodAdded(readablePeriod52, (int) ' ');
        org.joda.time.Chronology chronology55 = partial54.getChronology();
        org.joda.time.Partial partial56 = partial33.withChronologyRetainFields(chronology55);
        int[] intArray57 = partial56.getValues();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime54 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial55.isBefore((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial50.isBefore((org.joda.time.ReadablePartial) partial55);
        int[] intArray59 = partial55.getValues();
        org.joda.time.Chronology chronology60 = partial55.getChronology();
        boolean boolean61 = partial0.equals((java.lang.Object) partial55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = partial0.getFormatter();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(dateTimeFormatter62);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Chronology chronology10 = partial5.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        java.lang.String str12 = partial11.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray41 = new int[] {};
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray41, chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial43.toString(dateTimeFormatter44);
        boolean boolean46 = partial18.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial49 = partial43.withFieldAddWrapped(durationFieldType47, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        java.lang.String str29 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial34.withPeriodAdded(readablePeriod35, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray39 = new int[] {};
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(dateTimeFieldTypeArray38, intArray39, chronology40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        int[] intArray47 = partial42.getValues();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(dateTimeFieldTypeArray38, intArray47, chronology48);
        boolean boolean50 = partial37.isMatch((org.joda.time.ReadablePartial) partial49);
        int[] intArray51 = partial37.getValues();
        org.joda.time.Partial partial52 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray51);
        java.lang.Class<?> wildcardClass53 = partial52.getClass();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        org.joda.time.Partial partial7 = partial5.without(dateTimeFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.plus(readablePeriod8);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(partial9);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = partial6.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial6.withChronologyRetainFields(chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial6.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial17.plus(readablePeriod21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        java.lang.String str26 = partial23.toString();
        boolean boolean27 = partial17.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial23.toDateTime(readableInstant29);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        boolean boolean38 = partial33.equals((java.lang.Object) 10.0f);
        int int39 = partial33.size();
        boolean boolean40 = partial23.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean48 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime53 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        boolean boolean57 = partial49.isBefore((org.joda.time.ReadablePartial) partial54);
        int[] intArray58 = partial54.getValues();
        org.joda.time.Chronology chronology59 = partial54.getChronology();
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Partial partial61 = partial5.withChronologyRetainFields(chronology59);
        org.joda.time.Chronology chronology62 = partial61.getChronology();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = partial63.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = null;
        java.lang.String str66 = partial63.toString(dateTimeFormatter65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial69 = partial63.withPeriodAdded(readablePeriod67, (int) (byte) 100);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial70.isBefore((org.joda.time.ReadablePartial) partial71);
        boolean boolean73 = partial63.isBefore((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = partial75.withChronologyRetainFields(chronology77);
        java.lang.String str79 = partial75.toString();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial82 = partial75.withPeriodAdded(readablePeriod80, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray83 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray84 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray85 = new int[] {};
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = new org.joda.time.Partial(dateTimeFieldTypeArray84, intArray85, chronology86);
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Partial partial89 = new org.joda.time.Partial(dateTimeFieldTypeArray83, intArray85, chronology88);
        org.joda.time.Partial partial90 = new org.joda.time.Partial();
        org.joda.time.Partial partial91 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant92 = null;
        org.joda.time.DateTime dateTime93 = partial91.toDateTime(readableInstant92);
        org.joda.time.DateTime dateTime94 = partial90.toDateTime((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.DateTime dateTime95 = partial89.toDateTime((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.DateTime dateTime96 = partial82.toDateTime((org.joda.time.ReadableInstant) dateTime95);
        org.joda.time.DateTime dateTime97 = partial63.toDateTime((org.joda.time.ReadableInstant) dateTime95);
        boolean boolean98 = partial61.isMatch((org.joda.time.ReadableInstant) dateTime97);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNull(dateTimeFormatter64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[]" + "'", str79, "[]");
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray83);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial28.plus(readablePeriod32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial28.withPeriodAdded(readablePeriod34, (int) (byte) 10);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial45 = partial36.withPeriodAdded(readablePeriod43, (int) ' ');
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial45.equals((java.lang.Object) boolean48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial51.plus(readablePeriod55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        java.lang.String str60 = partial57.toString();
        boolean boolean61 = partial51.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial57.toDateTime(readableInstant63);
        boolean boolean66 = partial45.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.DateTime dateTime74 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean75 = partial67.isAfter((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Partial partial76 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial67);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial76.minus(readablePeriod77);
        boolean boolean79 = partial45.isEqual((org.joda.time.ReadablePartial) partial76);
        int int80 = partial76.size();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology82 = partial81.getChronology();
        org.joda.time.Partial partial83 = partial76.withChronologyRetainFields(chronology82);
        org.joda.time.Partial partial84 = partial18.withChronologyRetainFields(chronology82);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = null;
        org.joda.time.Partial partial86 = partial18.without(dateTimeFieldType85);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType88 = partial18.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(partial86);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial0.minus(readablePeriod10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray14 = new int[] {};
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray14, chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial16.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Chronology chronology20 = partial19.getChronology();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial19.minus(readablePeriod21);
        int[] intArray23 = partial22.getValues();
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray23);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        int[] intArray53 = partial48.getValues();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray53, chronology54);
        boolean boolean56 = partial43.isMatch((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = partial55.indexOf(dateTimeFieldType57);
        boolean boolean59 = partial34.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = partial34.getFields();
        org.joda.time.DurationFieldType durationFieldType61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial63 = partial34.withFieldAddWrapped(durationFieldType61, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        int int14 = partial1.compareTo((org.joda.time.ReadablePartial) partial13);
        java.lang.String str15 = partial1.toStringList();
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = partial1.toString(dateTimeFormatter17);
        java.util.Locale locale20 = null;
        java.lang.String str21 = partial1.toString("[]", locale20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        int int23 = partial1.indexOf(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial9.getFieldTypes();
        int[] intArray16 = partial9.getValues();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = partial1.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = partial1.toString(dateTimeFormatter3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial7 = partial1.withPeriodAdded(readablePeriod5, (int) (byte) 100);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        boolean boolean11 = partial1.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial14 = partial1.withPeriodAdded(readablePeriod12, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray17 = new int[] {};
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray15, intArray17);
        org.joda.time.Partial partial21 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray17);
        java.lang.String str22 = partial21.toStringList();
        org.joda.time.Partial partial23 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial21);
        java.util.Locale locale25 = null;
        java.lang.String str26 = partial23.toString("[]", locale25);
        java.util.Locale locale28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = partial23.toString("hi!", locale28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNull(dateTimeFormatter2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray23 = new int[] {};
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray23, chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray31 = partial26.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray31, chronology32);
        boolean boolean34 = partial21.equals((java.lang.Object) partial33);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = partial33.getFields();
        int[] intArray36 = partial33.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial47.withPeriodAdded(readablePeriod48, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray52 = new int[] {};
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(dateTimeFieldTypeArray51, intArray52, chronology53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        org.joda.time.DateTime dateTime59 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        int[] intArray60 = partial55.getValues();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray51, intArray60, chronology61);
        boolean boolean63 = partial50.isMatch((org.joda.time.ReadablePartial) partial62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial50.plus(readablePeriod64);
        org.joda.time.Chronology chronology66 = partial65.getChronology();
        org.joda.time.Partial partial67 = partial43.withChronologyRetainFields(chronology66);
        org.joda.time.Partial partial68 = partial33.withChronologyRetainFields(chronology66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = partial69.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray72 = new int[] {};
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(dateTimeFieldTypeArray71, intArray72, chronology73);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        org.joda.time.DateTime dateTime79 = partial75.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        int[] intArray80 = partial75.getValues();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = new org.joda.time.Partial(dateTimeFieldTypeArray71, intArray80, chronology81);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray83 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray84 = new int[] {};
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.Partial partial86 = new org.joda.time.Partial(dateTimeFieldTypeArray83, intArray84, chronology85);
        org.joda.time.Partial partial87 = new org.joda.time.Partial(dateTimeFieldTypeArray71, intArray84);
        org.joda.time.Partial partial88 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial87);
        boolean boolean89 = partial69.isAfter((org.joda.time.ReadablePartial) partial87);
        org.joda.time.DateTimeField[] dateTimeFieldArray90 = partial69.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = null;
        boolean boolean92 = partial69.isSupported(dateTimeFieldType91);
        boolean boolean93 = partial68.isBefore((org.joda.time.ReadablePartial) partial69);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial34.plus(readablePeriod37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial34.toString(dateTimeFormatter39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial34.isSupported(dateTimeFieldType41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial34.plus(readablePeriod43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial45.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = partial45.indexOf(dateTimeFieldType54);
        org.joda.time.Chronology chronology56 = partial45.getChronology();
        org.joda.time.Partial partial57 = partial44.withChronologyRetainFields(chronology56);
        int[] intArray58 = partial57.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray60 = new int[] {};
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray60, chronology61);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray64 = new int[] {};
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(dateTimeFieldTypeArray63, intArray64, chronology65);
        org.joda.time.Partial partial67 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray64);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray69 = new int[] {};
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray68, intArray69, chronology70);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray72 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray73 = new int[] {};
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = new org.joda.time.Partial(dateTimeFieldTypeArray72, intArray73, chronology74);
        org.joda.time.Partial partial76 = new org.joda.time.Partial(dateTimeFieldTypeArray68, intArray73);
        boolean boolean77 = partial67.equals((java.lang.Object) intArray73);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial67.plus(readablePeriod78);
        boolean boolean80 = partial57.isEqual((org.joda.time.ReadablePartial) partial67);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray72);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial8.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial16.withPeriodAdded(readablePeriod23, (int) ' ');
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial25.equals((java.lang.Object) boolean28);
        boolean boolean30 = partial1.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial31 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial31.withPeriodAdded(readablePeriod32, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        org.joda.time.Partial partial36 = partial34.without(dateTimeFieldType35);
        java.util.Locale locale38 = null;
        java.lang.String str39 = partial34.toString("[]", locale38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = partial34.indexOf(dateTimeFieldType40);
        int int42 = partial34.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.minus(readablePeriod8);
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = partial9.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial14.withChronologyRetainFields(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial14.plus(readablePeriod18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial22 = partial14.withPeriodAdded(readablePeriod20, (int) (byte) 10);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime27 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial22.withPeriodAdded(readablePeriod29, (int) ' ');
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial31.equals((java.lang.Object) boolean34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial37.plus(readablePeriod41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        java.lang.String str46 = partial43.toString();
        boolean boolean47 = partial37.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial43.toDateTime(readableInstant49);
        boolean boolean52 = partial31.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime60 = partial56.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial53.isAfter((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Partial partial62 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial53);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial62.minus(readablePeriod63);
        boolean boolean65 = partial31.isEqual((org.joda.time.ReadablePartial) partial62);
        int int66 = partial62.size();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = partial68.toDateTime(readableInstant69);
        org.joda.time.DateTime dateTime71 = partial67.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        boolean boolean74 = partial72.isBefore((org.joda.time.ReadablePartial) partial73);
        boolean boolean75 = partial67.isBefore((org.joda.time.ReadablePartial) partial72);
        int[] intArray76 = partial67.getValues();
        java.lang.String str78 = partial67.toString("[]");
        int int79 = partial62.compareTo((org.joda.time.ReadablePartial) partial67);
        boolean boolean80 = partial9.isEqual((org.joda.time.ReadablePartial) partial67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial20.minus(readablePeriod40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int[] intArray51 = partial46.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray51, chronology52);
        boolean boolean54 = partial41.equals((java.lang.Object) partial53);
        int int55 = partial19.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray57 = new int[] {};
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldTypeArray56, intArray57, chronology58);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray61 = new int[] {};
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = new org.joda.time.Partial(dateTimeFieldTypeArray60, intArray61, chronology62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial(dateTimeFieldTypeArray56, intArray61);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial64.plus(readablePeriod65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial64.minus(readablePeriod67);
        boolean boolean69 = partial41.isEqual((org.joda.time.ReadablePartial) partial64);
        org.joda.time.DurationFieldType durationFieldType70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial72 = partial41.withFieldAddWrapped(durationFieldType70, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial0.indexOf(dateTimeFieldType9);
        org.joda.time.Chronology chronology11 = partial0.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = partial0.indexOf(dateTimeFieldType12);
        java.lang.Class<?> wildcardClass14 = partial0.getClass();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology29);
        org.joda.time.Chronology chronology32 = partial31.getChronology();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(chronology32);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DurationFieldType durationFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial11 = partial0.withFieldAdded(durationFieldType9, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray56 = new int[] {};
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray56, chronology57);
        boolean boolean59 = partial53.isAfter((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial53.getChronology();
        boolean boolean61 = partial18.equals((java.lang.Object) chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        org.joda.time.Partial partial63 = partial18.without(dateTimeFieldType62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = partial64.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray2 = new int[] {};
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray2, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray2, chronology5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        org.joda.time.DateTime dateTime11 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        int[] intArray13 = partial6.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial6.toString(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray2 = new int[] {};
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray2, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray2, chronology5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        org.joda.time.DateTime dateTime11 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        int[] intArray13 = partial6.getValues();
        java.lang.String str14 = partial6.toStringList();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        boolean boolean30 = partial24.isAfter((org.joda.time.ReadablePartial) partial29);
        int int31 = partial21.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = partial32.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = partial32.toString(dateTimeFormatter34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial32.withChronologyRetainFields(chronology36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = partial38.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = partial38.toString(dateTimeFormatter40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial38.withChronologyRetainFields(chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial38.isMatch((org.joda.time.ReadablePartial) partial44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial49.plus(readablePeriod53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        java.lang.String str58 = partial55.toString();
        boolean boolean59 = partial49.isAfter((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = partial60.toDateTime(readableInstant61);
        org.joda.time.DateTime dateTime63 = partial55.toDateTime(readableInstant61);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial65.withChronologyRetainFields(chronology67);
        boolean boolean70 = partial65.equals((java.lang.Object) 10.0f);
        int int71 = partial65.size();
        boolean boolean72 = partial55.isEqual((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = partial74.toDateTime(readableInstant75);
        org.joda.time.DateTime dateTime77 = partial73.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime78 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime79 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean80 = partial37.isMatch((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean81 = partial21.isMatch((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial83 = partial21.minus(readablePeriod82);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNull(dateTimeFormatter39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(partial83);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        int[] intArray53 = partial48.getValues();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray53, chronology54);
        boolean boolean56 = partial43.isMatch((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = partial55.indexOf(dateTimeFieldType57);
        boolean boolean59 = partial34.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial55.plus(readablePeriod60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int63 = partial61.get(dateTimeFieldType62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial61);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray56 = new int[] {};
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray56, chronology57);
        boolean boolean59 = partial53.isAfter((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial53.getChronology();
        boolean boolean61 = partial18.equals((java.lang.Object) chronology60);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        int[] intArray67 = partial62.getValues();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        boolean boolean70 = partial68.isBefore((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = partial69.withChronologyRetainFields(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial69.plus(readablePeriod73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial69.withPeriodAdded(readablePeriod75, (int) (byte) 10);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime83 = partial77.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        java.lang.String str84 = partial77.toStringList();
        boolean boolean85 = partial62.isAfter((org.joda.time.ReadablePartial) partial77);
        boolean boolean86 = partial18.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial87 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = partial87.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = null;
        java.lang.String str90 = partial87.toString(dateTimeFormatter89);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        org.joda.time.Partial partial93 = partial87.withPeriodAdded(readablePeriod91, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = null;
        java.lang.String str95 = partial93.toString(dateTimeFormatter94);
        int[] intArray96 = partial93.getValues();
        boolean boolean97 = partial18.equals((java.lang.Object) partial93);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[]" + "'", str84, "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(dateTimeFormatter88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "[]" + "'", str90, "[]");
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[]" + "'", str95, "[]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial4.toString(dateTimeFormatter7);
        int int9 = partial4.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial0.minus(readablePeriod7);
        int[] intArray9 = partial8.getValues();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial12 = partial8.withPeriodAdded(readablePeriod10, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = partial12.indexOf(dateTimeFieldType13);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.minus(readablePeriod25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        org.joda.time.Partial partial28 = partial24.without(dateTimeFieldType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = partial24.isSupported(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = partial11.isSupported(dateTimeFieldType13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime19 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        boolean boolean23 = partial15.isBefore((org.joda.time.ReadablePartial) partial20);
        java.lang.String str24 = partial15.toStringList();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        boolean boolean30 = partial15.isMatch((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        boolean boolean39 = partial31.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial41.plus(readablePeriod45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial41.withPeriodAdded(readablePeriod47, (int) (byte) 10);
        int int50 = partial36.compareTo((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial15.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial49.plus(readablePeriod52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial49.toString(dateTimeFormatter54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = partial49.isSupported(dateTimeFieldType56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial49.plus(readablePeriod58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = partial60.toDateTime(readableInstant61);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.DateTime dateTime67 = partial63.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean68 = partial60.isAfter((org.joda.time.ReadablePartial) partial63);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = partial60.indexOf(dateTimeFieldType69);
        org.joda.time.Chronology chronology71 = partial60.getChronology();
        org.joda.time.Partial partial72 = partial59.withChronologyRetainFields(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial59.minus(readablePeriod73);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        org.joda.time.DateTime dateTime79 = partial75.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        boolean boolean82 = partial80.isBefore((org.joda.time.ReadablePartial) partial81);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = partial81.withChronologyRetainFields(chronology83);
        boolean boolean85 = partial75.isMatch((org.joda.time.ReadablePartial) partial84);
        boolean boolean87 = partial84.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Partial partial89 = partial84.plus(readablePeriod88);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray90 = partial84.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray91 = partial84.getFields();
        boolean boolean92 = partial74.isEqual((org.joda.time.ReadablePartial) partial84);
        boolean boolean93 = partial11.isAfter((org.joda.time.ReadablePartial) partial84);
        org.joda.time.Partial partial94 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial84);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray90);
        org.junit.Assert.assertNotNull(dateTimeFieldArray91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int[] intArray5 = partial0.getValues();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        boolean boolean8 = partial6.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = partial7.withChronologyRetainFields(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial7.plus(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial7.withPeriodAdded(readablePeriod13, (int) (byte) 10);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        java.lang.String str22 = partial15.toStringList();
        boolean boolean23 = partial0.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial0.plus(readablePeriod24);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial24.without(dateTimeFieldType25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial24.withPeriodAdded(readablePeriod27, (int) (short) 100);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray33 = new int[] {};
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray33, chronology34);
        boolean boolean36 = partial30.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeField[] dateTimeFieldArray37 = partial35.getFields();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        boolean boolean46 = partial38.isBefore((org.joda.time.ReadablePartial) partial43);
        java.lang.String str47 = partial38.toStringList();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial35.withPeriodAdded(readablePeriod55, (int) 'a');
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial58.withPeriodAdded(readablePeriod62, (int) (byte) 100);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial58.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        boolean boolean75 = partial70.equals((java.lang.Object) 10.0f);
        boolean boolean76 = partial58.isMatch((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology77 = partial58.getChronology();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial58.minus(readablePeriod78);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray81 = new int[] {};
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray80, intArray81, chronology82);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = partial85.toDateTime(readableInstant86);
        org.joda.time.DateTime dateTime88 = partial84.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        int[] intArray89 = partial84.getValues();
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.Partial partial91 = new org.joda.time.Partial(dateTimeFieldTypeArray80, intArray89, chronology90);
        boolean boolean92 = partial79.equals((java.lang.Object) partial91);
        boolean boolean93 = partial35.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.ReadablePeriod readablePeriod94 = null;
        org.joda.time.Partial partial95 = partial79.minus(readablePeriod94);
        int int96 = partial29.compareTo((org.joda.time.ReadablePartial) partial79);
        java.lang.String str97 = partial29.toStringList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = partial29.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(partial95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "[]" + "'", str97, "[]");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial14.withChronologyRetainFields(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial14.plus(readablePeriod18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        java.lang.String str23 = partial20.toString();
        boolean boolean24 = partial14.isAfter((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial20.toDateTime(readableInstant26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial29.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial30.withChronologyRetainFields(chronology32);
        boolean boolean35 = partial30.equals((java.lang.Object) 10.0f);
        int int36 = partial30.size();
        boolean boolean37 = partial20.isEqual((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean44 = partial12.isMatch((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        int int46 = partial12.indexOf(dateTimeFieldType45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = partial12.toString(dateTimeFormatter47);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial1.toString(dateTimeFormatter10);
        java.lang.String str12 = partial1.toString();
        org.joda.time.DurationFieldType durationFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial15 = partial1.withFieldAddWrapped(durationFieldType13, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = partial8.indexOf(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = partial21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial21.toString(dateTimeFormatter25);
        boolean boolean28 = partial21.equals((java.lang.Object) 100);
        java.lang.Class<?> wildcardClass29 = partial21.getClass();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial25.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        int int35 = partial7.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial7.getFieldTypes();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial37.withChronologyRetainFields(chronology41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial37.isMatch((org.joda.time.ReadablePartial) partial43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = partial43.toString(dateTimeFormatter45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        java.lang.String str57 = partial54.toString();
        boolean boolean58 = partial48.isAfter((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime62 = partial54.toDateTime(readableInstant60);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial64.withChronologyRetainFields(chronology66);
        boolean boolean69 = partial64.equals((java.lang.Object) 10.0f);
        int int70 = partial64.size();
        boolean boolean71 = partial54.isEqual((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = partial73.toDateTime(readableInstant74);
        org.joda.time.DateTime dateTime76 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = partial64.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime78 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = partial79.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        org.joda.time.Partial partial82 = partial79.without(dateTimeFieldType81);
        boolean boolean83 = partial43.isEqual((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.Partial partial86 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.DateTime dateTime88 = partial86.toDateTime(readableInstant87);
        org.joda.time.DateTime dateTime89 = partial85.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime90 = partial84.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        int[] intArray91 = partial84.getValues();
        org.joda.time.Chronology chronology92 = partial84.getChronology();
        org.joda.time.Partial partial93 = partial79.withChronologyRetainFields(chronology92);
        java.lang.String str94 = partial79.toStringList();
        org.joda.time.ReadablePeriod readablePeriod95 = null;
        org.joda.time.Partial partial96 = partial79.plus(readablePeriod95);
        boolean boolean97 = partial7.equals((java.lang.Object) partial96);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[]");
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[]" + "'", str94, "[]");
        org.junit.Assert.assertNotNull(partial96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        int int22 = partial18.size();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial24.withPeriodAdded(readablePeriod30, (int) (byte) 10);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial32.withPeriodAdded(readablePeriod39, (int) ' ');
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        boolean boolean45 = partial41.equals((java.lang.Object) boolean44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial47.plus(readablePeriod51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        java.lang.String str56 = partial53.toString();
        boolean boolean57 = partial47.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime61 = partial53.toDateTime(readableInstant59);
        boolean boolean62 = partial41.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime70 = partial66.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean71 = partial63.isAfter((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial72 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial63);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial72.minus(readablePeriod73);
        boolean boolean75 = partial41.isEqual((org.joda.time.ReadablePartial) partial72);
        boolean boolean76 = partial18.equals((java.lang.Object) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        boolean boolean78 = partial41.isSupported(dateTimeFieldType77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = partial41.toString(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial0.minus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial9.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        boolean boolean26 = partial21.equals((java.lang.Object) 10.0f);
        boolean boolean27 = partial9.isMatch((org.joda.time.ReadablePartial) partial21);
        boolean boolean28 = partial0.isEqual((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        java.util.Locale locale37 = null;
        java.lang.String str38 = partial29.toString("[]", locale37);
        boolean boolean39 = partial9.isEqual((org.joda.time.ReadablePartial) partial29);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial9.minus(readablePeriod40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial42.isBefore((org.joda.time.ReadablePartial) partial47);
        int[] intArray51 = partial47.getValues();
        org.joda.time.Partial partial52 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = partial54.withChronologyRetainFields(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial54.plus(readablePeriod58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = partial60.toDateTime(readableInstant61);
        java.lang.String str63 = partial60.toString();
        boolean boolean64 = partial54.isAfter((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime68 = partial60.toDateTime(readableInstant66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        boolean boolean75 = partial70.equals((java.lang.Object) 10.0f);
        int int76 = partial70.size();
        boolean boolean77 = partial60.isEqual((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime83 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        java.util.Locale locale85 = null;
        java.lang.String str86 = partial70.toString("[]", locale85);
        boolean boolean87 = partial52.isBefore((org.joda.time.ReadablePartial) partial70);
        boolean boolean88 = partial41.isBefore((org.joda.time.ReadablePartial) partial70);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[]" + "'", str86, "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        java.lang.String str7 = partial1.toStringList();
        org.joda.time.DurationFieldType durationFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial10 = partial1.withFieldAdded(durationFieldType8, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial9.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial22 = partial9.withPeriodAdded(readablePeriod20, 0);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = partial23.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial23.withPeriodAdded(readablePeriod27, (int) (byte) 100);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial23.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial23.withPeriodAdded(readablePeriod34, 0);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        java.lang.String str42 = partial38.toString();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial43.isBefore((org.joda.time.ReadablePartial) partial48);
        int[] intArray52 = partial43.getValues();
        boolean boolean53 = partial38.isEqual((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial56 = partial38.withPeriodAdded(readablePeriod54, (int) (short) 100);
        boolean boolean57 = partial23.isEqual((org.joda.time.ReadablePartial) partial56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial23.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime60 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        int int63 = partial8.indexOf(dateTimeFieldType62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial8.minus(readablePeriod64);
        java.lang.Class<?> wildcardClass66 = partial8.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial40.withChronologyRetainFields(chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial40.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = partial48.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = partial48.toString(dateTimeFormatter50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial48.withChronologyRetainFields(chronology52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial48.isMatch((org.joda.time.ReadablePartial) partial54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        boolean boolean58 = partial40.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial60.withChronologyRetainFields(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial60.plus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial60.withPeriodAdded(readablePeriod66, (int) (byte) 10);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime73 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime74 = partial68.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial68.withPeriodAdded(readablePeriod75, (int) ' ');
        org.joda.time.Chronology chronology78 = partial77.getChronology();
        org.joda.time.Partial partial79 = partial40.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = partial79.getFieldTypes();
        boolean boolean81 = partial0.isEqual((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology82 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial84 = partial0.plus(readablePeriod83);
        int[] intArray85 = partial84.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial88 = partial84.withField(dateTimeFieldType86, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(dateTimeFormatter49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial39.getFieldTypes();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial41.withChronologyRetainFields(chronology45);
        org.joda.time.Chronology chronology47 = partial46.getChronology();
        org.joda.time.Partial partial48 = partial39.withChronologyRetainFields(chronology47);
        org.joda.time.DurationFieldType durationFieldType49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial51 = partial48.withFieldAdded(durationFieldType49, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial48);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial0.minus(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial12.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial18 = partial12.withField(dateTimeFieldType16, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial15);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        java.lang.String str26 = partial22.toString();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial27.isBefore((org.joda.time.ReadablePartial) partial32);
        int[] intArray36 = partial27.getValues();
        boolean boolean37 = partial22.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial22.withPeriodAdded(readablePeriod38, (int) (short) 100);
        boolean boolean41 = partial18.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial18.plus(readablePeriod42);
        org.joda.time.DurationFieldType durationFieldType44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial46 = partial18.withFieldAdded(durationFieldType44, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(partial43);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = partial4.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray7 = new int[] {};
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(dateTimeFieldTypeArray6, intArray7, chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial9.toString(dateTimeFormatter10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial9.minus(readablePeriod12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial15.withChronologyRetainFields(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial15.plus(readablePeriod19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial15.withPeriodAdded(readablePeriod21, (int) (byte) 10);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial23.withPeriodAdded(readablePeriod30, (int) ' ');
        org.joda.time.Chronology chronology33 = partial32.getChronology();
        org.joda.time.Partial partial34 = partial13.withChronologyRetainFields(chronology33);
        org.joda.time.Partial partial35 = partial4.withChronologyRetainFields(chronology33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial4.withPeriodAdded(readablePeriod36, (int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int40 = partial38.get(dateTimeFieldType39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial38);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        java.lang.String str12 = partial8.toString();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial8.withPeriodAdded(readablePeriod13, (int) (short) 10);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial17.plus(readablePeriod21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        java.lang.String str26 = partial23.toString();
        boolean boolean27 = partial17.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial29.withChronologyRetainFields(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial29.plus(readablePeriod33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        java.lang.String str38 = partial35.toString();
        boolean boolean39 = partial29.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial40.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial52.withChronologyRetainFields(chronology54);
        boolean boolean57 = partial52.equals((java.lang.Object) 10.0f);
        boolean boolean58 = partial40.isMatch((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology59 = partial40.getChronology();
        boolean boolean60 = partial29.isEqual((org.joda.time.ReadablePartial) partial40);
        boolean boolean61 = partial23.isEqual((org.joda.time.ReadablePartial) partial40);
        boolean boolean62 = partial15.isAfter((org.joda.time.ReadablePartial) partial40);
        boolean boolean63 = partial1.isEqual((org.joda.time.ReadablePartial) partial40);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray2 = new int[] {};
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray2, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray2, chronology5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        org.joda.time.DateTime dateTime11 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        int[] intArray13 = partial6.getValues();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial6.plus(readablePeriod14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField17 = partial15.getField((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial15);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        java.lang.String str11 = partial0.toString("[]");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray14 = new int[] {};
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray14, chronology15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        int[] intArray22 = partial17.getValues();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray22, chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        java.lang.String str30 = partial26.toString();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        boolean boolean39 = partial31.isBefore((org.joda.time.ReadablePartial) partial36);
        int[] intArray40 = partial31.getValues();
        boolean boolean41 = partial26.isEqual((org.joda.time.ReadablePartial) partial31);
        int[] intArray42 = partial31.getValues();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = partial43.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = partial43.toString(dateTimeFormatter45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial43.withPeriodAdded(readablePeriod47, (int) (byte) 100);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        boolean boolean53 = partial43.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial55.withChronologyRetainFields(chronology57);
        boolean boolean60 = partial55.equals((java.lang.Object) 10.0f);
        boolean boolean61 = partial43.isMatch((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology62 = partial43.getChronology();
        org.joda.time.Partial partial63 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray42, chronology62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = partial66.toDateTime(readableInstant67);
        org.joda.time.DateTime dateTime69 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime70 = partial64.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        int[] intArray71 = partial64.getValues();
        org.joda.time.Chronology chronology72 = partial64.getChronology();
        org.joda.time.Partial partial73 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray42, chronology72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = null;
        java.lang.String str75 = partial73.toString(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[]" + "'", str75, "[]");
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] {};
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray5, chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial11.withPeriodAdded(readablePeriod15, (int) (byte) 100);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        boolean boolean21 = partial11.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial11.withPeriodAdded(readablePeriod22, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial11.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray27);
        boolean boolean32 = partial8.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial33.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial34.withChronologyRetainFields(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial34.plus(readablePeriod38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        java.lang.String str43 = partial40.toString();
        boolean boolean44 = partial34.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = partial45.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = partial45.toString(dateTimeFormatter47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial51 = partial45.withPeriodAdded(readablePeriod49, (int) (byte) 100);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        boolean boolean55 = partial45.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = partial57.withChronologyRetainFields(chronology59);
        boolean boolean62 = partial57.equals((java.lang.Object) 10.0f);
        boolean boolean63 = partial45.isMatch((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology64 = partial45.getChronology();
        boolean boolean65 = partial34.isEqual((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial66 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = partial67.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray70 = new int[] {};
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray70, chronology71);
        boolean boolean73 = partial67.isAfter((org.joda.time.ReadablePartial) partial72);
        org.joda.time.DateTimeField[] dateTimeFieldArray74 = partial72.getFields();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        org.joda.time.DateTime dateTime79 = partial75.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        boolean boolean82 = partial80.isBefore((org.joda.time.ReadablePartial) partial81);
        boolean boolean83 = partial75.isBefore((org.joda.time.ReadablePartial) partial80);
        java.lang.String str84 = partial75.toStringList();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.Partial partial86 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.DateTime dateTime88 = partial86.toDateTime(readableInstant87);
        org.joda.time.DateTime dateTime89 = partial85.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean90 = partial75.isMatch((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTime dateTime91 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        boolean boolean92 = partial66.isMatch((org.joda.time.ReadableInstant) dateTime91);
        boolean boolean93 = partial8.isAfter((org.joda.time.ReadablePartial) partial66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = partial66.getFormatter();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(dateTimeFormatter46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray74);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[]" + "'", str84, "[]");
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(dateTimeFormatter94);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial24.without(dateTimeFieldType25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        java.lang.String str32 = partial28.toString();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        boolean boolean41 = partial33.isBefore((org.joda.time.ReadablePartial) partial38);
        int[] intArray42 = partial33.getValues();
        boolean boolean43 = partial28.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean44 = partial24.isMatch((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime49 = partial45.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        boolean boolean53 = partial45.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial55.withChronologyRetainFields(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial55.plus(readablePeriod59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial63 = partial55.withPeriodAdded(readablePeriod61, (int) (byte) 10);
        int int64 = partial50.compareTo((org.joda.time.ReadablePartial) partial63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        boolean boolean66 = partial63.isSupported(dateTimeFieldType65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial69 = partial63.withPeriodAdded(readablePeriod67, (-1));
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.minus(readablePeriod70);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = partial72.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = null;
        java.lang.String str75 = partial72.toString(dateTimeFormatter74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial78 = partial72.withPeriodAdded(readablePeriod76, (int) (byte) 100);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        boolean boolean81 = partial79.isBefore((org.joda.time.ReadablePartial) partial80);
        boolean boolean82 = partial72.isBefore((org.joda.time.ReadablePartial) partial80);
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        boolean boolean85 = partial83.isBefore((org.joda.time.ReadablePartial) partial84);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = partial84.withChronologyRetainFields(chronology86);
        boolean boolean89 = partial84.equals((java.lang.Object) 10.0f);
        boolean boolean90 = partial72.isMatch((org.joda.time.ReadablePartial) partial84);
        org.joda.time.Chronology chronology91 = partial72.getChronology();
        org.joda.time.Partial partial92 = partial71.withChronologyRetainFields(chronology91);
        boolean boolean93 = partial28.isAfter((org.joda.time.ReadablePartial) partial92);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNull(dateTimeFormatter73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[]" + "'", str75, "[]");
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        int int10 = partial6.size();
        int int11 = partial6.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = partial6.indexOf(dateTimeFieldType12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime18 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial14.isBefore((org.joda.time.ReadablePartial) partial19);
        int[] intArray23 = partial19.getValues();
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        java.lang.String str35 = partial32.toString();
        boolean boolean36 = partial26.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        org.joda.time.DateTime dateTime40 = partial32.toDateTime(readableInstant38);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        boolean boolean47 = partial42.equals((java.lang.Object) 10.0f);
        int int48 = partial42.size();
        boolean boolean49 = partial32.isEqual((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime54 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime55 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        java.util.Locale locale57 = null;
        java.lang.String str58 = partial42.toString("[]", locale57);
        boolean boolean59 = partial24.isBefore((org.joda.time.ReadablePartial) partial42);
        boolean boolean60 = partial6.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = partial61.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = partial61.toString(dateTimeFormatter63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial67 = partial61.withPeriodAdded(readablePeriod65, (int) (byte) 100);
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        boolean boolean70 = partial68.isBefore((org.joda.time.ReadablePartial) partial69);
        boolean boolean71 = partial61.isBefore((org.joda.time.ReadablePartial) partial69);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial74 = partial61.withPeriodAdded(readablePeriod72, 0);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = partial75.isAfter((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Partial partial84 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial75);
        boolean boolean85 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = new org.joda.time.Partial(chronology86);
        boolean boolean88 = partial75.isBefore((org.joda.time.ReadablePartial) partial87);
        boolean boolean89 = partial24.equals((java.lang.Object) partial87);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray56 = new int[] {};
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray56, chronology57);
        boolean boolean59 = partial53.isAfter((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial53.getChronology();
        boolean boolean61 = partial18.equals((java.lang.Object) chronology60);
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology60);
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType65 = partial63.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial20.minus(readablePeriod40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int[] intArray51 = partial46.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray51, chronology52);
        boolean boolean54 = partial41.equals((java.lang.Object) partial53);
        int int55 = partial19.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        org.joda.time.Partial partial57 = partial19.without(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(partial57);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial34.size();
        boolean boolean36 = partial18.isMatch((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial43.withChronologyRetainFields(chronology45);
        boolean boolean47 = partial37.isMatch((org.joda.time.ReadablePartial) partial46);
        boolean boolean49 = partial46.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial46.plus(readablePeriod50);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = partial46.getFieldTypes();
        boolean boolean53 = partial34.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial56 = partial46.with(dateTimeFieldType54, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial25.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        int int35 = partial7.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        org.joda.time.Partial partial37 = partial25.without(dateTimeFieldType36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial37.plus(readablePeriod38);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial39);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial18.withChronologyRetainFields(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial18.plus(readablePeriod22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial18.withPeriodAdded(readablePeriod24, (int) (byte) 10);
        int int27 = partial13.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = partial26.isSupported(dateTimeFieldType28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial26.withPeriodAdded(readablePeriod30, (-1));
        boolean boolean33 = partial6.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial32.getFormatter();
        int int35 = partial32.size();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial42 = partial37.plus(readablePeriod41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        java.lang.String str46 = partial43.toString();
        boolean boolean47 = partial37.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial43.toDateTime(readableInstant49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        int int59 = partial53.size();
        boolean boolean60 = partial43.isEqual((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime68 = partial64.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = partial61.isAfter((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Partial partial70 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial61);
        int int71 = partial43.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        org.joda.time.Partial partial73 = partial61.without(dateTimeFieldType72);
        int int74 = partial32.compareTo((org.joda.time.ReadablePartial) partial73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType76 = partial32.getFieldType((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = partial6.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial6.withChronologyRetainFields(chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial6.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial17.plus(readablePeriod21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        java.lang.String str26 = partial23.toString();
        boolean boolean27 = partial17.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial23.toDateTime(readableInstant29);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        boolean boolean38 = partial33.equals((java.lang.Object) 10.0f);
        int int39 = partial33.size();
        boolean boolean40 = partial23.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean48 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime53 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        boolean boolean57 = partial49.isBefore((org.joda.time.ReadablePartial) partial54);
        int[] intArray58 = partial54.getValues();
        org.joda.time.Chronology chronology59 = partial54.getChronology();
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Partial partial61 = partial5.withChronologyRetainFields(chronology59);
        org.joda.time.Partial partial62 = new org.joda.time.Partial(chronology59);
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology59);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(partial61);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        int int7 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray9 = new int[] {};
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime16 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        int[] intArray17 = partial12.getValues();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isAfter((org.joda.time.ReadablePartial) partial29);
        int int40 = partial1.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        boolean boolean59 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology60 = partial41.getChronology();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial41.minus(readablePeriod61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        boolean boolean64 = partial62.isSupported(dateTimeFieldType63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial62.plus(readablePeriod65);
        boolean boolean67 = partial1.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial1.plus(readablePeriod68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        org.joda.time.Partial partial71 = partial69.without(dateTimeFieldType70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = partial71.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial71);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = partial0.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial0.without(dateTimeFieldType23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial25.isBefore((org.joda.time.ReadablePartial) partial30);
        java.lang.String str34 = partial25.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray36 = new int[] {};
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldTypeArray35, intArray36, chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial38.withPeriodAdded(readablePeriod39, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int[] intArray51 = partial46.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray51, chronology52);
        boolean boolean54 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray57 = new int[] {};
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldTypeArray56, intArray57, chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray57, chronology60);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean68 = partial41.isMatch((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean69 = partial25.isMatch((org.joda.time.ReadablePartial) partial41);
        boolean boolean70 = partial24.isBefore((org.joda.time.ReadablePartial) partial41);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = partial6.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial6.withChronologyRetainFields(chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial6.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial17.plus(readablePeriod21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        java.lang.String str26 = partial23.toString();
        boolean boolean27 = partial17.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial23.toDateTime(readableInstant29);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        boolean boolean38 = partial33.equals((java.lang.Object) 10.0f);
        int int39 = partial33.size();
        boolean boolean40 = partial23.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean48 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime53 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        boolean boolean57 = partial49.isBefore((org.joda.time.ReadablePartial) partial54);
        int[] intArray58 = partial54.getValues();
        org.joda.time.Chronology chronology59 = partial54.getChronology();
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        org.joda.time.Partial partial61 = partial5.withChronologyRetainFields(chronology59);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial5.plus(readablePeriod62);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = partial63.getValue(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(partial63);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial19.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial19.toString(dateTimeFormatter21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial19.withChronologyRetainFields(chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial19.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial27.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial27.withChronologyRetainFields(chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial27.isMatch((org.joda.time.ReadablePartial) partial33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        boolean boolean37 = partial19.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial56 = partial47.withPeriodAdded(readablePeriod54, (int) ' ');
        org.joda.time.Chronology chronology57 = partial56.getChronology();
        org.joda.time.Partial partial58 = partial19.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial59 = partial10.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial60 = partial6.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = partial63.withChronologyRetainFields(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial63.plus(readablePeriod67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial71 = partial63.withPeriodAdded(readablePeriod69, (int) (byte) 10);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = partial73.toDateTime(readableInstant74);
        org.joda.time.DateTime dateTime76 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = partial71.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        java.lang.String str78 = partial71.toStringList();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = partial83.toDateTime(readableInstant84);
        org.joda.time.DateTime dateTime86 = partial82.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean87 = partial79.isAfter((org.joda.time.ReadablePartial) partial82);
        boolean boolean88 = partial71.isEqual((org.joda.time.ReadablePartial) partial79);
        int[] intArray89 = partial79.getValues();
        boolean boolean90 = partial61.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        org.joda.time.Partial partial92 = partial79.minus(readablePeriod91);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = partial92.getValue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(partial92);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial22.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial32.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        int int41 = partial27.compareTo((org.joda.time.ReadablePartial) partial40);
        int int42 = partial21.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial45 = partial40.withPeriodAdded(readablePeriod43, (int) '#');
        int int46 = partial40.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property48 = partial40.property(dateTimeFieldType47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial27.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int[] intArray40 = partial35.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray40, chronology41);
        boolean boolean43 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial30.plus(readablePeriod44);
        boolean boolean46 = partial21.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray48 = new int[] {};
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray47, intArray48, chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial53 = partial50.withPeriodAdded(readablePeriod51, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray55 = new int[] {};
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray55, chronology56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime62 = partial58.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        int[] intArray63 = partial58.getValues();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray63, chronology64);
        boolean boolean66 = partial53.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial65.getChronology();
        boolean boolean68 = partial45.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = partial45.toString(dateTimeFormatter69);
        int int71 = partial45.size();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = partial72.getFormatter();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.DateTime dateTime78 = partial74.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        boolean boolean81 = partial79.isBefore((org.joda.time.ReadablePartial) partial80);
        boolean boolean82 = partial74.isBefore((org.joda.time.ReadablePartial) partial79);
        int[] intArray83 = partial79.getValues();
        org.joda.time.Chronology chronology84 = partial79.getChronology();
        org.joda.time.Partial partial85 = partial72.withChronologyRetainFields(chronology84);
        org.joda.time.Partial partial86 = new org.joda.time.Partial(chronology84);
        org.joda.time.Partial partial87 = partial45.withChronologyRetainFields(chronology84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType89 = partial45.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNotNull(partial87);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial0.plus(readablePeriod50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial0.toString(dateTimeFormatter52);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial1.toString(dateTimeFormatter10);
        java.lang.String str12 = partial1.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial15 = partial1.with(dateTimeFieldType13, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial2.isBefore((org.joda.time.ReadablePartial) partial7);
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = partial7.getChronology();
        org.joda.time.Partial partial13 = partial0.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology12);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = partial16.withChronologyRetainFields(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial16.plus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        java.lang.String str25 = partial22.toString();
        boolean boolean26 = partial16.isAfter((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial22.toDateTime(readableInstant28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        int int38 = partial32.size();
        boolean boolean39 = partial22.isEqual((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime44 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime45 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        java.util.Locale locale47 = null;
        java.lang.String str48 = partial32.toString("[]", locale47);
        org.joda.time.Chronology chronology49 = partial32.getChronology();
        org.joda.time.Partial partial50 = partial14.withChronologyRetainFields(chronology49);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(partial50);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial51.plus(readablePeriod55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        java.lang.String str60 = partial57.toString();
        boolean boolean61 = partial51.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial57.toDateTime(readableInstant63);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial66.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial67.withChronologyRetainFields(chronology69);
        boolean boolean72 = partial67.equals((java.lang.Object) 10.0f);
        int int73 = partial67.size();
        boolean boolean74 = partial57.isEqual((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = partial75.isAfter((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Partial partial84 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial75);
        int int85 = partial57.compareTo((org.joda.time.ReadablePartial) partial75);
        boolean boolean86 = partial47.isEqual((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeField[] dateTimeFieldArray87 = partial47.getFields();
        org.joda.time.Partial partial88 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        int[] intArray89 = partial47.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = null;
        int int91 = partial47.indexOf(dateTimeFieldType90);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray23 = new int[] {};
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray23, chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray31 = partial26.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray31, chronology32);
        boolean boolean34 = partial21.equals((java.lang.Object) partial33);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = partial33.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray37 = new int[] {};
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray37, chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime44 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        int[] intArray45 = partial40.getValues();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        java.lang.String str53 = partial49.toString();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial54.isBefore((org.joda.time.ReadablePartial) partial59);
        int[] intArray63 = partial54.getValues();
        boolean boolean64 = partial49.isEqual((org.joda.time.ReadablePartial) partial54);
        int[] intArray65 = partial54.getValues();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = partial66.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = partial66.toString(dateTimeFormatter68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial66.withPeriodAdded(readablePeriod70, (int) (byte) 100);
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        boolean boolean75 = partial73.isBefore((org.joda.time.ReadablePartial) partial74);
        boolean boolean76 = partial66.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        boolean boolean79 = partial77.isBefore((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = partial78.withChronologyRetainFields(chronology80);
        boolean boolean83 = partial78.equals((java.lang.Object) 10.0f);
        boolean boolean84 = partial66.isMatch((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology85 = partial66.getChronology();
        org.joda.time.Partial partial86 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray65, chronology85);
        int int87 = partial86.size();
        boolean boolean88 = partial33.isAfter((org.joda.time.ReadablePartial) partial86);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial91 = partial86.with(dateTimeFieldType89, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial2.isBefore((org.joda.time.ReadablePartial) partial7);
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = partial7.getChronology();
        org.joda.time.Partial partial13 = partial0.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology12);
        int int15 = partial14.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial17.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial17.toString(dateTimeFormatter19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial17.withPeriodAdded(readablePeriod21, (int) (byte) 100);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        boolean boolean27 = partial17.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial17.withPeriodAdded(readablePeriod28, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial17.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray33 = new int[] {};
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray33, chronology34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray33);
        org.joda.time.Partial partial37 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray33);
        java.lang.String str38 = partial37.toStringList();
        org.joda.time.Partial partial39 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial37);
        boolean boolean40 = partial14.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial43 = partial14.withField(dateTimeFieldType41, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = partial13.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = partial13.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial13.withChronologyRetainFields(chronology17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial13.isMatch((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = partial21.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = partial21.toString(dateTimeFormatter23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = partial21.withChronologyRetainFields(chronology25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial21.isMatch((org.joda.time.ReadablePartial) partial27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        boolean boolean31 = partial13.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial33.plus(readablePeriod37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial33.withPeriodAdded(readablePeriod39, (int) (byte) 10);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial41.withPeriodAdded(readablePeriod48, (int) ' ');
        org.joda.time.Chronology chronology51 = partial50.getChronology();
        org.joda.time.Partial partial52 = partial13.withChronologyRetainFields(chronology51);
        org.joda.time.Partial partial53 = partial9.withChronologyRetainFields(chronology51);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial54.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial64.withChronologyRetainFields(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial64.plus(readablePeriod68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial64.withPeriodAdded(readablePeriod70, (int) (byte) 10);
        int int73 = partial59.compareTo((org.joda.time.ReadablePartial) partial72);
        boolean boolean74 = partial53.isEqual((org.joda.time.ReadablePartial) partial72);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial53.plus(readablePeriod75);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(dateTimeFormatter14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(partial76);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Chronology chronology7 = partial6.getChronology();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial6.minus(readablePeriod8);
        int[] intArray10 = partial9.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField12 = partial9.getField((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        org.joda.time.Partial partial52 = partial50.without(dateTimeFieldType51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField54 = partial50.getField(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial52);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = partial1.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial1.getFormatter();
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = partial16.withChronologyRetainFields(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial16.plus(readablePeriod20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial16.withPeriodAdded(readablePeriod22, (int) (byte) 10);
        int int25 = partial11.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = partial24.isSupported(dateTimeFieldType26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial24.withPeriodAdded(readablePeriod28, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        org.joda.time.Partial partial32 = partial30.without(dateTimeFieldType31);
        boolean boolean33 = partial1.isMatch((org.joda.time.ReadablePartial) partial32);
        int[] intArray34 = partial1.getValues();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial0.minus(readablePeriod10);
        org.joda.time.Chronology chronology12 = partial0.getChronology();
        org.joda.time.Partial partial13 = new org.joda.time.Partial(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology12);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial13.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = partial28.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        boolean boolean39 = partial31.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial41.plus(readablePeriod45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial41.withPeriodAdded(readablePeriod47, (int) (byte) 10);
        int int50 = partial36.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DateTimeField[] dateTimeFieldArray51 = partial49.getFields();
        boolean boolean52 = partial30.isEqual((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology53 = partial30.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        java.lang.String str17 = partial13.toString();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial18.isBefore((org.joda.time.ReadablePartial) partial23);
        int[] intArray27 = partial18.getValues();
        boolean boolean28 = partial13.isEqual((org.joda.time.ReadablePartial) partial18);
        int[] intArray29 = partial18.getValues();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial30.withPeriodAdded(readablePeriod34, (int) (byte) 100);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        boolean boolean40 = partial30.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        boolean boolean47 = partial42.equals((java.lang.Object) 10.0f);
        boolean boolean48 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology49 = partial30.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray29, chronology49);
        int[] intArray51 = partial50.getValues();
        int[] intArray52 = partial50.getValues();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray23 = new int[] {};
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray23, chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray31 = partial26.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray31, chronology32);
        boolean boolean34 = partial21.equals((java.lang.Object) partial33);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = partial33.getFields();
        int[] intArray36 = partial33.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial47.withPeriodAdded(readablePeriod48, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray52 = new int[] {};
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(dateTimeFieldTypeArray51, intArray52, chronology53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        org.joda.time.DateTime dateTime59 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        int[] intArray60 = partial55.getValues();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray51, intArray60, chronology61);
        boolean boolean63 = partial50.isMatch((org.joda.time.ReadablePartial) partial62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial50.plus(readablePeriod64);
        org.joda.time.Chronology chronology66 = partial65.getChronology();
        org.joda.time.Partial partial67 = partial43.withChronologyRetainFields(chronology66);
        org.joda.time.Partial partial68 = partial33.withChronologyRetainFields(chronology66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial(chronology66);
        java.lang.Class<?> wildcardClass70 = chronology66.getClass();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Chronology chronology7 = partial6.getChronology();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = partial0.indexOf(dateTimeFieldType30);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = partial4.getFields();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        boolean boolean8 = partial6.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = partial7.withChronologyRetainFields(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial7.plus(readablePeriod11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        java.lang.String str16 = partial13.toString();
        boolean boolean17 = partial7.isAfter((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial13.toDateTime(readableInstant19);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial22.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = partial23.withChronologyRetainFields(chronology25);
        boolean boolean28 = partial23.equals((java.lang.Object) 10.0f);
        int int29 = partial23.size();
        boolean boolean30 = partial13.isEqual((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime36 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology37 = partial23.getChronology();
        org.joda.time.Partial partial38 = partial4.withChronologyRetainFields(chronology37);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(partial38);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial3.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial3.minus(readablePeriod6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial9.withPeriodAdded(readablePeriod15, (int) (byte) 10);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial17.withPeriodAdded(readablePeriod24, (int) ' ');
        org.joda.time.Chronology chronology27 = partial26.getChronology();
        org.joda.time.Partial partial28 = partial7.withChronologyRetainFields(chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology27);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = partial31.withChronologyRetainFields(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial31.plus(readablePeriod35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial31.withPeriodAdded(readablePeriod37, (int) (byte) 10);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime44 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime45 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        java.lang.String str46 = partial39.toStringList();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime54 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = partial47.isAfter((org.joda.time.ReadablePartial) partial50);
        boolean boolean56 = partial39.isEqual((org.joda.time.ReadablePartial) partial47);
        boolean boolean57 = partial29.isAfter((org.joda.time.ReadablePartial) partial39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = partial29.getFormatter();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(dateTimeFormatter58);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField7 = partial5.getField((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial25.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        int int35 = partial7.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        org.joda.time.Partial partial37 = partial25.without(dateTimeFieldType36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = partial25.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            int int40 = partial25.getValue(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        java.lang.String str57 = partial54.toString();
        boolean boolean58 = partial48.isAfter((org.joda.time.ReadablePartial) partial54);
        boolean boolean59 = partial40.isEqual((org.joda.time.ReadablePartial) partial54);
        boolean boolean60 = partial29.equals((java.lang.Object) partial40);
        int[] intArray61 = partial40.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray63 = new int[] {};
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray62, intArray63, chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial65.withPeriodAdded(readablePeriod66, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray70 = new int[] {};
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray70, chronology71);
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = partial74.toDateTime(readableInstant75);
        org.joda.time.DateTime dateTime77 = partial73.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        int[] intArray78 = partial73.getValues();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray78, chronology79);
        boolean boolean81 = partial68.isMatch((org.joda.time.ReadablePartial) partial80);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial83 = partial68.plus(readablePeriod82);
        org.joda.time.Chronology chronology84 = partial83.getChronology();
        org.joda.time.Partial partial85 = partial40.withChronologyRetainFields(chronology84);
        org.joda.time.DurationFieldType durationFieldType86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial88 = partial85.withFieldAddWrapped(durationFieldType86, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(partial85);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = partial3.isSupported(dateTimeFieldType9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial11.isMatch((org.joda.time.ReadablePartial) partial20);
        boolean boolean23 = partial20.equals((java.lang.Object) 10);
        java.lang.String str24 = partial20.toString();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial20.withPeriodAdded(readablePeriod25, (int) '4');
        int[] intArray28 = partial27.getValues();
        boolean boolean29 = partial3.isEqual((org.joda.time.ReadablePartial) partial27);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = partial3.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial0.minus(readablePeriod11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial12.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        int[] intArray16 = partial12.getValues();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        int int20 = partial16.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        org.joda.time.Partial partial22 = partial16.without(dateTimeFieldType21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = partial23.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial23.withChronologyRetainFields(chronology27);
        org.joda.time.Chronology chronology29 = partial23.getChronology();
        org.joda.time.Partial partial30 = partial16.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = partial18.indexOf(dateTimeFieldType20);
        java.lang.Object obj22 = null;
        boolean boolean23 = partial18.equals(obj22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial20 = partial17.withPeriodAdded(readablePeriod18, (int) (short) 100);
        int int21 = partial8.compareTo((org.joda.time.ReadablePartial) partial20);
        java.lang.String str22 = partial8.toStringList();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime27 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        boolean boolean31 = partial23.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial33.plus(readablePeriod37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial33.withPeriodAdded(readablePeriod39, (int) (byte) 10);
        int int42 = partial28.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = partial41.isSupported(dateTimeFieldType43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (-1));
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial49.plus(readablePeriod53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        java.lang.String str58 = partial55.toString();
        boolean boolean59 = partial49.isAfter((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = partial60.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial60.toString(dateTimeFormatter62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial66 = partial60.withPeriodAdded(readablePeriod64, (int) (byte) 100);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        boolean boolean69 = partial67.isBefore((org.joda.time.ReadablePartial) partial68);
        boolean boolean70 = partial60.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        boolean boolean73 = partial71.isBefore((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = partial72.withChronologyRetainFields(chronology74);
        boolean boolean77 = partial72.equals((java.lang.Object) 10.0f);
        boolean boolean78 = partial60.isMatch((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology79 = partial60.getChronology();
        boolean boolean80 = partial49.isEqual((org.joda.time.ReadablePartial) partial60);
        int int81 = partial47.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray82 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray83 = new int[] {};
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = new org.joda.time.Partial(dateTimeFieldTypeArray82, intArray83, chronology84);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = null;
        java.lang.String str87 = partial85.toString(dateTimeFormatter86);
        boolean boolean88 = partial47.isAfter((org.joda.time.ReadablePartial) partial85);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = partial47.getFormatter();
        int int90 = partial8.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean91 = partial4.isMatch((org.joda.time.ReadablePartial) partial8);
        org.joda.time.DateTimeField[] dateTimeFieldArray92 = partial4.getFields();
        org.joda.time.Chronology chronology93 = partial4.getChronology();
        org.joda.time.Partial partial94 = new org.joda.time.Partial(chronology93);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(dateTimeFormatter61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[]" + "'", str87, "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(dateTimeFormatter89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray92);
        org.junit.Assert.assertNotNull(chronology93);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial3.toString(dateTimeFormatter4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DurationFieldType durationFieldType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial9 = partial3.withFieldAdded(durationFieldType7, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        java.lang.String str26 = partial20.toString("[]");
        boolean boolean27 = partial5.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial29.getFieldTypes();
        java.lang.String str33 = partial29.toString("[]");
        boolean boolean34 = partial5.isEqual((org.joda.time.ReadablePartial) partial29);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial5.withPeriodAdded(readablePeriod35, 1);
        java.lang.String str38 = partial37.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial14.withChronologyRetainFields(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial14.plus(readablePeriod18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        java.lang.String str23 = partial20.toString();
        boolean boolean24 = partial14.isAfter((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial20.toDateTime(readableInstant26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial29.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial30.withChronologyRetainFields(chronology32);
        boolean boolean35 = partial30.equals((java.lang.Object) 10.0f);
        int int36 = partial30.size();
        boolean boolean37 = partial20.isEqual((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean44 = partial12.isMatch((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        int int46 = partial12.indexOf(dateTimeFieldType45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        org.joda.time.Partial partial48 = partial12.without(dateTimeFieldType47);
        org.joda.time.DateTimeField[] dateTimeFieldArray49 = partial12.getFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTimeFieldArray49);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray41 = new int[] {};
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray41, chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial43.toString(dateTimeFormatter44);
        boolean boolean46 = partial18.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial55.withChronologyRetainFields(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial55.plus(readablePeriod59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        java.lang.String str64 = partial61.toString();
        boolean boolean65 = partial55.isAfter((org.joda.time.ReadablePartial) partial61);
        boolean boolean66 = partial53.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = partial67.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = partial67.toString(dateTimeFormatter69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial73 = partial67.withPeriodAdded(readablePeriod71, (int) (byte) 100);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial67.isBefore((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        boolean boolean80 = partial78.isBefore((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial79.withChronologyRetainFields(chronology81);
        boolean boolean84 = partial79.equals((java.lang.Object) 10.0f);
        boolean boolean85 = partial67.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology86 = partial67.getChronology();
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Partial partial88 = partial67.minus(readablePeriod87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = partial88.isSupported(dateTimeFieldType89);
        org.joda.time.Chronology chronology91 = partial88.getChronology();
        org.joda.time.Partial partial92 = partial61.withChronologyRetainFields(chronology91);
        org.joda.time.Partial partial93 = partial43.withChronologyRetainFields(chronology91);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = null;
        boolean boolean95 = partial43.isSupported(dateTimeFieldType94);
        java.lang.String str97 = partial43.toString("[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(dateTimeFormatter68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "[]" + "'", str97, "[]");
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        java.util.Locale locale4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = partial0.toString("hi!", locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        boolean boolean22 = partial14.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial23 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial14);
        boolean boolean24 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial34.withPeriodAdded(readablePeriod41, (int) ' ');
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime48 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        boolean boolean52 = partial44.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = partial54.withChronologyRetainFields(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial54.plus(readablePeriod58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial62 = partial54.withPeriodAdded(readablePeriod60, (int) (byte) 10);
        int int63 = partial49.compareTo((org.joda.time.ReadablePartial) partial62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = partial62.isSupported(dateTimeFieldType64);
        boolean boolean66 = partial34.isMatch((org.joda.time.ReadablePartial) partial62);
        int int67 = partial13.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial34.toDateTime(readableInstant68);
        java.util.Locale locale71 = null;
        java.lang.String str72 = partial34.toString("[]", locale71);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial10.minus(readablePeriod30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = partial31.getFieldTypes();
        org.joda.time.Chronology chronology33 = partial31.getChronology();
        boolean boolean34 = partial6.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        org.joda.time.Partial partial36 = partial6.without(dateTimeFieldType35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial47.withPeriodAdded(readablePeriod48, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray52 = new int[] {};
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(dateTimeFieldTypeArray51, intArray52, chronology53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        org.joda.time.DateTime dateTime59 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        int[] intArray60 = partial55.getValues();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray51, intArray60, chronology61);
        boolean boolean63 = partial50.isMatch((org.joda.time.ReadablePartial) partial62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial50.plus(readablePeriod64);
        org.joda.time.Chronology chronology66 = partial65.getChronology();
        org.joda.time.Partial partial67 = partial43.withChronologyRetainFields(chronology66);
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = partial69.toDateTime(readableInstant70);
        org.joda.time.DateTime dateTime72 = partial68.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        boolean boolean75 = partial73.isBefore((org.joda.time.ReadablePartial) partial74);
        boolean boolean76 = partial68.isBefore((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        boolean boolean79 = partial77.isBefore((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = partial78.withChronologyRetainFields(chronology80);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial83 = partial78.plus(readablePeriod82);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial86 = partial78.withPeriodAdded(readablePeriod84, (int) (byte) 10);
        int int87 = partial73.compareTo((org.joda.time.ReadablePartial) partial86);
        org.joda.time.DateTimeField[] dateTimeFieldArray88 = partial86.getFields();
        boolean boolean89 = partial67.isEqual((org.joda.time.ReadablePartial) partial86);
        int[] intArray90 = partial67.getValues();
        boolean boolean91 = partial6.isAfter((org.joda.time.ReadablePartial) partial67);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(partial86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = partial6.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        java.lang.String str17 = partial1.toStringList();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial19.withPeriodAdded(readablePeriod25, (int) (byte) 10);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime33 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType36 = partial1.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        int[] intArray7 = partial3.getValues();
        org.joda.time.DurationFieldType durationFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial10 = partial3.withFieldAdded(durationFieldType8, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.minus(readablePeriod25);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = partial26.getFields();
        java.lang.String str28 = partial26.toString();
        org.joda.time.Chronology chronology29 = partial26.getChronology();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = partial31.withChronologyRetainFields(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial31.plus(readablePeriod35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        java.lang.String str40 = partial37.toString();
        boolean boolean41 = partial31.isAfter((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial37.toDateTime(readableInstant43);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields(chronology49);
        boolean boolean52 = partial47.equals((java.lang.Object) 10.0f);
        int int53 = partial47.size();
        boolean boolean54 = partial37.isEqual((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        org.joda.time.DateTime dateTime59 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime60 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology61 = partial47.getChronology();
        boolean boolean62 = partial26.isEqual((org.joda.time.ReadablePartial) partial47);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        java.lang.String str2 = partial0.toStringList();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial0.getFormatter();
        java.util.Locale locale5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = partial0.toString("", locale5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter3);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial27.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int[] intArray40 = partial35.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray40, chronology41);
        boolean boolean43 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial30.plus(readablePeriod44);
        boolean boolean46 = partial21.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray48 = new int[] {};
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray47, intArray48, chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial53 = partial50.withPeriodAdded(readablePeriod51, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray55 = new int[] {};
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray55, chronology56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime62 = partial58.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        int[] intArray63 = partial58.getValues();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray63, chronology64);
        boolean boolean66 = partial53.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial65.getChronology();
        boolean boolean68 = partial45.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray70 = new int[] {};
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray70, chronology71);
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        boolean boolean75 = partial73.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial74.withChronologyRetainFields(chronology76);
        java.lang.String str78 = partial74.toString();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = partial80.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime83 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        boolean boolean86 = partial84.isBefore((org.joda.time.ReadablePartial) partial85);
        boolean boolean87 = partial79.isBefore((org.joda.time.ReadablePartial) partial84);
        int[] intArray88 = partial79.getValues();
        boolean boolean89 = partial74.isEqual((org.joda.time.ReadablePartial) partial79);
        java.lang.String str90 = partial74.toStringList();
        boolean boolean91 = partial72.isBefore((org.joda.time.ReadablePartial) partial74);
        boolean boolean92 = partial45.isMatch((org.joda.time.ReadablePartial) partial74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType94 = partial74.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "[]" + "'", str90, "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = partial54.withChronologyRetainFields(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial54.plus(readablePeriod58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = partial60.toDateTime(readableInstant61);
        java.lang.String str63 = partial60.toString();
        boolean boolean64 = partial54.isAfter((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime68 = partial60.toDateTime(readableInstant66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        boolean boolean75 = partial70.equals((java.lang.Object) 10.0f);
        int int76 = partial70.size();
        boolean boolean77 = partial60.isEqual((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime83 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = partial70.getFormatter();
        boolean boolean85 = partial49.isEqual((org.joda.time.ReadablePartial) partial70);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.Partial partial88 = partial70.withPeriodAdded(readablePeriod86, (int) (short) 1);
        java.lang.String str89 = partial70.toStringList();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNull(dateTimeFormatter84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[]" + "'", str89, "[]");
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray23 = new int[] {};
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray23, chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray31 = partial26.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray31, chronology32);
        boolean boolean34 = partial21.equals((java.lang.Object) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray36 = new int[] {};
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldTypeArray35, intArray36, chronology37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        int[] intArray44 = partial39.getValues();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(dateTimeFieldTypeArray35, intArray44, chronology45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        java.lang.String str52 = partial48.toString();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        boolean boolean61 = partial53.isBefore((org.joda.time.ReadablePartial) partial58);
        int[] intArray62 = partial53.getValues();
        boolean boolean63 = partial48.isEqual((org.joda.time.ReadablePartial) partial53);
        int[] intArray64 = partial53.getValues();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = partial65.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = partial65.toString(dateTimeFormatter67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial71 = partial65.withPeriodAdded(readablePeriod69, (int) (byte) 100);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        boolean boolean74 = partial72.isBefore((org.joda.time.ReadablePartial) partial73);
        boolean boolean75 = partial65.isBefore((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        boolean boolean78 = partial76.isBefore((org.joda.time.ReadablePartial) partial77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = partial77.withChronologyRetainFields(chronology79);
        boolean boolean82 = partial77.equals((java.lang.Object) 10.0f);
        boolean boolean83 = partial65.isMatch((org.joda.time.ReadablePartial) partial77);
        org.joda.time.Chronology chronology84 = partial65.getChronology();
        org.joda.time.Partial partial85 = new org.joda.time.Partial(dateTimeFieldTypeArray35, intArray64, chronology84);
        org.joda.time.Partial partial86 = new org.joda.time.Partial(chronology84);
        boolean boolean87 = partial33.isMatch((org.joda.time.ReadablePartial) partial86);
        int int88 = partial33.size();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial11.withChronologyRetainFields(chronology15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = partial11.toString("[]", locale18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial0.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial0.without(dateTimeFieldType23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean32 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime31);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        java.lang.String str29 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial0.getFieldTypes();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial31.withPeriodAdded(readablePeriod35, (int) (byte) 100);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        boolean boolean41 = partial31.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial43.withChronologyRetainFields(chronology45);
        boolean boolean48 = partial43.equals((java.lang.Object) 10.0f);
        boolean boolean49 = partial31.isMatch((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology50 = partial31.getChronology();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial31.minus(readablePeriod51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = partial52.isSupported(dateTimeFieldType53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = partial55.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray58 = new int[] {};
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(dateTimeFieldTypeArray57, intArray58, chronology59);
        boolean boolean61 = partial55.isAfter((org.joda.time.ReadablePartial) partial60);
        int int62 = partial52.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        org.joda.time.Partial partial64 = partial55.without(dateTimeFieldType63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial64.plus(readablePeriod65);
        int[] intArray67 = partial64.getValues();
        org.joda.time.Partial partial68 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial71 = partial68.withPeriodAdded(readablePeriod69, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        org.joda.time.Partial partial73 = partial71.without(dateTimeFieldType72);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(partial73);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        java.lang.String str26 = partial22.toString();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial27.isBefore((org.joda.time.ReadablePartial) partial32);
        int[] intArray36 = partial27.getValues();
        boolean boolean37 = partial22.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial22.withPeriodAdded(readablePeriod38, (int) (short) 100);
        boolean boolean41 = partial18.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial45.withPeriodAdded(readablePeriod46, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial45.plus(readablePeriod49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = partial50.indexOf(dateTimeFieldType51);
        org.joda.time.DateTimeField[] dateTimeFieldArray53 = partial50.getFields();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = partial54.withChronologyRetainFields(chronology58);
        org.joda.time.Chronology chronology60 = partial59.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray62 = new int[] {};
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(dateTimeFieldTypeArray61, intArray62, chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial67 = partial64.withPeriodAdded(readablePeriod65, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray69 = new int[] {};
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray68, intArray69, chronology70);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = partial73.toDateTime(readableInstant74);
        org.joda.time.DateTime dateTime76 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        int[] intArray77 = partial72.getValues();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray68, intArray77, chronology78);
        boolean boolean80 = partial67.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial82 = partial67.plus(readablePeriod81);
        org.joda.time.Partial partial83 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial82);
        boolean boolean84 = partial59.isEqual((org.joda.time.ReadablePartial) partial82);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = null;
        boolean boolean86 = partial59.isSupported(dateTimeFieldType85);
        boolean boolean87 = partial50.isMatch((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology88 = partial59.getChronology();
        org.joda.time.Partial partial89 = new org.joda.time.Partial(chronology88);
        org.joda.time.Partial partial90 = partial22.withChronologyRetainFields(chronology88);
        org.joda.time.Partial partial91 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial22);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray53);
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(partial90);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DurationFieldType durationFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial15 = partial12.withFieldAdded(durationFieldType13, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        java.lang.String str24 = partial20.toString();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial25.isBefore((org.joda.time.ReadablePartial) partial30);
        int[] intArray34 = partial25.getValues();
        boolean boolean35 = partial20.isEqual((org.joda.time.ReadablePartial) partial25);
        java.lang.String str36 = partial20.toStringList();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial38.plus(readablePeriod42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial38.withPeriodAdded(readablePeriod44, (int) (byte) 10);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial0.plus(readablePeriod55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = partial0.isSupported(dateTimeFieldType57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial60.withChronologyRetainFields(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial60.plus(readablePeriod64);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray67 = new int[] {};
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(dateTimeFieldTypeArray66, intArray67, chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial69.withPeriodAdded(readablePeriod70, (int) (short) 100);
        int int73 = partial60.compareTo((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Partial partial74 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = null;
        java.lang.String str76 = partial74.toString(dateTimeFormatter75);
        boolean boolean77 = partial0.isAfter((org.joda.time.ReadablePartial) partial74);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial80 = partial74.with(dateTimeFieldType78, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        java.lang.String str3 = partial0.toString();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        boolean boolean6 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = partial5.withChronologyRetainFields(chronology7);
        java.lang.String str9 = partial5.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        int[] intArray19 = partial10.getValues();
        boolean boolean20 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial5.withPeriodAdded(readablePeriod21, (int) (short) 100);
        boolean boolean24 = partial0.isEqual((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial5.without(dateTimeFieldType25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial26.withPeriodAdded(readablePeriod27, (int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial26.toString(dateTimeFormatter30);
        int int32 = partial26.size();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial3.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial3.minus(readablePeriod6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial9.withPeriodAdded(readablePeriod15, (int) (byte) 10);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial17.withPeriodAdded(readablePeriod24, (int) ' ');
        org.joda.time.Chronology chronology27 = partial26.getChronology();
        org.joda.time.Partial partial28 = partial7.withChronologyRetainFields(chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology27);
        int int30 = partial29.size();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial2.withPeriodAdded(readablePeriod6, (int) (byte) 100);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        boolean boolean12 = partial2.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial14.withChronologyRetainFields(chronology16);
        boolean boolean19 = partial14.equals((java.lang.Object) 10.0f);
        boolean boolean20 = partial2.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology21 = partial2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial2.minus(readablePeriod22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = partial23.isSupported(dateTimeFieldType24);
        org.joda.time.Chronology chronology26 = partial23.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial(chronology26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 100, chronology26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime54 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial55.isBefore((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial50.isBefore((org.joda.time.ReadablePartial) partial55);
        int[] intArray59 = partial55.getValues();
        org.joda.time.Chronology chronology60 = partial55.getChronology();
        boolean boolean61 = partial0.equals((java.lang.Object) partial55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial0.toString(dateTimeFormatter62);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        int int10 = partial6.size();
        int int11 = partial6.size();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial6.plus(readablePeriod12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial15.withPeriodAdded(readablePeriod16, (int) (byte) 0);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int[] intArray26 = partial19.getValues();
        boolean boolean27 = partial18.isMatch((org.joda.time.ReadablePartial) partial19);
        boolean boolean28 = partial13.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property30 = partial13.property(dateTimeFieldType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        java.lang.String str35 = partial32.toString();
        boolean boolean36 = partial26.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial37.withPeriodAdded(readablePeriod41, (int) (byte) 100);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial37.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        boolean boolean54 = partial49.equals((java.lang.Object) 10.0f);
        boolean boolean55 = partial37.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology56 = partial37.getChronology();
        boolean boolean57 = partial26.isEqual((org.joda.time.ReadablePartial) partial37);
        int int58 = partial24.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray60 = new int[] {};
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray60, chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = partial62.toString(dateTimeFormatter63);
        boolean boolean65 = partial24.isAfter((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial66 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial69 = partial66.withPeriodAdded(readablePeriod67, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial69.plus(readablePeriod70);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial71);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = partial11.indexOf(dateTimeFieldType12);
        java.util.Locale locale15 = null;
        java.lang.String str16 = partial11.toString("[]", locale15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray18 = new int[] {};
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray18, chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial20.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial20.without(dateTimeFieldType23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial20.getFormatter();
        boolean boolean26 = partial11.isBefore((org.joda.time.ReadablePartial) partial20);
        java.lang.String str27 = partial20.toStringList();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        int int10 = partial6.size();
        int int11 = partial6.size();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial6.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial20 = partial17.withField(dateTimeFieldType18, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial17);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial13.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = partial28.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Chronology chronology31 = partial6.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial(chronology31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = partial32.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        java.lang.String str9 = partial6.toString();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial6.minus(readablePeriod10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = partial6.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial11);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial2.isBefore((org.joda.time.ReadablePartial) partial7);
        java.lang.String str11 = partial2.toStringList();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime16 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        boolean boolean17 = partial2.isMatch((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial18.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial28.plus(readablePeriod32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial28.withPeriodAdded(readablePeriod34, (int) (byte) 10);
        int int37 = partial23.compareTo((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial2.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial36.plus(readablePeriod39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = partial36.toString(dateTimeFormatter41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = partial36.isSupported(dateTimeFieldType43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial36.plus(readablePeriod45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime54 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = partial47.isAfter((org.joda.time.ReadablePartial) partial50);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        int int57 = partial47.indexOf(dateTimeFieldType56);
        org.joda.time.Chronology chronology58 = partial47.getChronology();
        org.joda.time.Partial partial59 = partial46.withChronologyRetainFields(chronology58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial60 = new org.joda.time.Partial(dateTimeFieldType0, (int) '4', chronology58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(partial59);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = partial18.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        org.joda.time.Partial partial21 = partial18.without(dateTimeFieldType20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial22.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = partial23.withChronologyRetainFields(chronology25);
        java.lang.String str27 = partial23.toString();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial33.isBefore((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial28.isBefore((org.joda.time.ReadablePartial) partial33);
        int[] intArray37 = partial28.getValues();
        boolean boolean38 = partial23.isEqual((org.joda.time.ReadablePartial) partial28);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial23.withPeriodAdded(readablePeriod39, (int) (short) 100);
        boolean boolean42 = partial18.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int44 = partial18.get(dateTimeFieldType43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        java.lang.String str13 = partial9.toString();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial9.withPeriodAdded(readablePeriod14, (int) '4');
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial22.isBefore((org.joda.time.ReadablePartial) partial23);
        boolean boolean25 = partial17.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial27.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial27.plus(readablePeriod31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial35 = partial27.withPeriodAdded(readablePeriod33, (int) (byte) 10);
        int int36 = partial22.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = partial35.isSupported(dateTimeFieldType37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial35.withPeriodAdded(readablePeriod39, (-1));
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial43.withChronologyRetainFields(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial43.plus(readablePeriod47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial51 = partial43.withPeriodAdded(readablePeriod49, (int) (byte) 10);
        int int52 = partial51.size();
        boolean boolean53 = partial35.isMatch((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial60.withChronologyRetainFields(chronology62);
        boolean boolean64 = partial54.isMatch((org.joda.time.ReadablePartial) partial63);
        boolean boolean66 = partial63.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial63.plus(readablePeriod67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial63.getFieldTypes();
        boolean boolean70 = partial51.isMatch((org.joda.time.ReadablePartial) partial63);
        boolean boolean71 = partial9.isAfter((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Partial partial72 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology73 = partial72.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology73);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        org.joda.time.Partial partial7 = partial3.without(dateTimeFieldType6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime18 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        int[] intArray19 = partial14.getValues();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray19, chronology20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray23 = new int[] {};
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray23, chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray23);
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial26);
        boolean boolean28 = partial8.isAfter((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial29.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial30.withChronologyRetainFields(chronology32);
        java.lang.String str34 = partial30.toString();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial35.isBefore((org.joda.time.ReadablePartial) partial40);
        int[] intArray44 = partial35.getValues();
        boolean boolean45 = partial30.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial30.withPeriodAdded(readablePeriod46, (int) (short) 100);
        boolean boolean49 = partial26.isMatch((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial51.plus(readablePeriod55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial59 = partial51.withPeriodAdded(readablePeriod57, (int) (byte) 10);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.DateTime dateTime64 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime65 = partial59.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial59.withPeriodAdded(readablePeriod66, (int) ' ');
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.DateTime dateTime74 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime75 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        int int76 = partial68.compareTo((org.joda.time.ReadablePartial) partial69);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray77 = partial69.getFieldTypes();
        boolean boolean78 = partial30.isBefore((org.joda.time.ReadablePartial) partial69);
        boolean boolean79 = partial3.isAfter((org.joda.time.ReadablePartial) partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = partial5.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial5.toString(dateTimeFormatter7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial11 = partial5.withPeriodAdded(readablePeriod9, (int) (byte) 100);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        boolean boolean15 = partial5.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        boolean boolean23 = partial5.isMatch((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology24 = partial5.getChronology();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial5.minus(readablePeriod25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial26.getFieldTypes();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial28.toString(dateTimeFormatter30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial28.withPeriodAdded(readablePeriod32, (int) (byte) 100);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial28.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        boolean boolean45 = partial40.equals((java.lang.Object) 10.0f);
        boolean boolean46 = partial28.isMatch((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology47 = partial28.getChronology();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial28.minus(readablePeriod48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial49.getFieldTypes();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.DateTime dateTime56 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        int[] intArray58 = partial51.getValues();
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldTypeArray50, intArray58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.DateTime dateTime64 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial60.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology69 = partial60.getChronology();
        org.joda.time.Partial partial70 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray58, chronology69);
        org.joda.time.Partial partial71 = partial4.withChronologyRetainFields(chronology69);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNull(dateTimeFormatter6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(partial71);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = partial0.getFormatter();
        int[] intArray6 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = partial0.getFormatter();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter7);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = partial1.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = partial1.getFieldTypes();
        org.joda.time.Chronology chronology5 = partial1.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        int int7 = partial1.indexOf(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray22 = new int[] {};
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray21, intArray22, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray22, chronology25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = partial6.isMatch((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial35.plus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial35.withPeriodAdded(readablePeriod41, (int) (byte) 10);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime48 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial43.withPeriodAdded(readablePeriod50, (int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial52.toString(dateTimeFormatter53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial52.plus(readablePeriod55);
        boolean boolean57 = partial6.equals((java.lang.Object) readablePeriod55);
        java.lang.String str58 = partial6.toStringList();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Chronology chronology19 = partial18.getChronology();
        int[] intArray20 = partial18.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        org.joda.time.Partial partial22 = partial18.without(dateTimeFieldType21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial18.minus(readablePeriod23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray41 = new int[] {};
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray41, chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial43.toString(dateTimeFormatter44);
        boolean boolean46 = partial18.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = partial18.isSupported(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = partial0.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial11.withChronologyRetainFields(chronology15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = partial11.toString("[]", locale18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial0.toString(dateTimeFormatter21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField24 = partial0.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology31 = partial17.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = partial32.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = partial32.toString(dateTimeFormatter34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial32.withPeriodAdded(readablePeriod36, (int) (byte) 100);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        boolean boolean42 = partial32.isBefore((org.joda.time.ReadablePartial) partial40);
        int int43 = partial40.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = partial40.getFieldTypes();
        boolean boolean45 = partial17.isBefore((org.joda.time.ReadablePartial) partial40);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial10.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial11.withChronologyRetainFields(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial11.plus(readablePeriod15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        java.lang.String str20 = partial17.toString();
        boolean boolean21 = partial11.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial17.toDateTime(readableInstant23);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial27.withChronologyRetainFields(chronology29);
        boolean boolean32 = partial27.equals((java.lang.Object) 10.0f);
        int int33 = partial27.size();
        boolean boolean34 = partial17.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        org.joda.time.Partial partial45 = partial42.without(dateTimeFieldType44);
        boolean boolean46 = partial6.isEqual((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial42.minus(readablePeriod47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial48.plus(readablePeriod49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int52 = partial48.get(dateTimeFieldType51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial50);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isBefore((org.joda.time.ReadablePartial) partial29);
        java.lang.String str40 = partial19.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = partial7.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = partial7.toString(dateTimeFormatter9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial7.withChronologyRetainFields(chronology11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial7.isMatch((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime19 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        boolean boolean23 = partial15.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial25.plus(readablePeriod29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial25.withPeriodAdded(readablePeriod31, (int) (byte) 10);
        int int34 = partial20.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = partial33.isSupported(dateTimeFieldType35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (-1));
        boolean boolean40 = partial13.isMatch((org.joda.time.ReadablePartial) partial39);
        int[] intArray41 = partial39.getValues();
        int int42 = partial4.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial43.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial53.plus(readablePeriod57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial53.withPeriodAdded(readablePeriod59, (int) (byte) 10);
        int int62 = partial48.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.DateTime dateTime67 = partial63.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        java.lang.String str69 = partial63.toString("[]");
        boolean boolean70 = partial48.isBefore((org.joda.time.ReadablePartial) partial63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = null;
        java.lang.String str72 = partial63.toString(dateTimeFormatter71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial63.plus(readablePeriod73);
        boolean boolean75 = partial39.isAfter((org.joda.time.ReadablePartial) partial74);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = partial21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial21.toString(dateTimeFormatter25);
        boolean boolean28 = partial21.equals((java.lang.Object) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial21.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial21.minus(readablePeriod30);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(partial31);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial1.getFieldTypes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = partial8.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField13 = partial8.getField((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial24.without(dateTimeFieldType25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial24.withPeriodAdded(readablePeriod27, (int) (short) 100);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray33 = new int[] {};
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray33, chronology34);
        boolean boolean36 = partial30.isAfter((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeField[] dateTimeFieldArray37 = partial35.getFields();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        boolean boolean46 = partial38.isBefore((org.joda.time.ReadablePartial) partial43);
        java.lang.String str47 = partial38.toStringList();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial38.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial35.withPeriodAdded(readablePeriod55, (int) 'a');
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial58.withPeriodAdded(readablePeriod62, (int) (byte) 100);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial58.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        boolean boolean75 = partial70.equals((java.lang.Object) 10.0f);
        boolean boolean76 = partial58.isMatch((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology77 = partial58.getChronology();
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial58.minus(readablePeriod78);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray81 = new int[] {};
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray80, intArray81, chronology82);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = partial85.toDateTime(readableInstant86);
        org.joda.time.DateTime dateTime88 = partial84.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        int[] intArray89 = partial84.getValues();
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.Partial partial91 = new org.joda.time.Partial(dateTimeFieldTypeArray80, intArray89, chronology90);
        boolean boolean92 = partial79.equals((java.lang.Object) partial91);
        boolean boolean93 = partial35.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.ReadablePeriod readablePeriod94 = null;
        org.joda.time.Partial partial95 = partial79.minus(readablePeriod94);
        int int96 = partial29.compareTo((org.joda.time.ReadablePartial) partial79);
        org.joda.time.ReadablePeriod readablePeriod97 = null;
        org.joda.time.Partial partial98 = partial29.minus(readablePeriod97);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter99 = partial98.getFormatter();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(partial95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(partial98);
        org.junit.Assert.assertNull(dateTimeFormatter99);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray41 = new int[] {};
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray41, chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial43.toString(dateTimeFormatter44);
        boolean boolean46 = partial18.isBefore((org.joda.time.ReadablePartial) partial43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField48 = partial18.getField(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray23 = new int[] {};
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray23, chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray31 = partial26.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray31, chronology32);
        boolean boolean34 = partial21.equals((java.lang.Object) partial33);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = partial33.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray37 = new int[] {};
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray37, chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime44 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        int[] intArray45 = partial40.getValues();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        java.lang.String str53 = partial49.toString();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial54.isBefore((org.joda.time.ReadablePartial) partial59);
        int[] intArray63 = partial54.getValues();
        boolean boolean64 = partial49.isEqual((org.joda.time.ReadablePartial) partial54);
        int[] intArray65 = partial54.getValues();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = partial66.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = partial66.toString(dateTimeFormatter68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial66.withPeriodAdded(readablePeriod70, (int) (byte) 100);
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        boolean boolean75 = partial73.isBefore((org.joda.time.ReadablePartial) partial74);
        boolean boolean76 = partial66.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        boolean boolean79 = partial77.isBefore((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = partial78.withChronologyRetainFields(chronology80);
        boolean boolean83 = partial78.equals((java.lang.Object) 10.0f);
        boolean boolean84 = partial66.isMatch((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology85 = partial66.getChronology();
        org.joda.time.Partial partial86 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray65, chronology85);
        int int87 = partial86.size();
        boolean boolean88 = partial33.isAfter((org.joda.time.ReadablePartial) partial86);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial91 = partial86.withField(dateTimeFieldType89, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Partial partial5 = partial2.withPeriodAdded(readablePeriod3, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = partial5.toString(dateTimeFormatter6);
        java.lang.String str8 = partial5.toStringList();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial11.withChronologyRetainFields(chronology15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial17.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial17.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial17.withChronologyRetainFields(chronology21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial17.isMatch((org.joda.time.ReadablePartial) partial23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial28.plus(readablePeriod32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        java.lang.String str37 = partial34.toString();
        boolean boolean38 = partial28.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial34.toDateTime(readableInstant40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        boolean boolean49 = partial44.equals((java.lang.Object) 10.0f);
        int int50 = partial44.size();
        boolean boolean51 = partial34.isEqual((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.DateTime dateTime56 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean59 = partial16.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean60 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean61 = partial5.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial9.plus(readablePeriod62);
        int[] intArray64 = partial63.getValues();
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial68 = partial65.with(dateTimeFieldType66, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        boolean boolean6 = partial0.isAfter((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        java.lang.String str19 = partial16.toString();
        boolean boolean20 = partial10.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = partial21.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = partial21.toString(dateTimeFormatter23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial21.withPeriodAdded(readablePeriod25, (int) (byte) 100);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        boolean boolean31 = partial21.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        boolean boolean38 = partial33.equals((java.lang.Object) 10.0f);
        boolean boolean39 = partial21.isMatch((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology40 = partial21.getChronology();
        boolean boolean41 = partial10.isEqual((org.joda.time.ReadablePartial) partial21);
        boolean boolean42 = partial0.isEqual((org.joda.time.ReadablePartial) partial21);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial0.getFieldTypes();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial12.minus(readablePeriod32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        boolean boolean35 = partial33.isSupported(dateTimeFieldType34);
        org.joda.time.Chronology chronology36 = partial33.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial33.toString(dateTimeFormatter37);
        boolean boolean40 = partial33.equals((java.lang.Object) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = partial33.getFieldTypes();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial42.isBefore((org.joda.time.ReadablePartial) partial47);
        int[] intArray51 = partial42.getValues();
        org.joda.time.Partial partial52 = new org.joda.time.Partial(dateTimeFieldTypeArray41, intArray51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray11, intArray51);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        java.lang.String str19 = partial16.toString();
        boolean boolean20 = partial10.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial22.plus(readablePeriod26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        java.lang.String str31 = partial28.toString();
        boolean boolean32 = partial22.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial33.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (int) (byte) 100);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial33.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = partial45.withChronologyRetainFields(chronology47);
        boolean boolean50 = partial45.equals((java.lang.Object) 10.0f);
        boolean boolean51 = partial33.isMatch((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology52 = partial33.getChronology();
        boolean boolean53 = partial22.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean54 = partial16.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean55 = partial8.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial33.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial33.plus(readablePeriod57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial60.withChronologyRetainFields(chronology62);
        java.lang.String str64 = partial60.toString();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = partial66.toDateTime(readableInstant67);
        org.joda.time.DateTime dateTime69 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial70.isBefore((org.joda.time.ReadablePartial) partial71);
        boolean boolean73 = partial65.isBefore((org.joda.time.ReadablePartial) partial70);
        int[] intArray74 = partial65.getValues();
        boolean boolean75 = partial60.isEqual((org.joda.time.ReadablePartial) partial65);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial78 = partial60.withPeriodAdded(readablePeriod76, (int) (short) 100);
        java.lang.String str79 = partial60.toStringList();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        boolean boolean82 = partial80.isBefore((org.joda.time.ReadablePartial) partial81);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = partial81.withChronologyRetainFields(chronology83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial86 = partial81.plus(readablePeriod85);
        boolean boolean87 = partial60.equals((java.lang.Object) readablePeriod85);
        boolean boolean88 = partial58.isEqual((org.joda.time.ReadablePartial) partial60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType90 = partial58.getFieldType(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[]" + "'", str79, "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(partial86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = partial8.getFields();
        java.util.Locale locale13 = null;
        java.lang.String str14 = partial8.toString("[]", locale13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial8);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial15.toString("[]", locale17);
        int[] intArray19 = partial15.getValues();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = partial18.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        org.joda.time.Partial partial21 = partial18.without(dateTimeFieldType20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = partial18.getValue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(partial21);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = partial4.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray7 = new int[] {};
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial(dateTimeFieldTypeArray6, intArray7, chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial9.toString(dateTimeFormatter10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial9.minus(readablePeriod12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial15.withChronologyRetainFields(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial15.plus(readablePeriod19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial15.withPeriodAdded(readablePeriod21, (int) (byte) 10);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial23.withPeriodAdded(readablePeriod30, (int) ' ');
        org.joda.time.Chronology chronology33 = partial32.getChronology();
        org.joda.time.Partial partial34 = partial13.withChronologyRetainFields(chronology33);
        org.joda.time.Partial partial35 = partial4.withChronologyRetainFields(chronology33);
        java.lang.String str36 = partial35.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = partial35.getFormatter();
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter37);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        java.lang.String str17 = partial14.toString();
        boolean boolean18 = partial8.isAfter((org.joda.time.ReadablePartial) partial14);
        boolean boolean19 = partial0.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = partial14.indexOf(dateTimeFieldType20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial25 = partial14.withField(dateTimeFieldType23, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        int int22 = partial18.size();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial24.withPeriodAdded(readablePeriod30, (int) (byte) 10);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial32.withPeriodAdded(readablePeriod39, (int) ' ');
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        boolean boolean45 = partial41.equals((java.lang.Object) boolean44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial47.plus(readablePeriod51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        java.lang.String str56 = partial53.toString();
        boolean boolean57 = partial47.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime61 = partial53.toDateTime(readableInstant59);
        boolean boolean62 = partial41.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime70 = partial66.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean71 = partial63.isAfter((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial72 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial63);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial72.minus(readablePeriod73);
        boolean boolean75 = partial41.isEqual((org.joda.time.ReadablePartial) partial72);
        boolean boolean76 = partial18.equals((java.lang.Object) partial41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray77 = partial18.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray77);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        java.lang.String str17 = partial14.toString();
        boolean boolean18 = partial8.isAfter((org.joda.time.ReadablePartial) partial14);
        boolean boolean19 = partial6.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology20 = partial14.getChronology();
        java.lang.String str21 = partial14.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial14.getFieldTypes();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        java.lang.String str26 = partial23.toString();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        java.lang.String str32 = partial28.toString();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        boolean boolean41 = partial33.isBefore((org.joda.time.ReadablePartial) partial38);
        int[] intArray42 = partial33.getValues();
        boolean boolean43 = partial28.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial28.withPeriodAdded(readablePeriod44, (int) (short) 100);
        boolean boolean47 = partial23.isEqual((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        org.joda.time.Partial partial49 = partial28.without(dateTimeFieldType48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial49.withPeriodAdded(readablePeriod50, (int) '#');
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        boolean boolean61 = partial53.isBefore((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = partial63.withChronologyRetainFields(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial63.plus(readablePeriod67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial71 = partial63.withPeriodAdded(readablePeriod69, (int) (byte) 10);
        int int72 = partial58.compareTo((org.joda.time.ReadablePartial) partial71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = null;
        boolean boolean74 = partial71.isSupported(dateTimeFieldType73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial71.withPeriodAdded(readablePeriod75, (-1));
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial77.minus(readablePeriod78);
        org.joda.time.DateTimeField[] dateTimeFieldArray80 = partial77.getFields();
        boolean boolean81 = partial52.isBefore((org.joda.time.ReadablePartial) partial77);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        org.joda.time.Partial partial83 = partial52.without(dateTimeFieldType82);
        boolean boolean84 = partial14.isEqual((org.joda.time.ReadablePartial) partial52);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTimeFieldArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial18.withChronologyRetainFields(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial18.plus(readablePeriod22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial18.withPeriodAdded(readablePeriod24, (int) (byte) 10);
        int int27 = partial13.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = partial26.isSupported(dateTimeFieldType28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial26.withPeriodAdded(readablePeriod30, (-1));
        boolean boolean33 = partial6.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = partial32.getFields();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial35.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial35.withPeriodAdded(readablePeriod39, (int) (byte) 100);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        boolean boolean45 = partial35.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial35.withPeriodAdded(readablePeriod46, 0);
        boolean boolean49 = partial32.equals((java.lang.Object) 0);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial50.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial50.withChronologyRetainFields(chronology54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial50.isMatch((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial58.withChronologyRetainFields(chronology62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial58.isMatch((org.joda.time.ReadablePartial) partial64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial64.toString(dateTimeFormatter66);
        boolean boolean68 = partial50.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial70.plus(readablePeriod74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial78 = partial70.withPeriodAdded(readablePeriod76, (int) (byte) 10);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = partial80.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime83 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime84 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial78.withPeriodAdded(readablePeriod85, (int) ' ');
        org.joda.time.Chronology chronology88 = partial87.getChronology();
        org.joda.time.Partial partial89 = partial50.withChronologyRetainFields(chronology88);
        org.joda.time.Partial partial90 = partial32.withChronologyRetainFields(chronology88);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = null;
        org.joda.time.Partial partial92 = partial32.without(dateTimeFieldType91);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(dateTimeFormatter51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertNotNull(partial92);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        boolean boolean77 = partial43.isSupported(dateTimeFieldType76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial43.plus(readablePeriod78);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(partial79);
    }
}


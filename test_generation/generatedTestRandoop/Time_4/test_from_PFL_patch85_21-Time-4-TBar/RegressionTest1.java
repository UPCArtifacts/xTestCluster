import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        java.lang.String str22 = partial19.toString();
        boolean boolean23 = partial13.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial24.toString(dateTimeFormatter26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial24.withPeriodAdded(readablePeriod28, (int) (byte) 100);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        boolean boolean34 = partial24.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = partial36.withChronologyRetainFields(chronology38);
        boolean boolean41 = partial36.equals((java.lang.Object) 10.0f);
        boolean boolean42 = partial24.isMatch((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology43 = partial24.getChronology();
        boolean boolean44 = partial13.isEqual((org.joda.time.ReadablePartial) partial24);
        boolean boolean45 = partial7.isEqual((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = partial24.indexOf(dateTimeFieldType46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial24.plus(readablePeriod48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial51.plus(readablePeriod55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial59 = partial51.withPeriodAdded(readablePeriod57, (int) (byte) 10);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.DateTime dateTime64 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime65 = partial59.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial59.withPeriodAdded(readablePeriod66, (int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = partial68.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        org.joda.time.Partial partial71 = partial68.without(dateTimeFieldType70);
        boolean boolean72 = partial24.isMatch((org.joda.time.ReadablePartial) partial71);
        int int73 = partial71.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        java.util.Locale locale77 = null;
        java.lang.String str78 = partial43.toString("[]", locale77);
        int[] intArray79 = partial43.getValues();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        java.lang.String str11 = partial9.toStringList();
        java.lang.String str12 = partial9.toString();
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = partial9.isMatch(readablePartial13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial34.size();
        boolean boolean36 = partial18.isMatch((org.joda.time.ReadablePartial) partial34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial18.toString(dateTimeFormatter37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = partial18.indexOf(dateTimeFieldType39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = partial18.indexOf(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial25.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        int int35 = partial7.compareTo((org.joda.time.ReadablePartial) partial25);
        java.lang.String str37 = partial25.toString("[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        boolean boolean12 = partial2.isMatch((org.joda.time.ReadablePartial) partial11);
        boolean boolean14 = partial11.equals((java.lang.Object) 10);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = partial15.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = partial15.toString(dateTimeFormatter17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial15.withChronologyRetainFields(chronology19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial15.isMatch((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = partial23.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial23.withChronologyRetainFields(chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial23.isMatch((org.joda.time.ReadablePartial) partial29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = partial29.toString(dateTimeFormatter31);
        boolean boolean33 = partial15.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial35.plus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial35.withPeriodAdded(readablePeriod41, (int) (byte) 10);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime48 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial43.withPeriodAdded(readablePeriod50, (int) ' ');
        org.joda.time.Chronology chronology53 = partial52.getChronology();
        org.joda.time.Partial partial54 = partial15.withChronologyRetainFields(chronology53);
        org.joda.time.Partial partial55 = partial11.withChronologyRetainFields(chronology53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial56 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 100, chronology53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial55);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial2.withPeriodAdded(readablePeriod6, (int) (byte) 100);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        boolean boolean12 = partial2.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial14.withChronologyRetainFields(chronology16);
        boolean boolean19 = partial14.equals((java.lang.Object) 10.0f);
        boolean boolean20 = partial2.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology21 = partial2.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial22 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 10, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        java.lang.String str11 = partial0.toString("[]");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = partial0.isSupported(dateTimeFieldType13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial0.minus(readablePeriod15);
        org.joda.time.DurationFieldType durationFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial19 = partial16.withFieldAddWrapped(durationFieldType17, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        java.lang.String str11 = partial0.toString("[]");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = partial0.isSupported(dateTimeFieldType13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = partial0.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        java.lang.String str16 = partial9.toStringList();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial17.isAfter((org.joda.time.ReadablePartial) partial20);
        boolean boolean26 = partial9.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial17.toString(dateTimeFormatter27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = partial17.get(dateTimeFieldType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial2.isBefore((org.joda.time.ReadablePartial) partial7);
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = partial7.getChronology();
        org.joda.time.Partial partial13 = partial0.withChronologyRetainFields(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType15 = partial0.getFieldType((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(partial13);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial18.toString(dateTimeFormatter19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial22.plus(readablePeriod26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        java.lang.String str31 = partial28.toString();
        boolean boolean32 = partial22.isAfter((org.joda.time.ReadablePartial) partial28);
        boolean boolean34 = partial28.equals((java.lang.Object) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        int int36 = partial28.indexOf(dateTimeFieldType35);
        boolean boolean37 = partial18.isEqual((org.joda.time.ReadablePartial) partial28);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial15.withChronologyRetainFields(chronology17);
        java.lang.String str19 = partial15.toString();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        boolean boolean28 = partial20.isBefore((org.joda.time.ReadablePartial) partial25);
        int[] intArray29 = partial20.getValues();
        boolean boolean30 = partial15.isEqual((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial15.withPeriodAdded(readablePeriod31, (int) (short) 100);
        boolean boolean34 = partial0.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = partial33.isSupported(dateTimeFieldType35);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        int[] intArray12 = partial5.getValues();
        boolean boolean13 = partial4.isMatch((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial16 = partial5.withField(dateTimeFieldType14, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        int[] intArray10 = partial9.getValues();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial12.plus(readablePeriod16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial20 = partial12.withPeriodAdded(readablePeriod18, (int) (byte) 10);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial20.withPeriodAdded(readablePeriod27, (int) ' ');
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial29.equals((java.lang.Object) boolean32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial35.plus(readablePeriod39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        java.lang.String str44 = partial41.toString();
        boolean boolean45 = partial35.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime49 = partial41.toDateTime(readableInstant47);
        boolean boolean50 = partial29.isAfter((org.joda.time.ReadablePartial) partial41);
        java.util.Locale locale52 = null;
        java.lang.String str53 = partial29.toString("[]", locale52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial55.withChronologyRetainFields(chronology57);
        java.lang.String str59 = partial55.toString();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.DateTime dateTime64 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial60.isBefore((org.joda.time.ReadablePartial) partial65);
        int[] intArray69 = partial60.getValues();
        boolean boolean70 = partial55.isEqual((org.joda.time.ReadablePartial) partial60);
        java.lang.String str71 = partial55.toStringList();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        boolean boolean74 = partial72.isBefore((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = partial73.withChronologyRetainFields(chronology75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial73.plus(readablePeriod77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial81 = partial73.withPeriodAdded(readablePeriod79, (int) (byte) 10);
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = partial83.toDateTime(readableInstant84);
        org.joda.time.DateTime dateTime86 = partial82.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime87 = partial81.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime88 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime89 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        boolean boolean90 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType92 = partial9.getFieldType((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial3.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial3.minus(readablePeriod6);
        java.lang.String str8 = partial3.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial11 = partial3.with(dateTimeFieldType9, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        java.lang.String str3 = partial0.toString();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        boolean boolean6 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = partial5.withChronologyRetainFields(chronology7);
        java.lang.String str9 = partial5.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        int[] intArray19 = partial10.getValues();
        boolean boolean20 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial5.withPeriodAdded(readablePeriod21, (int) (short) 100);
        boolean boolean24 = partial0.isEqual((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray26 = new int[] {};
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray26, chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        int[] intArray34 = partial29.getValues();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray34, chronology35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray38);
        org.joda.time.Partial partial42 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        org.joda.time.Partial partial44 = partial41.without(dateTimeFieldType43);
        boolean boolean45 = partial5.equals((java.lang.Object) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial48 = partial5.withField(dateTimeFieldType46, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial51.plus(readablePeriod55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        java.lang.String str60 = partial57.toString();
        boolean boolean61 = partial51.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial57.toDateTime(readableInstant63);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial66.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial67.withChronologyRetainFields(chronology69);
        boolean boolean72 = partial67.equals((java.lang.Object) 10.0f);
        int int73 = partial67.size();
        boolean boolean74 = partial57.isEqual((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = partial75.isAfter((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Partial partial84 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial75);
        int int85 = partial57.compareTo((org.joda.time.ReadablePartial) partial75);
        boolean boolean86 = partial47.isEqual((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeField[] dateTimeFieldArray87 = partial47.getFields();
        org.joda.time.Partial partial88 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        int int90 = partial47.indexOf(dateTimeFieldType89);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        boolean boolean19 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        boolean boolean39 = partial31.isBefore((org.joda.time.ReadablePartial) partial36);
        java.lang.String str40 = partial31.toStringList();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = partial31.isMatch((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean48 = partial10.isMatch((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = partial10.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray50 = partial10.getFields();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(dateTimeFieldArray50);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial21 = partial13.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial21.withPeriodAdded(readablePeriod28, (int) ' ');
        org.joda.time.Chronology chronology31 = partial30.getChronology();
        int[] intArray32 = partial30.getValues();
        boolean boolean33 = partial7.isEqual((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray35 = new int[] {};
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(dateTimeFieldTypeArray34, intArray35, chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial37.withPeriodAdded(readablePeriod38, (int) (short) 100);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial7.plus(readablePeriod48);
        java.util.Locale locale51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = partial49.toString("hi!", locale51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(partial49);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        int int20 = partial16.size();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        java.lang.String str24 = partial21.toString();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        java.lang.String str30 = partial26.toString();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        boolean boolean39 = partial31.isBefore((org.joda.time.ReadablePartial) partial36);
        int[] intArray40 = partial31.getValues();
        boolean boolean41 = partial26.isEqual((org.joda.time.ReadablePartial) partial31);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial44 = partial26.withPeriodAdded(readablePeriod42, (int) (short) 100);
        boolean boolean45 = partial21.isEqual((org.joda.time.ReadablePartial) partial26);
        boolean boolean46 = partial16.isAfter((org.joda.time.ReadablePartial) partial21);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = partial21.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        int int22 = partial18.size();
        int int23 = partial18.size();
        java.util.Locale locale25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = partial18.toString("", locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology29);
        java.lang.String str33 = partial31.toString("[]");
        java.lang.String str34 = partial31.toStringList();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = partial1.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = partial1.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = partial1.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial40.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial53 = partial40.withPeriodAdded(readablePeriod51, 0);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial67 = partial54.withPeriodAdded(readablePeriod65, 0);
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        boolean boolean70 = partial68.isBefore((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = partial69.withChronologyRetainFields(chronology71);
        java.lang.String str73 = partial69.toString();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.DateTime dateTime78 = partial74.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        boolean boolean81 = partial79.isBefore((org.joda.time.ReadablePartial) partial80);
        boolean boolean82 = partial74.isBefore((org.joda.time.ReadablePartial) partial79);
        int[] intArray83 = partial74.getValues();
        boolean boolean84 = partial69.isEqual((org.joda.time.ReadablePartial) partial74);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial69.withPeriodAdded(readablePeriod85, (int) (short) 100);
        boolean boolean88 = partial54.isEqual((org.joda.time.ReadablePartial) partial87);
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.DateTime dateTime90 = partial54.toDateTime(readableInstant89);
        org.joda.time.DateTime dateTime91 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        boolean boolean92 = partial19.isMatch((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.ReadablePeriod readablePeriod93 = null;
        org.joda.time.Partial partial94 = partial19.minus(readablePeriod93);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = partial19.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(partial94);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial21 = partial13.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial21.withPeriodAdded(readablePeriod28, (int) ' ');
        org.joda.time.Chronology chronology31 = partial30.getChronology();
        int[] intArray32 = partial30.getValues();
        boolean boolean33 = partial7.isEqual((org.joda.time.ReadablePartial) partial30);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial30.plus(readablePeriod34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        java.lang.Object obj37 = null;
        boolean boolean38 = partial35.equals(obj37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial39.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial49.plus(readablePeriod53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial49.withPeriodAdded(readablePeriod55, (int) (byte) 10);
        int int58 = partial44.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = partial57.isSupported(dateTimeFieldType59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial63 = partial57.withPeriodAdded(readablePeriod61, (-1));
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial63.minus(readablePeriod64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        org.joda.time.Partial partial67 = partial63.without(dateTimeFieldType66);
        boolean boolean68 = partial35.isEqual((org.joda.time.ReadablePartial) partial63);
        java.lang.String str69 = partial63.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial10.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial11.withChronologyRetainFields(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial11.plus(readablePeriod15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        java.lang.String str20 = partial17.toString();
        boolean boolean21 = partial11.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial17.toDateTime(readableInstant23);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial27.withChronologyRetainFields(chronology29);
        boolean boolean32 = partial27.equals((java.lang.Object) 10.0f);
        int int33 = partial27.size();
        boolean boolean34 = partial17.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        org.joda.time.Partial partial45 = partial42.without(dateTimeFieldType44);
        boolean boolean46 = partial6.isEqual((org.joda.time.ReadablePartial) partial42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = partial6.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray50 = new int[] {};
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(dateTimeFieldTypeArray49, intArray50, chronology51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial52.toString(dateTimeFormatter53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial52.minus(readablePeriod55);
        java.lang.String str57 = partial52.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        org.joda.time.Partial partial59 = partial52.without(dateTimeFieldType58);
        int int60 = partial6.compareTo((org.joda.time.ReadablePartial) partial52);
        int[] intArray61 = partial6.getValues();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] {};
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray5, chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        java.lang.String str16 = partial12.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial12.getFormatter();
        boolean boolean18 = partial10.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial12.plus(readablePeriod19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(partial20);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial5);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        java.lang.String str19 = partial16.toString();
        boolean boolean20 = partial10.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial22.plus(readablePeriod26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        java.lang.String str31 = partial28.toString();
        boolean boolean32 = partial22.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial33.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (int) (byte) 100);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial33.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = partial45.withChronologyRetainFields(chronology47);
        boolean boolean50 = partial45.equals((java.lang.Object) 10.0f);
        boolean boolean51 = partial33.isMatch((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology52 = partial33.getChronology();
        boolean boolean53 = partial22.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean54 = partial16.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean55 = partial8.isAfter((org.joda.time.ReadablePartial) partial33);
        java.lang.String str56 = partial33.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = partial1.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = partial1.get(dateTimeFieldType3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter2);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        int int14 = partial1.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial15.toString(dateTimeFormatter16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = partial15.isSupported(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean9 = partial3.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        int int29 = partial15.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = partial28.isSupported(dateTimeFieldType30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial28.withPeriodAdded(readablePeriod32, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        org.joda.time.Partial partial36 = partial34.without(dateTimeFieldType35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        java.lang.String str42 = partial38.toString();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial43.isBefore((org.joda.time.ReadablePartial) partial48);
        int[] intArray52 = partial43.getValues();
        boolean boolean53 = partial38.isEqual((org.joda.time.ReadablePartial) partial43);
        boolean boolean54 = partial34.isMatch((org.joda.time.ReadablePartial) partial38);
        boolean boolean55 = partial3.isMatch((org.joda.time.ReadablePartial) partial34);
        int[] intArray56 = partial3.getValues();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        int int11 = partial8.size();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial14 = partial8.withPeriodAdded(readablePeriod12, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = partial14.getValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(partial14);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial31.withChronologyRetainFields(chronology35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial31.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        boolean boolean59 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology60 = partial41.getChronology();
        org.joda.time.Partial partial61 = partial37.withChronologyRetainFields(chronology60);
        boolean boolean62 = partial6.equals((java.lang.Object) partial61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property64 = partial61.property(dateTimeFieldType63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = partial75.getValue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial21 = partial13.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial21.withPeriodAdded(readablePeriod28, (int) ' ');
        org.joda.time.Chronology chronology31 = partial30.getChronology();
        int[] intArray32 = partial30.getValues();
        boolean boolean33 = partial7.isEqual((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray35 = new int[] {};
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(dateTimeFieldTypeArray34, intArray35, chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial37.withPeriodAdded(readablePeriod38, (int) (short) 100);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = partial40.isMatch((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = partial7.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial7.withPeriodAdded(readablePeriod48, (int) (short) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray51 = partial7.getFields();
        org.joda.time.ReadablePartial readablePartial52 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = partial7.isMatch(readablePartial52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTimeFieldArray51);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, (int) '4', chronology2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        boolean boolean12 = partial4.isBefore((org.joda.time.ReadablePartial) partial9);
        int[] intArray13 = partial9.getValues();
        org.joda.time.Chronology chronology14 = partial9.getChronology();
        org.joda.time.Partial partial15 = partial2.withChronologyRetainFields(chronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldType0, (-1), chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(partial15);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial11 = partial8.withPeriodAdded(readablePeriod9, (int) (short) -1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial11);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.plus(readablePeriod10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial14 = partial11.with(dateTimeFieldType12, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial11);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        boolean boolean30 = partial24.isAfter((org.joda.time.ReadablePartial) partial29);
        int int31 = partial21.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        org.joda.time.Partial partial33 = partial24.without(dateTimeFieldType32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = partial33.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial33);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial0.minus(readablePeriod10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial0.toString(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property48 = partial43.property(dateTimeFieldType47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.DurationFieldType durationFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial17 = partial14.withFieldAddWrapped(durationFieldType15, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        java.lang.String str35 = partial32.toString();
        boolean boolean36 = partial26.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial37.withPeriodAdded(readablePeriod41, (int) (byte) 100);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial37.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        boolean boolean54 = partial49.equals((java.lang.Object) 10.0f);
        boolean boolean55 = partial37.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology56 = partial37.getChronology();
        boolean boolean57 = partial26.isEqual((org.joda.time.ReadablePartial) partial37);
        int int58 = partial24.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray60 = new int[] {};
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray60, chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = partial62.toString(dateTimeFormatter63);
        boolean boolean65 = partial24.isAfter((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial66.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial67.withChronologyRetainFields(chronology69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial72 = partial67.plus(readablePeriod71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial75 = partial67.withPeriodAdded(readablePeriod73, (int) (byte) 10);
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = partial77.toDateTime(readableInstant78);
        org.joda.time.DateTime dateTime80 = partial76.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime81 = partial75.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        java.lang.String str82 = partial75.toStringList();
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = partial83.toDateTime(readableInstant84);
        org.joda.time.Partial partial86 = new org.joda.time.Partial();
        org.joda.time.Partial partial87 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.DateTime dateTime89 = partial87.toDateTime(readableInstant88);
        org.joda.time.DateTime dateTime90 = partial86.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        boolean boolean91 = partial83.isAfter((org.joda.time.ReadablePartial) partial86);
        boolean boolean92 = partial75.isEqual((org.joda.time.ReadablePartial) partial83);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = null;
        java.lang.String str94 = partial83.toString(dateTimeFormatter93);
        int int95 = partial24.compareTo((org.joda.time.ReadablePartial) partial83);
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property97 = partial83.property(dateTimeFieldType96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[]" + "'", str82, "[]");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[]" + "'", str94, "[]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        int int14 = partial1.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType17 = partial1.getFieldType(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        org.joda.time.Partial partial15 = partial0.without(dateTimeFieldType14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = partial0.getFormatter();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNull(dateTimeFormatter16);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial8.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial16.withPeriodAdded(readablePeriod23, (int) ' ');
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial25.equals((java.lang.Object) boolean28);
        boolean boolean30 = partial1.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial31 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial31.withPeriodAdded(readablePeriod32, (int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial34.toString(dateTimeFormatter35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = partial34.getFieldTypes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        boolean boolean30 = partial24.isAfter((org.joda.time.ReadablePartial) partial29);
        int int31 = partial21.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DurationFieldType durationFieldType32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial34 = partial21.withFieldAdded(durationFieldType32, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial39.getFieldTypes();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial42.plus(readablePeriod46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial42.withPeriodAdded(readablePeriod48, (int) (byte) 10);
        boolean boolean51 = partial39.isMatch((org.joda.time.ReadablePartial) partial50);
        int int52 = partial50.size();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial2.withChronologyRetainFields(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        java.lang.String str28 = partial25.toString();
        boolean boolean29 = partial19.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial25.toDateTime(readableInstant31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        boolean boolean40 = partial35.equals((java.lang.Object) 10.0f);
        int int41 = partial35.size();
        boolean boolean42 = partial25.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean50 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean51 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str52 = partial0.toString();
        java.lang.String str53 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial0.withPeriodAdded(readablePeriod55, (int) '4');
        org.joda.time.Chronology chronology58 = partial57.getChronology();
        org.joda.time.ReadablePartial readablePartial59 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = partial57.isAfter(readablePartial59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(chronology58);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray23 = new int[] {};
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray23, chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray31 = partial26.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray31, chronology32);
        boolean boolean34 = partial21.equals((java.lang.Object) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray36 = new int[] {};
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldTypeArray35, intArray36, chronology37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        int[] intArray44 = partial39.getValues();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = new org.joda.time.Partial(dateTimeFieldTypeArray35, intArray44, chronology45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        java.lang.String str52 = partial48.toString();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        boolean boolean61 = partial53.isBefore((org.joda.time.ReadablePartial) partial58);
        int[] intArray62 = partial53.getValues();
        boolean boolean63 = partial48.isEqual((org.joda.time.ReadablePartial) partial53);
        int[] intArray64 = partial53.getValues();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = partial65.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = partial65.toString(dateTimeFormatter67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial71 = partial65.withPeriodAdded(readablePeriod69, (int) (byte) 100);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        boolean boolean74 = partial72.isBefore((org.joda.time.ReadablePartial) partial73);
        boolean boolean75 = partial65.isBefore((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        boolean boolean78 = partial76.isBefore((org.joda.time.ReadablePartial) partial77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = partial77.withChronologyRetainFields(chronology79);
        boolean boolean82 = partial77.equals((java.lang.Object) 10.0f);
        boolean boolean83 = partial65.isMatch((org.joda.time.ReadablePartial) partial77);
        org.joda.time.Chronology chronology84 = partial65.getChronology();
        org.joda.time.Partial partial85 = new org.joda.time.Partial(dateTimeFieldTypeArray35, intArray64, chronology84);
        org.joda.time.Partial partial86 = new org.joda.time.Partial(chronology84);
        boolean boolean87 = partial33.isMatch((org.joda.time.ReadablePartial) partial86);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int89 = partial86.get(dateTimeFieldType88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        int int22 = partial18.size();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial24.withPeriodAdded(readablePeriod30, (int) (byte) 10);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial32.withPeriodAdded(readablePeriod39, (int) ' ');
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        boolean boolean45 = partial41.equals((java.lang.Object) boolean44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields(chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial47.plus(readablePeriod51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        java.lang.String str56 = partial53.toString();
        boolean boolean57 = partial47.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime61 = partial53.toDateTime(readableInstant59);
        boolean boolean62 = partial41.isAfter((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime70 = partial66.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean71 = partial63.isAfter((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial72 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial63);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial72.minus(readablePeriod73);
        boolean boolean75 = partial41.isEqual((org.joda.time.ReadablePartial) partial72);
        boolean boolean76 = partial18.equals((java.lang.Object) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        boolean boolean78 = partial41.isSupported(dateTimeFieldType77);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = partial41.getValue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial19.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial19.toString(dateTimeFormatter21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial19.withChronologyRetainFields(chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial19.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial27.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial27.withChronologyRetainFields(chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial27.isMatch((org.joda.time.ReadablePartial) partial33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        boolean boolean37 = partial19.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial56 = partial47.withPeriodAdded(readablePeriod54, (int) ' ');
        org.joda.time.Chronology chronology57 = partial56.getChronology();
        org.joda.time.Partial partial58 = partial19.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial59 = partial10.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial60 = partial6.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = partial63.withChronologyRetainFields(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial63.plus(readablePeriod67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial71 = partial63.withPeriodAdded(readablePeriod69, (int) (byte) 10);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = partial73.toDateTime(readableInstant74);
        org.joda.time.DateTime dateTime76 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = partial71.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        java.lang.String str78 = partial71.toStringList();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = partial83.toDateTime(readableInstant84);
        org.joda.time.DateTime dateTime86 = partial82.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean87 = partial79.isAfter((org.joda.time.ReadablePartial) partial82);
        boolean boolean88 = partial71.isEqual((org.joda.time.ReadablePartial) partial79);
        int[] intArray89 = partial79.getValues();
        boolean boolean90 = partial61.isMatch((org.joda.time.ReadablePartial) partial79);
        java.lang.String str91 = partial79.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = partial79.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[]" + "'", str91, "[]");
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, 1, chronology2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        int[] intArray15 = partial9.getValues();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        int int14 = partial1.compareTo((org.joda.time.ReadablePartial) partial13);
        java.lang.String str15 = partial1.toStringList();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial1.plus(readablePeriod16);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial17);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial8.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial16.withPeriodAdded(readablePeriod23, (int) ' ');
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial25.equals((java.lang.Object) boolean28);
        boolean boolean30 = partial1.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial33 = partial1.with(dateTimeFieldType31, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = partial2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime5 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime6 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        int[] intArray7 = partial0.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = partial0.isSupported(dateTimeFieldType8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        org.joda.time.Partial partial18 = partial16.without(dateTimeFieldType17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        java.lang.String str24 = partial20.toString();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial25.isBefore((org.joda.time.ReadablePartial) partial30);
        int[] intArray34 = partial25.getValues();
        boolean boolean35 = partial20.isEqual((org.joda.time.ReadablePartial) partial25);
        java.lang.String str36 = partial20.toStringList();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial38.plus(readablePeriod42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial38.withPeriodAdded(readablePeriod44, (int) (byte) 10);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial18.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial58 = partial0.with(dateTimeFieldType56, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial22.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial32.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        int int41 = partial27.compareTo((org.joda.time.ReadablePartial) partial40);
        int int42 = partial21.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial45 = partial40.withPeriodAdded(readablePeriod43, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField47 = partial40.getField(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial45);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial53 = partial50.with(dateTimeFieldType51, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        java.lang.String str19 = partial16.toString();
        boolean boolean20 = partial10.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial22.plus(readablePeriod26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        java.lang.String str31 = partial28.toString();
        boolean boolean32 = partial22.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial33.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (int) (byte) 100);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial33.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = partial45.withChronologyRetainFields(chronology47);
        boolean boolean50 = partial45.equals((java.lang.Object) 10.0f);
        boolean boolean51 = partial33.isMatch((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology52 = partial33.getChronology();
        boolean boolean53 = partial22.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean54 = partial16.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean55 = partial8.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial33.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial33.plus(readablePeriod57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial60.withChronologyRetainFields(chronology62);
        java.lang.String str64 = partial60.toString();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = partial66.toDateTime(readableInstant67);
        org.joda.time.DateTime dateTime69 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial70.isBefore((org.joda.time.ReadablePartial) partial71);
        boolean boolean73 = partial65.isBefore((org.joda.time.ReadablePartial) partial70);
        int[] intArray74 = partial65.getValues();
        boolean boolean75 = partial60.isEqual((org.joda.time.ReadablePartial) partial65);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial78 = partial60.withPeriodAdded(readablePeriod76, (int) (short) 100);
        java.lang.String str79 = partial60.toStringList();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        boolean boolean82 = partial80.isBefore((org.joda.time.ReadablePartial) partial81);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = partial81.withChronologyRetainFields(chronology83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial86 = partial81.plus(readablePeriod85);
        boolean boolean87 = partial60.equals((java.lang.Object) readablePeriod85);
        boolean boolean88 = partial58.isEqual((org.joda.time.ReadablePartial) partial60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType90 = partial60.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[]" + "'", str79, "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(partial86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial6.plus(readablePeriod20);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = partial21.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial21.getFieldTypes();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        int[] intArray35 = partial30.getValues();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray35, chronology36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray39 = new int[] {};
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = new org.joda.time.Partial(dateTimeFieldTypeArray38, intArray39, chronology40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray39);
        org.joda.time.Partial partial43 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial42);
        boolean boolean44 = partial24.isAfter((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial45.isBefore((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial46.withChronologyRetainFields(chronology48);
        java.lang.String str50 = partial46.toString();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime55 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        boolean boolean59 = partial51.isBefore((org.joda.time.ReadablePartial) partial56);
        int[] intArray60 = partial51.getValues();
        boolean boolean61 = partial46.isEqual((org.joda.time.ReadablePartial) partial51);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial46.withPeriodAdded(readablePeriod62, (int) (short) 100);
        boolean boolean65 = partial42.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime70 = partial66.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean72 = partial21.isMatch((org.joda.time.ReadableInstant) dateTime70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = partial21.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial40.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime55 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        boolean boolean59 = partial51.isBefore((org.joda.time.ReadablePartial) partial56);
        java.lang.String str60 = partial51.toStringList();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = partial51.isMatch((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial40.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial19.isBefore((org.joda.time.ReadablePartial) partial69);
        java.lang.String str71 = partial69.toStringList();
        java.lang.Class<?> wildcardClass72 = partial69.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        int int20 = partial16.size();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        java.lang.String str24 = partial21.toString();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        java.lang.String str30 = partial26.toString();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        boolean boolean39 = partial31.isBefore((org.joda.time.ReadablePartial) partial36);
        int[] intArray40 = partial31.getValues();
        boolean boolean41 = partial26.isEqual((org.joda.time.ReadablePartial) partial31);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial44 = partial26.withPeriodAdded(readablePeriod42, (int) (short) 100);
        boolean boolean45 = partial21.isEqual((org.joda.time.ReadablePartial) partial26);
        boolean boolean46 = partial16.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property48 = partial21.property(dateTimeFieldType47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial21.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial21.getFieldTypes();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial24.toString(dateTimeFormatter26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial24.withPeriodAdded(readablePeriod28, (int) (byte) 100);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        boolean boolean34 = partial24.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = partial36.withChronologyRetainFields(chronology38);
        boolean boolean41 = partial36.equals((java.lang.Object) 10.0f);
        boolean boolean42 = partial24.isMatch((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology43 = partial24.getChronology();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial24.minus(readablePeriod44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = partial45.isSupported(dateTimeFieldType46);
        org.joda.time.Chronology chronology48 = partial45.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial(chronology48);
        org.joda.time.Partial partial50 = partial21.withChronologyRetainFields(chronology48);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(partial50);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial21.getFieldTypes();
        org.joda.time.Chronology chronology23 = partial21.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = partial21.get(dateTimeFieldType24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        java.lang.String str17 = partial1.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = partial1.get(dateTimeFieldType18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        int int9 = partial8.size();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = partial1.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray6 = new int[] {};
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray5, intArray6, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray6, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        boolean boolean17 = partial1.isMatch((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial1.without(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = partial19.indexOf(dateTimeFieldType20);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = partial19.getValue((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial28.plus(readablePeriod32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial28.withPeriodAdded(readablePeriod34, (int) (byte) 10);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial45 = partial36.withPeriodAdded(readablePeriod43, (int) ' ');
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial45.equals((java.lang.Object) boolean48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial51.plus(readablePeriod55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        java.lang.String str60 = partial57.toString();
        boolean boolean61 = partial51.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial57.toDateTime(readableInstant63);
        boolean boolean66 = partial45.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.DateTime dateTime74 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean75 = partial67.isAfter((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Partial partial76 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial67);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial76.minus(readablePeriod77);
        boolean boolean79 = partial45.isEqual((org.joda.time.ReadablePartial) partial76);
        int int80 = partial76.size();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology82 = partial81.getChronology();
        org.joda.time.Partial partial83 = partial76.withChronologyRetainFields(chronology82);
        org.joda.time.Partial partial84 = partial18.withChronologyRetainFields(chronology82);
        org.joda.time.DurationFieldType durationFieldType85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial87 = partial18.withFieldAddWrapped(durationFieldType85, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(partial84);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = partial18.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = partial18.toString(dateTimeFormatter20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial18.withChronologyRetainFields(chronology22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial18.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = partial24.toString(dateTimeFormatter26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial28.toString(dateTimeFormatter30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial28.withPeriodAdded(readablePeriod32, (int) (byte) 100);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial28.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        boolean boolean45 = partial40.equals((java.lang.Object) 10.0f);
        boolean boolean46 = partial28.isMatch((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology47 = partial28.getChronology();
        org.joda.time.Partial partial48 = partial24.withChronologyRetainFields(chronology47);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = partial49.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial49.toString(dateTimeFormatter51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial49.withChronologyRetainFields(chronology53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial49.isMatch((org.joda.time.ReadablePartial) partial55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = partial55.toString(dateTimeFormatter57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = partial59.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = null;
        java.lang.String str62 = partial59.toString(dateTimeFormatter61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial65 = partial59.withPeriodAdded(readablePeriod63, (int) (byte) 100);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial66.isBefore((org.joda.time.ReadablePartial) partial67);
        boolean boolean69 = partial59.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial70.isBefore((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = partial71.withChronologyRetainFields(chronology73);
        boolean boolean76 = partial71.equals((java.lang.Object) 10.0f);
        boolean boolean77 = partial59.isMatch((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology78 = partial59.getChronology();
        org.joda.time.Partial partial79 = partial55.withChronologyRetainFields(chronology78);
        boolean boolean80 = partial24.equals((java.lang.Object) partial79);
        org.joda.time.Chronology chronology81 = partial79.getChronology();
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial83 = partial79.plus(readablePeriod82);
        int int84 = partial17.compareTo((org.joda.time.ReadablePartial) partial83);
        java.util.Locale locale86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = partial17.toString("hi!", locale86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        boolean boolean19 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray21 = new int[] {};
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray21, chronology22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        int[] intArray29 = partial24.getValues();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray29, chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial33.plus(readablePeriod37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial33.withPeriodAdded(readablePeriod39, (int) (byte) 10);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial41.withPeriodAdded(readablePeriod48, (int) ' ');
        boolean boolean51 = partial31.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = partial41.indexOf(dateTimeFieldType52);
        boolean boolean54 = partial5.isEqual((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property56 = partial5.property(dateTimeFieldType55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial43.plus(readablePeriod44);
        int int46 = partial43.size();
        org.joda.time.DurationFieldType durationFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial49 = partial43.withFieldAdded(durationFieldType47, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = partial1.getFields();
        java.lang.String str5 = partial1.toString("[]");
        java.lang.String str6 = partial1.toStringList();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial34.size();
        boolean boolean36 = partial18.isMatch((org.joda.time.ReadablePartial) partial34);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = partial34.getValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray29 = new int[] {};
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray29, chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime36 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        int[] intArray37 = partial32.getValues();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray37, chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        java.lang.String str45 = partial41.toString();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        boolean boolean54 = partial46.isBefore((org.joda.time.ReadablePartial) partial51);
        int[] intArray55 = partial46.getValues();
        boolean boolean56 = partial41.isEqual((org.joda.time.ReadablePartial) partial46);
        int[] intArray57 = partial46.getValues();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial58.withPeriodAdded(readablePeriod62, (int) (byte) 100);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial58.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        boolean boolean75 = partial70.equals((java.lang.Object) 10.0f);
        boolean boolean76 = partial58.isMatch((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology77 = partial58.getChronology();
        org.joda.time.Partial partial78 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray57, chronology77);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = partial79.getFormatter();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = partial82.toDateTime(readableInstant83);
        org.joda.time.DateTime dateTime85 = partial81.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Partial partial86 = new org.joda.time.Partial();
        org.joda.time.Partial partial87 = new org.joda.time.Partial();
        boolean boolean88 = partial86.isBefore((org.joda.time.ReadablePartial) partial87);
        boolean boolean89 = partial81.isBefore((org.joda.time.ReadablePartial) partial86);
        int[] intArray90 = partial86.getValues();
        org.joda.time.Chronology chronology91 = partial86.getChronology();
        org.joda.time.Partial partial92 = partial79.withChronologyRetainFields(chronology91);
        org.joda.time.Partial partial93 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray57, chronology91);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = partial93.getFormatter();
        java.lang.String str96 = partial93.toString("[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertNull(dateTimeFormatter94);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[]" + "'", str96, "[]");
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray18 = new int[] {};
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray18, chronology19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray22 = new int[] {};
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray21, intArray22, chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray22, chronology26);
        java.lang.Class<?> wildcardClass28 = intArray22.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        int int9 = partial8.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        java.lang.String str4 = partial3.toString();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial3.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial9 = partial6.with(dateTimeFieldType7, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial6);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = partial6.getFieldTypes();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial3.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = partial3.isSupported(dateTimeFieldType10);
        java.lang.String str12 = partial3.toString();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial2.withPeriodAdded(readablePeriod6, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = partial8.toString(dateTimeFormatter9);
        int[] intArray11 = partial8.getValues();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial12.withChronologyRetainFields(chronology16);
        java.util.Locale locale19 = null;
        java.lang.String str20 = partial12.toString("[]", locale19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = partial21.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = partial21.toString(dateTimeFormatter23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = partial21.withChronologyRetainFields(chronology25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial21.isMatch((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = partial29.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = partial29.toString(dateTimeFormatter31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = partial29.withChronologyRetainFields(chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial29.isMatch((org.joda.time.ReadablePartial) partial35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial35.toString(dateTimeFormatter37);
        boolean boolean39 = partial21.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial41.plus(readablePeriod45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial41.withPeriodAdded(readablePeriod47, (int) (byte) 10);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime54 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime55 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial58 = partial49.withPeriodAdded(readablePeriod56, (int) ' ');
        org.joda.time.Chronology chronology59 = partial58.getChronology();
        org.joda.time.Partial partial60 = partial21.withChronologyRetainFields(chronology59);
        org.joda.time.Partial partial61 = partial12.withChronologyRetainFields(chronology59);
        org.joda.time.Partial partial62 = partial8.withChronologyRetainFields(chronology59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial63 = new org.joda.time.Partial(dateTimeFieldType0, 10, chronology59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(dateTimeFormatter30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(partial62);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = partial2.toDateTime(readableInstant3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = partial6.toDateTime(readableInstant7);
        org.joda.time.DateTime dateTime9 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        boolean boolean10 = partial2.isAfter((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = partial2.indexOf(dateTimeFieldType11);
        org.joda.time.Chronology chronology13 = partial2.getChronology();
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) -1, chronology13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = partial0.indexOf(dateTimeFieldType11);
        java.lang.String str13 = partial0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = partial0.isSupported(dateTimeFieldType14);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DurationFieldType durationFieldType7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial9 = partial6.withFieldAdded(durationFieldType7, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial31.withChronologyRetainFields(chronology35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial31.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        boolean boolean59 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology60 = partial41.getChronology();
        org.joda.time.Partial partial61 = partial37.withChronologyRetainFields(chronology60);
        boolean boolean62 = partial6.equals((java.lang.Object) partial61);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = partial6.getValue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        int[] intArray20 = partial6.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial23 = partial6.with(dateTimeFieldType21, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        org.joda.time.Partial partial15 = partial0.without(dateTimeFieldType14);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = partial0.getFields();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        boolean boolean4 = partial2.isBefore((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = partial3.withChronologyRetainFields(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        java.lang.String str19 = partial16.toString();
        boolean boolean20 = partial10.isAfter((org.joda.time.ReadablePartial) partial16);
        boolean boolean21 = partial8.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology22 = partial16.getChronology();
        org.joda.time.Partial partial23 = new org.joda.time.Partial(chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldType0, (int) '#', chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial8.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial16.withPeriodAdded(readablePeriod23, (int) ' ');
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial25.equals((java.lang.Object) boolean28);
        boolean boolean30 = partial1.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial31 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial31.withPeriodAdded(readablePeriod32, (int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial34.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial34.withPeriodAdded(readablePeriod37, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial39);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = partial19.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        int int22 = partial19.indexOf(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        int int53 = partial49.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = partial49.indexOf(dateTimeFieldType54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property57 = partial49.property(dateTimeFieldType56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        java.util.Locale locale77 = null;
        java.lang.String str78 = partial43.toString("[]", locale77);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray79 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray80 = new int[] {};
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = new org.joda.time.Partial(dateTimeFieldTypeArray79, intArray80, chronology81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial85 = partial82.withPeriodAdded(readablePeriod83, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.Partial partial87 = partial82.plus(readablePeriod86);
        boolean boolean88 = partial43.isBefore((org.joda.time.ReadablePartial) partial87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial91 = partial43.withField(dateTimeFieldType89, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial11.withChronologyRetainFields(chronology15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = partial11.toString("[]", locale18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType22 = partial0.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        int int14 = partial1.compareTo((org.joda.time.ReadablePartial) partial13);
        java.lang.String str15 = partial1.toStringList();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = partial34.isSupported(dateTimeFieldType36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial34.withPeriodAdded(readablePeriod38, (-1));
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial42.plus(readablePeriod46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        java.lang.String str51 = partial48.toString();
        boolean boolean52 = partial42.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = partial53.toString(dateTimeFormatter55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial59 = partial53.withPeriodAdded(readablePeriod57, (int) (byte) 100);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        boolean boolean62 = partial60.isBefore((org.joda.time.ReadablePartial) partial61);
        boolean boolean63 = partial53.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial65.withChronologyRetainFields(chronology67);
        boolean boolean70 = partial65.equals((java.lang.Object) 10.0f);
        boolean boolean71 = partial53.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology72 = partial53.getChronology();
        boolean boolean73 = partial42.isEqual((org.joda.time.ReadablePartial) partial53);
        int int74 = partial40.compareTo((org.joda.time.ReadablePartial) partial53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray75 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray76 = new int[] {};
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = new org.joda.time.Partial(dateTimeFieldTypeArray75, intArray76, chronology77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = partial78.toString(dateTimeFormatter79);
        boolean boolean81 = partial40.isAfter((org.joda.time.ReadablePartial) partial78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = partial40.getFormatter();
        int int83 = partial1.compareTo((org.joda.time.ReadablePartial) partial40);
        int int84 = partial40.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray75);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(dateTimeFormatter82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        java.lang.String str35 = partial32.toString();
        boolean boolean36 = partial26.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial37.withPeriodAdded(readablePeriod41, (int) (byte) 100);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial37.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        boolean boolean54 = partial49.equals((java.lang.Object) 10.0f);
        boolean boolean55 = partial37.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology56 = partial37.getChronology();
        boolean boolean57 = partial26.isEqual((org.joda.time.ReadablePartial) partial37);
        int int58 = partial24.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray60 = new int[] {};
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray60, chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = partial62.toString(dateTimeFormatter63);
        boolean boolean65 = partial24.isAfter((org.joda.time.ReadablePartial) partial62);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = partial24.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = partial24.toString(dateTimeFormatter67);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = partial69.toDateTime(readableInstant70);
        boolean boolean73 = partial69.equals((java.lang.Object) 'a');
        boolean boolean74 = partial24.isBefore((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        boolean boolean77 = partial75.isBefore((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = partial76.withChronologyRetainFields(chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial81 = partial76.plus(readablePeriod80);
        boolean boolean82 = partial24.isAfter((org.joda.time.ReadablePartial) partial81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField84 = partial24.getField((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(dateTimeFormatter66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        int[] intArray53 = partial48.getValues();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray53, chronology54);
        boolean boolean56 = partial43.isMatch((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = partial55.indexOf(dateTimeFieldType57);
        boolean boolean59 = partial34.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = partial34.indexOf(dateTimeFieldType60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial64 = partial34.withField(dateTimeFieldType62, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial8.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial16.withPeriodAdded(readablePeriod23, (int) ' ');
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial25.equals((java.lang.Object) boolean28);
        boolean boolean30 = partial1.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial31 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField33 = partial25.getField((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial34.plus(readablePeriod37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial34.toString(dateTimeFormatter39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial34.isSupported(dateTimeFieldType41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial34.plus(readablePeriod43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial45.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = partial45.indexOf(dateTimeFieldType54);
        org.joda.time.Chronology chronology56 = partial45.getChronology();
        org.joda.time.Partial partial57 = partial44.withChronologyRetainFields(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial44.minus(readablePeriod58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.DateTime dateTime64 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial60.isMatch((org.joda.time.ReadablePartial) partial69);
        boolean boolean72 = partial69.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial69.plus(readablePeriod73);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray75 = partial69.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray76 = partial69.getFields();
        boolean boolean77 = partial59.isEqual((org.joda.time.ReadablePartial) partial69);
        org.joda.time.ReadablePartial readablePartial78 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = partial59.isMatch(readablePartial78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray75);
        org.junit.Assert.assertNotNull(dateTimeFieldArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        int int7 = partial1.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = partial1.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray10 = new int[] {};
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray10, chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial12.withPeriodAdded(readablePeriod13, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial12.plus(readablePeriod16);
        boolean boolean18 = partial1.isEqual((org.joda.time.ReadablePartial) partial17);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = partial1.getValue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray23 = new int[] {};
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray23, chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray31 = partial26.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray31, chronology32);
        boolean boolean34 = partial21.equals((java.lang.Object) partial33);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = partial33.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray37 = new int[] {};
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray37, chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime44 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        int[] intArray45 = partial40.getValues();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        java.lang.String str53 = partial49.toString();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial54.isBefore((org.joda.time.ReadablePartial) partial59);
        int[] intArray63 = partial54.getValues();
        boolean boolean64 = partial49.isEqual((org.joda.time.ReadablePartial) partial54);
        int[] intArray65 = partial54.getValues();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = partial66.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = partial66.toString(dateTimeFormatter68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial66.withPeriodAdded(readablePeriod70, (int) (byte) 100);
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        boolean boolean75 = partial73.isBefore((org.joda.time.ReadablePartial) partial74);
        boolean boolean76 = partial66.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        boolean boolean79 = partial77.isBefore((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = partial78.withChronologyRetainFields(chronology80);
        boolean boolean83 = partial78.equals((java.lang.Object) 10.0f);
        boolean boolean84 = partial66.isMatch((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology85 = partial66.getChronology();
        org.joda.time.Partial partial86 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray65, chronology85);
        int int87 = partial86.size();
        boolean boolean88 = partial33.isAfter((org.joda.time.ReadablePartial) partial86);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial91 = partial86.with(dateTimeFieldType89, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        boolean boolean32 = partial1.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial12.minus(readablePeriod33);
        org.joda.time.DurationFieldType durationFieldType35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial37 = partial12.withFieldAdded(durationFieldType35, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(partial34);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial24.without(dateTimeFieldType25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial24.withPeriodAdded(readablePeriod27, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = partial24.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        java.lang.String str29 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        int int32 = partial0.indexOf(dateTimeFieldType31);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        boolean boolean32 = partial1.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial12.minus(readablePeriod33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial35.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology44 = partial35.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial(chronology44);
        org.joda.time.Partial partial46 = partial34.withChronologyRetainFields(chronology44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = partial46.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial46);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        java.lang.String str29 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial0.getFieldTypes();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial31.withPeriodAdded(readablePeriod35, (int) (byte) 100);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        boolean boolean41 = partial31.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial43.withChronologyRetainFields(chronology45);
        boolean boolean48 = partial43.equals((java.lang.Object) 10.0f);
        boolean boolean49 = partial31.isMatch((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology50 = partial31.getChronology();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial31.minus(readablePeriod51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = null;
        boolean boolean54 = partial52.isSupported(dateTimeFieldType53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = partial55.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray58 = new int[] {};
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(dateTimeFieldTypeArray57, intArray58, chronology59);
        boolean boolean61 = partial55.isAfter((org.joda.time.ReadablePartial) partial60);
        int int62 = partial52.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        org.joda.time.Partial partial64 = partial55.without(dateTimeFieldType63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial64.plus(readablePeriod65);
        int[] intArray67 = partial64.getValues();
        org.joda.time.Partial partial68 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray67);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.DateTimeField[] dateTimeFieldArray72 = partial70.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray74 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray75 = new int[] {};
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(dateTimeFieldTypeArray74, intArray75, chronology76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray73, intArray75, chronology78);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = partial81.toDateTime(readableInstant82);
        org.joda.time.DateTime dateTime84 = partial80.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        boolean boolean86 = partial70.isMatch((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime87 = partial68.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray72);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial27.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int[] intArray40 = partial35.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray40, chronology41);
        boolean boolean43 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial30.plus(readablePeriod44);
        boolean boolean46 = partial21.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray48 = new int[] {};
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray47, intArray48, chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial53 = partial50.withPeriodAdded(readablePeriod51, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray55 = new int[] {};
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray55, chronology56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime62 = partial58.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        int[] intArray63 = partial58.getValues();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray63, chronology64);
        boolean boolean66 = partial53.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial65.getChronology();
        boolean boolean68 = partial45.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = partial45.toString(dateTimeFormatter69);
        int int71 = partial45.size();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = partial72.getFormatter();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.DateTime dateTime78 = partial74.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        boolean boolean81 = partial79.isBefore((org.joda.time.ReadablePartial) partial80);
        boolean boolean82 = partial74.isBefore((org.joda.time.ReadablePartial) partial79);
        int[] intArray83 = partial79.getValues();
        org.joda.time.Chronology chronology84 = partial79.getChronology();
        org.joda.time.Partial partial85 = partial72.withChronologyRetainFields(chronology84);
        org.joda.time.Partial partial86 = new org.joda.time.Partial(chronology84);
        org.joda.time.Partial partial87 = partial45.withChronologyRetainFields(chronology84);
        java.lang.Class<?> wildcardClass88 = chronology84.getClass();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        java.lang.String str24 = partial20.toString();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial25.isBefore((org.joda.time.ReadablePartial) partial30);
        int[] intArray34 = partial25.getValues();
        boolean boolean35 = partial20.isEqual((org.joda.time.ReadablePartial) partial25);
        java.lang.String str36 = partial20.toStringList();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial38.plus(readablePeriod42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial38.withPeriodAdded(readablePeriod44, (int) (byte) 10);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial0.plus(readablePeriod55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = partial0.isSupported(dateTimeFieldType57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial60.withChronologyRetainFields(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial60.plus(readablePeriod64);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray67 = new int[] {};
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(dateTimeFieldTypeArray66, intArray67, chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial69.withPeriodAdded(readablePeriod70, (int) (short) 100);
        int int73 = partial60.compareTo((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Partial partial74 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = null;
        java.lang.String str76 = partial74.toString(dateTimeFormatter75);
        boolean boolean77 = partial0.isAfter((org.joda.time.ReadablePartial) partial74);
        int[] intArray78 = partial0.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial81 = partial0.withField(dateTimeFieldType79, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial18.indexOf(dateTimeFieldType25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = partial18.indexOf(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        java.util.Locale locale32 = null;
        java.lang.String str33 = partial17.toString("[]", locale32);
        org.joda.time.Chronology chronology34 = partial17.getChronology();
        org.joda.time.Partial partial35 = new org.joda.time.Partial(chronology34);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        java.lang.String str13 = partial9.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = partial9.getFields();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial20 = partial16.withPeriodAdded(readablePeriod18, (int) '4');
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial20);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial19.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial19.toString(dateTimeFormatter21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial19.withChronologyRetainFields(chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial19.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial27.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial27.withChronologyRetainFields(chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial27.isMatch((org.joda.time.ReadablePartial) partial33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        boolean boolean37 = partial19.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial56 = partial47.withPeriodAdded(readablePeriod54, (int) ' ');
        org.joda.time.Chronology chronology57 = partial56.getChronology();
        org.joda.time.Partial partial58 = partial19.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial59 = partial10.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial60 = partial6.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = partial63.withChronologyRetainFields(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial63.plus(readablePeriod67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial71 = partial63.withPeriodAdded(readablePeriod69, (int) (byte) 10);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = partial73.toDateTime(readableInstant74);
        org.joda.time.DateTime dateTime76 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = partial71.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        java.lang.String str78 = partial71.toStringList();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = partial83.toDateTime(readableInstant84);
        org.joda.time.DateTime dateTime86 = partial82.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean87 = partial79.isAfter((org.joda.time.ReadablePartial) partial82);
        boolean boolean88 = partial71.isEqual((org.joda.time.ReadablePartial) partial79);
        int[] intArray89 = partial79.getValues();
        boolean boolean90 = partial61.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property92 = partial79.property(dateTimeFieldType91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        boolean boolean4 = partial2.isBefore((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = partial3.withChronologyRetainFields(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        java.lang.String str19 = partial16.toString();
        boolean boolean20 = partial10.isAfter((org.joda.time.ReadablePartial) partial16);
        boolean boolean21 = partial8.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology22 = partial16.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldType0, 0, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        java.lang.String str76 = partial43.toStringList();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = partial77.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = partial77.toString(dateTimeFormatter79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial83 = partial77.withPeriodAdded(readablePeriod81, (int) (byte) 100);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        boolean boolean86 = partial84.isBefore((org.joda.time.ReadablePartial) partial85);
        boolean boolean87 = partial77.isBefore((org.joda.time.ReadablePartial) partial85);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Partial partial90 = partial77.withPeriodAdded(readablePeriod88, 0);
        boolean boolean91 = partial43.isAfter((org.joda.time.ReadablePartial) partial77);
        org.joda.time.ReadablePartial readablePartial92 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = partial77.isBefore(readablePartial92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.ReadablePartial readablePartial19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = partial14.isEqual(readablePartial19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = partial11.getFields();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial11.withPeriodAdded(readablePeriod14, (int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial11.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray11, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial8.plus(readablePeriod23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial27 = partial8.with(dateTimeFieldType25, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial24);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] {};
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray5, chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        int[] intArray13 = partial8.getValues();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray13, chronology14);
        boolean boolean16 = partial3.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        int int18 = partial3.indexOf(dateTimeFieldType17);
        java.lang.Class<?> wildcardClass19 = partial3.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int int9 = partial0.size();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial10.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial16.toString(dateTimeFormatter18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.Partial partial40 = partial16.withChronologyRetainFields(chronology39);
        boolean boolean41 = partial0.isEqual((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial44 = partial40.withPeriodAdded(readablePeriod42, (int) (short) 100);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(partial44);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = partial7.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = partial7.toString(dateTimeFormatter9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial7.withChronologyRetainFields(chronology11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial7.isMatch((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime19 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        boolean boolean23 = partial15.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial25.plus(readablePeriod29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial25.withPeriodAdded(readablePeriod31, (int) (byte) 10);
        int int34 = partial20.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = partial33.isSupported(dateTimeFieldType35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (-1));
        boolean boolean40 = partial13.isMatch((org.joda.time.ReadablePartial) partial39);
        int[] intArray41 = partial39.getValues();
        int int42 = partial4.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = partial39.isSupported(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial20.minus(readablePeriod40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int[] intArray51 = partial46.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray51, chronology52);
        boolean boolean54 = partial41.equals((java.lang.Object) partial53);
        int int55 = partial19.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial41.plus(readablePeriod56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = partial59.withChronologyRetainFields(chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial59.plus(readablePeriod63);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        java.lang.String str68 = partial65.toString();
        boolean boolean69 = partial59.isAfter((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial70.isBefore((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = partial71.withChronologyRetainFields(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial71.plus(readablePeriod75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial79 = partial71.withPeriodAdded(readablePeriod77, (int) (byte) 10);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = partial81.toDateTime(readableInstant82);
        org.joda.time.DateTime dateTime84 = partial80.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.Partial partial88 = partial79.withPeriodAdded(readablePeriod86, (int) ' ');
        org.joda.time.Chronology chronology89 = partial88.getChronology();
        int[] intArray90 = partial88.getValues();
        boolean boolean91 = partial65.isEqual((org.joda.time.ReadablePartial) partial88);
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        org.joda.time.Partial partial93 = partial88.plus(readablePeriod92);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = partial93.getFormatter();
        boolean boolean95 = partial57.equals((java.lang.Object) dateTimeFormatter94);
        org.joda.time.ReadablePeriod readablePeriod96 = null;
        org.joda.time.Partial partial97 = partial57.minus(readablePeriod96);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertNull(dateTimeFormatter94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(partial97);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        boolean boolean32 = partial1.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        org.joda.time.Partial partial34 = partial12.without(dateTimeFieldType33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField36 = partial12.getField((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(partial34);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial31.withPeriodAdded(readablePeriod35, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = partial37.toString(dateTimeFormatter38);
        int[] intArray40 = partial37.getValues();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial41.withChronologyRetainFields(chronology45);
        java.util.Locale locale48 = null;
        java.lang.String str49 = partial41.toString("[]", locale48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial50.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial50.withChronologyRetainFields(chronology54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial50.isMatch((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial58.withChronologyRetainFields(chronology62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial58.isMatch((org.joda.time.ReadablePartial) partial64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial64.toString(dateTimeFormatter66);
        boolean boolean68 = partial50.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial70.plus(readablePeriod74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial78 = partial70.withPeriodAdded(readablePeriod76, (int) (byte) 10);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = partial80.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime83 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime84 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial78.withPeriodAdded(readablePeriod85, (int) ' ');
        org.joda.time.Chronology chronology88 = partial87.getChronology();
        org.joda.time.Partial partial89 = partial50.withChronologyRetainFields(chronology88);
        org.joda.time.Partial partial90 = partial41.withChronologyRetainFields(chronology88);
        org.joda.time.Partial partial91 = partial37.withChronologyRetainFields(chronology88);
        int int92 = partial6.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = partial6.getFormatter();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter93);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial19.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial19.toString(dateTimeFormatter21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial19.withChronologyRetainFields(chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial19.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial27.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial27.withChronologyRetainFields(chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial27.isMatch((org.joda.time.ReadablePartial) partial33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        boolean boolean37 = partial19.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial56 = partial47.withPeriodAdded(readablePeriod54, (int) ' ');
        org.joda.time.Chronology chronology57 = partial56.getChronology();
        org.joda.time.Partial partial58 = partial19.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial59 = partial10.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial60 = partial6.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = partial63.withChronologyRetainFields(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial63.plus(readablePeriod67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial71 = partial63.withPeriodAdded(readablePeriod69, (int) (byte) 10);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = partial73.toDateTime(readableInstant74);
        org.joda.time.DateTime dateTime76 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = partial71.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        java.lang.String str78 = partial71.toStringList();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = partial83.toDateTime(readableInstant84);
        org.joda.time.DateTime dateTime86 = partial82.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean87 = partial79.isAfter((org.joda.time.ReadablePartial) partial82);
        boolean boolean88 = partial71.isEqual((org.joda.time.ReadablePartial) partial79);
        int[] intArray89 = partial79.getValues();
        boolean boolean90 = partial61.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray91 = partial61.getFieldTypes();
        java.lang.String str92 = partial61.toString();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[]" + "'", str92, "[]");
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial34.plus(readablePeriod37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial34.toString(dateTimeFormatter39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial34.isSupported(dateTimeFieldType41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        int int44 = partial34.indexOf(dateTimeFieldType43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime51 = partial45.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = partial34.isMatch((org.joda.time.ReadableInstant) dateTime51);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] {};
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray5, chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial15.toString(dateTimeFormatter16);
        int[] intArray18 = partial15.getValues();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean27 = partial19.isAfter((org.joda.time.ReadablePartial) partial22);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = partial19.indexOf(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = partial19.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial(chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray18, chronology30);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial33.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial34.withChronologyRetainFields(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial34.plus(readablePeriod38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial42 = partial34.withPeriodAdded(readablePeriod40, (int) (byte) 10);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str49 = partial42.toStringList();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean59 = partial42.isEqual((org.joda.time.ReadablePartial) partial50);
        int[] intArray60 = partial50.getValues();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = partial61.getFormatter();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.DateTime dateTime67 = partial63.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        boolean boolean70 = partial68.isBefore((org.joda.time.ReadablePartial) partial69);
        boolean boolean71 = partial63.isBefore((org.joda.time.ReadablePartial) partial68);
        int[] intArray72 = partial68.getValues();
        org.joda.time.Chronology chronology73 = partial68.getChronology();
        org.joda.time.Partial partial74 = partial61.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray60, chronology73);
        org.joda.time.DurationFieldType durationFieldType76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial78 = partial75.withFieldAdded(durationFieldType76, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[]");
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray20 = new int[] {};
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(dateTimeFieldTypeArray19, intArray20, chronology21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray24 = new int[] {};
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray24, chronology25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray19, intArray24);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = partial31.withChronologyRetainFields(chronology33);
        java.lang.String str35 = partial31.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial31.getFormatter();
        boolean boolean37 = partial29.isMatch((org.joda.time.ReadablePartial) partial31);
        boolean boolean38 = partial12.equals((java.lang.Object) partial29);
        java.lang.Class<?> wildcardClass39 = partial12.getClass();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial51.plus(readablePeriod55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        java.lang.String str60 = partial57.toString();
        boolean boolean61 = partial51.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial57.toDateTime(readableInstant63);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial66.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial67.withChronologyRetainFields(chronology69);
        boolean boolean72 = partial67.equals((java.lang.Object) 10.0f);
        int int73 = partial67.size();
        boolean boolean74 = partial57.isEqual((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = partial75.isAfter((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Partial partial84 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial75);
        int int85 = partial57.compareTo((org.joda.time.ReadablePartial) partial75);
        boolean boolean86 = partial47.isEqual((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeField[] dateTimeFieldArray87 = partial47.getFields();
        org.joda.time.Partial partial88 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        java.lang.String str89 = partial88.toStringList();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "[]" + "'", str89, "[]");
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = partial19.getFormatter();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial33.isBefore((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial28.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial38.plus(readablePeriod42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial38.withPeriodAdded(readablePeriod44, (int) (byte) 10);
        int int47 = partial33.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = partial46.isSupported(dateTimeFieldType48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial46.withPeriodAdded(readablePeriod50, (-1));
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial52.minus(readablePeriod53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray56 = new int[] {};
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray56, chronology57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = partial60.toDateTime(readableInstant61);
        org.joda.time.DateTime dateTime63 = partial59.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        int[] intArray64 = partial59.getValues();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray64, chronology65);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        boolean boolean69 = partial67.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = partial68.withChronologyRetainFields(chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial73 = partial68.plus(readablePeriod72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial76 = partial68.withPeriodAdded(readablePeriod74, (int) (byte) 10);
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = partial78.toDateTime(readableInstant79);
        org.joda.time.DateTime dateTime81 = partial77.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime82 = partial76.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial85 = partial76.withPeriodAdded(readablePeriod83, (int) ' ');
        boolean boolean86 = partial66.isAfter((org.joda.time.ReadablePartial) partial76);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray87 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray88 = new int[] {};
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.Partial partial90 = new org.joda.time.Partial(dateTimeFieldTypeArray87, intArray88, chronology89);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        org.joda.time.Partial partial93 = partial90.withPeriodAdded(readablePeriod91, (int) (short) 100);
        org.joda.time.Chronology chronology94 = partial93.getChronology();
        org.joda.time.Partial partial95 = partial66.withChronologyRetainFields(chronology94);
        org.joda.time.Partial partial96 = partial52.withChronologyRetainFields(chronology94);
        org.joda.time.Partial partial97 = partial19.withChronologyRetainFields(chronology94);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[]");
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(partial95);
        org.junit.Assert.assertNotNull(partial96);
        org.junit.Assert.assertNotNull(partial97);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial31.withChronologyRetainFields(chronology35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial31.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        boolean boolean59 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology60 = partial41.getChronology();
        org.joda.time.Partial partial61 = partial37.withChronologyRetainFields(chronology60);
        boolean boolean62 = partial6.equals((java.lang.Object) partial61);
        org.joda.time.Chronology chronology63 = partial61.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray64 = partial61.getFieldTypes();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray64);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        int[] intArray10 = partial9.getValues();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial12.plus(readablePeriod16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial20 = partial12.withPeriodAdded(readablePeriod18, (int) (byte) 10);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial20.withPeriodAdded(readablePeriod27, (int) ' ');
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial29.equals((java.lang.Object) boolean32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial35.plus(readablePeriod39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        java.lang.String str44 = partial41.toString();
        boolean boolean45 = partial35.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime49 = partial41.toDateTime(readableInstant47);
        boolean boolean50 = partial29.isAfter((org.joda.time.ReadablePartial) partial41);
        java.util.Locale locale52 = null;
        java.lang.String str53 = partial29.toString("[]", locale52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial55.withChronologyRetainFields(chronology57);
        java.lang.String str59 = partial55.toString();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.DateTime dateTime64 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial60.isBefore((org.joda.time.ReadablePartial) partial65);
        int[] intArray69 = partial60.getValues();
        boolean boolean70 = partial55.isEqual((org.joda.time.ReadablePartial) partial60);
        java.lang.String str71 = partial55.toStringList();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        boolean boolean74 = partial72.isBefore((org.joda.time.ReadablePartial) partial73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = partial73.withChronologyRetainFields(chronology75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial73.plus(readablePeriod77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial81 = partial73.withPeriodAdded(readablePeriod79, (int) (byte) 10);
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = partial83.toDateTime(readableInstant84);
        org.joda.time.DateTime dateTime86 = partial82.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime87 = partial81.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime88 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime89 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        boolean boolean90 = partial9.isMatch((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial93 = partial9.with(dateTimeFieldType91, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial20.minus(readablePeriod40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int[] intArray51 = partial46.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray51, chronology52);
        boolean boolean54 = partial41.equals((java.lang.Object) partial53);
        int int55 = partial19.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial41.plus(readablePeriod56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial41.plus(readablePeriod58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        int int61 = partial59.indexOf(dateTimeFieldType60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial59.plus(readablePeriod62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.DateTimeField[] dateTimeFieldArray67 = partial65.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray70 = new int[] {};
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray70, chronology71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = new org.joda.time.Partial(dateTimeFieldTypeArray68, intArray70, chronology73);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        org.joda.time.DateTime dateTime79 = partial75.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime80 = partial74.toDateTime((org.joda.time.ReadableInstant) dateTime78);
        boolean boolean81 = partial65.isMatch((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean82 = partial63.isMatch((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int84 = partial63.get(dateTimeFieldType83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial34.plus(readablePeriod37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial34.toString(dateTimeFormatter39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial34.isSupported(dateTimeFieldType41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial34.plus(readablePeriod43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial45.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = partial45.indexOf(dateTimeFieldType54);
        org.joda.time.Chronology chronology56 = partial45.getChronology();
        org.joda.time.Partial partial57 = partial44.withChronologyRetainFields(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial44.minus(readablePeriod58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.DateTime dateTime64 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial60.isMatch((org.joda.time.ReadablePartial) partial69);
        boolean boolean72 = partial69.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial69.plus(readablePeriod73);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray75 = partial69.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray76 = partial69.getFields();
        boolean boolean77 = partial59.isEqual((org.joda.time.ReadablePartial) partial69);
        int int78 = partial59.size();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray75);
        org.junit.Assert.assertNotNull(dateTimeFieldArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = partial6.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray9 = new int[] {};
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray9, chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial11.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial11.minus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial17.plus(readablePeriod21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial17.withPeriodAdded(readablePeriod23, (int) (byte) 10);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial25.withPeriodAdded(readablePeriod32, (int) ' ');
        org.joda.time.Chronology chronology35 = partial34.getChronology();
        org.joda.time.Partial partial36 = partial15.withChronologyRetainFields(chronology35);
        org.joda.time.Partial partial37 = partial6.withChronologyRetainFields(chronology35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldType0, (int) ' ', chronology35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial37);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = partial2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime5 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime6 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        int[] intArray7 = partial0.getValues();
        org.joda.time.Chronology chronology8 = partial0.getChronology();
        java.lang.String str10 = partial0.toString("[]");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = partial18.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial22 = partial18.withField(dateTimeFieldType20, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNull(dateTimeFormatter19);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        int int10 = partial6.size();
        int int11 = partial6.size();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial6.plus(readablePeriod12);
        org.joda.time.DurationFieldType durationFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial16 = partial6.withFieldAdded(durationFieldType14, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(partial13);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial1.minus(readablePeriod6);
        java.lang.String str9 = partial7.toString("[]");
        // The following exception was thrown during execution in test generation
        try {
            int int11 = partial7.getValue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial9.getFieldTypes();
        int int12 = partial9.size();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial21 = partial13.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial21.withPeriodAdded(readablePeriod28, (int) ' ');
        org.joda.time.Chronology chronology31 = partial30.getChronology();
        int[] intArray32 = partial30.getValues();
        boolean boolean33 = partial7.isEqual((org.joda.time.ReadablePartial) partial30);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial30.plus(readablePeriod34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = partial30.toString(dateTimeFormatter36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial40 = partial30.with(dateTimeFieldType38, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial40.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime55 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        boolean boolean59 = partial51.isBefore((org.joda.time.ReadablePartial) partial56);
        java.lang.String str60 = partial51.toStringList();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = partial51.isMatch((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial40.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial19.isBefore((org.joda.time.ReadablePartial) partial69);
        java.lang.String str71 = partial69.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray72 = partial69.getFields();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        boolean boolean75 = partial73.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial74.withChronologyRetainFields(chronology76);
        java.lang.String str78 = partial74.toString();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial81 = partial74.withPeriodAdded(readablePeriod79, (int) (short) 10);
        java.lang.String str82 = partial81.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray83 = partial81.getFieldTypes();
        boolean boolean84 = partial69.equals((java.lang.Object) dateTimeFieldTypeArray83);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[]" + "'", str82, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial11.withChronologyRetainFields(chronology15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = partial11.toString("[]", locale18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial11);
        int int21 = partial0.size();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = partial9.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray41 = new int[] {};
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray41, chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial43.toString(dateTimeFormatter44);
        boolean boolean46 = partial18.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial55.withChronologyRetainFields(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial55.plus(readablePeriod59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        java.lang.String str64 = partial61.toString();
        boolean boolean65 = partial55.isAfter((org.joda.time.ReadablePartial) partial61);
        boolean boolean66 = partial53.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = partial67.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = partial67.toString(dateTimeFormatter69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial73 = partial67.withPeriodAdded(readablePeriod71, (int) (byte) 100);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial67.isBefore((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        boolean boolean80 = partial78.isBefore((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial79.withChronologyRetainFields(chronology81);
        boolean boolean84 = partial79.equals((java.lang.Object) 10.0f);
        boolean boolean85 = partial67.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology86 = partial67.getChronology();
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Partial partial88 = partial67.minus(readablePeriod87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = partial88.isSupported(dateTimeFieldType89);
        org.joda.time.Chronology chronology91 = partial88.getChronology();
        org.joda.time.Partial partial92 = partial61.withChronologyRetainFields(chronology91);
        org.joda.time.Partial partial93 = partial43.withChronologyRetainFields(chronology91);
        java.lang.Class<?> wildcardClass94 = chronology91.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(dateTimeFormatter68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        java.lang.String str16 = partial12.toString();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial12.withPeriodAdded(readablePeriod17, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray22 = new int[] {};
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray21, intArray22, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray22, chronology25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        boolean boolean36 = partial0.equals((java.lang.Object) (short) 100);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        boolean boolean4 = partial2.isBefore((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = partial3.withChronologyRetainFields(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        java.lang.String str19 = partial16.toString();
        boolean boolean20 = partial10.isAfter((org.joda.time.ReadablePartial) partial16);
        boolean boolean21 = partial8.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology22 = partial16.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 10, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray18 = new int[] {};
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray18, chronology19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray22 = new int[] {};
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray21, intArray22, chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray22, chronology26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial27.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        int[] intArray38 = partial33.getValues();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray38, chronology39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        java.lang.String str46 = partial42.toString();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        boolean boolean55 = partial47.isBefore((org.joda.time.ReadablePartial) partial52);
        int[] intArray56 = partial47.getValues();
        boolean boolean57 = partial42.isEqual((org.joda.time.ReadablePartial) partial47);
        int[] intArray58 = partial47.getValues();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = partial59.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = null;
        java.lang.String str62 = partial59.toString(dateTimeFormatter61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial65 = partial59.withPeriodAdded(readablePeriod63, (int) (byte) 100);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial66.isBefore((org.joda.time.ReadablePartial) partial67);
        boolean boolean69 = partial59.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial70.isBefore((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = partial71.withChronologyRetainFields(chronology73);
        boolean boolean76 = partial71.equals((java.lang.Object) 10.0f);
        boolean boolean77 = partial59.isMatch((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology78 = partial59.getChronology();
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray58, chronology78);
        int[] intArray80 = partial79.getValues();
        org.joda.time.Partial partial81 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray80);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField32 = partial17.getField((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        java.util.Locale locale41 = null;
        java.lang.String str42 = partial18.toString("[]", locale41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        java.lang.String str48 = partial44.toString();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime53 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        boolean boolean57 = partial49.isBefore((org.joda.time.ReadablePartial) partial54);
        int[] intArray58 = partial49.getValues();
        boolean boolean59 = partial44.isEqual((org.joda.time.ReadablePartial) partial49);
        java.lang.String str60 = partial44.toStringList();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = partial62.withChronologyRetainFields(chronology64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial62.plus(readablePeriod66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial70 = partial62.withPeriodAdded(readablePeriod68, (int) (byte) 10);
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = partial72.toDateTime(readableInstant73);
        org.joda.time.DateTime dateTime75 = partial71.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime76 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime77 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime78 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        java.util.Locale locale80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = partial18.toString("hi!", locale80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial29.withPeriodAdded(readablePeriod30, (int) (short) 100);
        int int33 = partial20.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        boolean boolean35 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = partial37.getFields();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial41.plus(readablePeriod45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial41.withPeriodAdded(readablePeriod47, (int) (byte) 10);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime54 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime55 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial58 = partial49.withPeriodAdded(readablePeriod56, (int) ' ');
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial58.equals((java.lang.Object) boolean61);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial64.withChronologyRetainFields(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial64.plus(readablePeriod68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        java.lang.String str73 = partial70.toString();
        boolean boolean74 = partial64.isAfter((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.DateTime dateTime78 = partial70.toDateTime(readableInstant76);
        boolean boolean79 = partial58.isAfter((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = partial80.toDateTime(readableInstant81);
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = partial84.toDateTime(readableInstant85);
        org.joda.time.DateTime dateTime87 = partial83.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        boolean boolean88 = partial80.isAfter((org.joda.time.ReadablePartial) partial83);
        org.joda.time.Partial partial89 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial80);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.Partial partial91 = partial89.minus(readablePeriod90);
        boolean boolean92 = partial58.isEqual((org.joda.time.ReadablePartial) partial89);
        int int93 = partial89.size();
        org.joda.time.Partial partial94 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology95 = partial94.getChronology();
        org.joda.time.Partial partial96 = partial89.withChronologyRetainFields(chronology95);
        org.joda.time.Partial partial97 = partial37.withChronologyRetainFields(chronology95);
        org.joda.time.Partial partial98 = partial34.withChronologyRetainFields(chronology95);
        int[] intArray99 = partial34.getValues();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(partial96);
        org.junit.Assert.assertNotNull(partial97);
        org.junit.Assert.assertNotNull(partial98);
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[]");
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Partial partial4 = partial0.plus(readablePeriod3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial6.plus(readablePeriod10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        java.lang.String str22 = partial19.toString();
        boolean boolean23 = partial13.isAfter((org.joda.time.ReadablePartial) partial19);
        boolean boolean24 = partial11.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial25.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial25.toString(dateTimeFormatter27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial25.withPeriodAdded(readablePeriod29, (int) (byte) 100);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial25.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        boolean boolean42 = partial37.equals((java.lang.Object) 10.0f);
        boolean boolean43 = partial25.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology44 = partial25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial25.minus(readablePeriod45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = partial46.isSupported(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = partial46.getChronology();
        org.joda.time.Partial partial50 = partial19.withChronologyRetainFields(chronology49);
        boolean boolean51 = partial0.isEqual((org.joda.time.ReadablePartial) partial19);
        java.lang.String str52 = partial0.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial20.minus(readablePeriod40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int[] intArray51 = partial46.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray51, chronology52);
        boolean boolean54 = partial41.equals((java.lang.Object) partial53);
        int int55 = partial19.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial41.plus(readablePeriod56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial60 = partial41.withField(dateTimeFieldType58, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(partial57);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial34.plus(readablePeriod37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial34.toString(dateTimeFormatter39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial34.isSupported(dateTimeFieldType41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial34.plus(readablePeriod43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial45.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = partial45.indexOf(dateTimeFieldType54);
        org.joda.time.Chronology chronology56 = partial45.getChronology();
        org.joda.time.Partial partial57 = partial44.withChronologyRetainFields(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial44.minus(readablePeriod58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.DateTime dateTime64 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean70 = partial60.isMatch((org.joda.time.ReadablePartial) partial69);
        boolean boolean72 = partial69.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial69.plus(readablePeriod73);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray75 = partial69.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray76 = partial69.getFields();
        boolean boolean77 = partial59.isEqual((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        boolean boolean85 = partial83.isBefore((org.joda.time.ReadablePartial) partial84);
        boolean boolean86 = partial78.isBefore((org.joda.time.ReadablePartial) partial83);
        int[] intArray87 = partial78.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = partial78.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = partial78.getFormatter();
        boolean boolean90 = partial69.isEqual((org.joda.time.ReadablePartial) partial78);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray75);
        org.junit.Assert.assertNotNull(dateTimeFieldArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter88);
        org.junit.Assert.assertNull(dateTimeFormatter89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray41 = new int[] {};
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray41, chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial43.toString(dateTimeFormatter44);
        boolean boolean46 = partial18.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial55.withChronologyRetainFields(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial55.plus(readablePeriod59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        java.lang.String str64 = partial61.toString();
        boolean boolean65 = partial55.isAfter((org.joda.time.ReadablePartial) partial61);
        boolean boolean66 = partial53.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = partial67.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = partial67.toString(dateTimeFormatter69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial73 = partial67.withPeriodAdded(readablePeriod71, (int) (byte) 100);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial67.isBefore((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        boolean boolean80 = partial78.isBefore((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial79.withChronologyRetainFields(chronology81);
        boolean boolean84 = partial79.equals((java.lang.Object) 10.0f);
        boolean boolean85 = partial67.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology86 = partial67.getChronology();
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Partial partial88 = partial67.minus(readablePeriod87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = partial88.isSupported(dateTimeFieldType89);
        org.joda.time.Chronology chronology91 = partial88.getChronology();
        org.joda.time.Partial partial92 = partial61.withChronologyRetainFields(chronology91);
        org.joda.time.Partial partial93 = partial43.withChronologyRetainFields(chronology91);
        java.util.Locale locale95 = null;
        java.lang.String str96 = partial93.toString("[]", locale95);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(dateTimeFormatter68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[]" + "'", str96, "[]");
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property26 = partial7.property(dateTimeFieldType25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        int int7 = partial1.size();
        org.joda.time.DurationFieldType durationFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial10 = partial1.withFieldAddWrapped(durationFieldType8, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.Partial partial14 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType16 = partial13.getFieldType((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        boolean boolean3 = partial1.isBefore((org.joda.time.ReadablePartial) partial2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial2.withChronologyRetainFields(chronology4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial2.plus(readablePeriod6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        java.lang.String str11 = partial8.toString();
        boolean boolean12 = partial2.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial14.withChronologyRetainFields(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial19 = partial14.plus(readablePeriod18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial22 = partial14.withPeriodAdded(readablePeriod20, (int) (byte) 10);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime27 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial22.withPeriodAdded(readablePeriod29, (int) ' ');
        org.joda.time.Chronology chronology32 = partial31.getChronology();
        int[] intArray33 = partial31.getValues();
        boolean boolean34 = partial8.isEqual((org.joda.time.ReadablePartial) partial31);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial31.plus(readablePeriod35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = partial36.getFormatter();
        java.lang.Object obj38 = null;
        boolean boolean39 = partial36.equals(obj38);
        int[] intArray40 = partial36.getValues();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        boolean boolean59 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology60 = partial53.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray40, chronology60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Types array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        java.lang.String str16 = partial9.toStringList();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial17.isAfter((org.joda.time.ReadablePartial) partial20);
        boolean boolean26 = partial9.isEqual((org.joda.time.ReadablePartial) partial17);
        int[] intArray27 = partial17.getValues();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial28.toString(dateTimeFormatter30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial28.withChronologyRetainFields(chronology32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial28.isMatch((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = partial36.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = partial36.toString(dateTimeFormatter38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial36.withChronologyRetainFields(chronology40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial36.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial42.toString(dateTimeFormatter44);
        boolean boolean46 = partial28.isBefore((org.joda.time.ReadablePartial) partial42);
        int int47 = partial17.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        int int49 = partial28.indexOf(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(dateTimeFormatter37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray56 = new int[] {};
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray56, chronology57);
        boolean boolean59 = partial53.isAfter((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial53.getChronology();
        boolean boolean61 = partial18.equals((java.lang.Object) chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        org.joda.time.Partial partial63 = partial18.without(dateTimeFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property65 = partial18.property(dateTimeFieldType64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = partial14.getFields();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial16.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial16.toString(dateTimeFormatter18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial22 = partial16.withPeriodAdded(readablePeriod20, (int) (byte) 100);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial16.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        boolean boolean33 = partial28.equals((java.lang.Object) 10.0f);
        boolean boolean34 = partial16.isMatch((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = partial36.withChronologyRetainFields(chronology38);
        java.lang.String str40 = partial36.toString();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial41.isBefore((org.joda.time.ReadablePartial) partial46);
        int[] intArray50 = partial41.getValues();
        boolean boolean51 = partial36.isEqual((org.joda.time.ReadablePartial) partial41);
        java.lang.String str52 = partial36.toStringList();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = partial54.withChronologyRetainFields(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial54.plus(readablePeriod58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial62 = partial54.withPeriodAdded(readablePeriod60, (int) (byte) 10);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.DateTime dateTime67 = partial63.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime68 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime69 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean70 = partial16.isMatch((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime71 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        boolean boolean19 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray21 = new int[] {};
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray21, chronology22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        int[] intArray29 = partial24.getValues();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray29, chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial33.plus(readablePeriod37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial33.withPeriodAdded(readablePeriod39, (int) (byte) 10);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial41.withPeriodAdded(readablePeriod48, (int) ' ');
        boolean boolean51 = partial31.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = partial41.indexOf(dateTimeFieldType52);
        boolean boolean54 = partial5.isEqual((org.joda.time.ReadablePartial) partial41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = partial41.toString(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        java.lang.Class<?> wildcardClass10 = partial6.getClass();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = partial0.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial22 = partial18.withField(dateTimeFieldType20, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial8.withPeriodAdded(readablePeriod11, (int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial13.getFieldTypes();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = partial15.getFormatter();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial17.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial17.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial17.withChronologyRetainFields(chronology21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = partial23.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial23.withChronologyRetainFields(chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial23.isMatch((org.joda.time.ReadablePartial) partial29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = partial29.toString(dateTimeFormatter31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial33.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial34.withChronologyRetainFields(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial34.plus(readablePeriod38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        java.lang.String str43 = partial40.toString();
        boolean boolean44 = partial34.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime48 = partial40.toDateTime(readableInstant46);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial50.withChronologyRetainFields(chronology52);
        boolean boolean55 = partial50.equals((java.lang.Object) 10.0f);
        int int56 = partial50.size();
        boolean boolean57 = partial40.isEqual((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime62 = partial58.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime64 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean65 = partial22.isMatch((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean66 = partial15.isMatch((org.joda.time.ReadableInstant) dateTime61);
        int[] intArray67 = partial15.getValues();
        org.joda.time.Partial partial68 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial68.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        int int53 = partial49.size();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology55 = partial54.getChronology();
        org.joda.time.Partial partial56 = partial49.withChronologyRetainFields(chronology55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = partial49.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(partial56);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial9.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial22 = partial9.withPeriodAdded(readablePeriod20, 0);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = partial23.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial23.withPeriodAdded(readablePeriod27, (int) (byte) 100);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial23.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial23.withPeriodAdded(readablePeriod34, 0);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        java.lang.String str42 = partial38.toString();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial43.isBefore((org.joda.time.ReadablePartial) partial48);
        int[] intArray52 = partial43.getValues();
        boolean boolean53 = partial38.isEqual((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial56 = partial38.withPeriodAdded(readablePeriod54, (int) (short) 100);
        boolean boolean57 = partial23.isEqual((org.joda.time.ReadablePartial) partial56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial23.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime60 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean63 = partial8.equals((java.lang.Object) 'a');
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        int int10 = partial6.size();
        int int11 = partial6.size();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial6.plus(readablePeriod12);
        org.joda.time.DurationFieldType durationFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial16 = partial13.withFieldAdded(durationFieldType14, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(partial13);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = partial3.isSupported(dateTimeFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = partial3.getValue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = partial0.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial0.without(dateTimeFieldType23);
        java.util.Locale locale26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = partial0.toString("hi!", locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(partial24);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial3.toString(dateTimeFormatter4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        org.joda.time.Partial partial7 = partial3.without(dateTimeFieldType6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = partial3.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = partial3.getFieldType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter8);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        java.lang.String str18 = partial15.toString();
        boolean boolean19 = partial9.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = partial15.toDateTime(readableInstant21);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        boolean boolean30 = partial25.equals((java.lang.Object) 10.0f);
        int int31 = partial25.size();
        boolean boolean32 = partial15.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = partial0.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        java.lang.String str57 = partial54.toString();
        boolean boolean58 = partial48.isAfter((org.joda.time.ReadablePartial) partial54);
        boolean boolean59 = partial40.isEqual((org.joda.time.ReadablePartial) partial54);
        boolean boolean60 = partial25.isBefore((org.joda.time.ReadablePartial) partial54);
        java.lang.String str61 = partial25.toStringList();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology1 = partial0.getChronology();
        java.util.Locale locale3 = null;
        java.lang.String str4 = partial0.toString("[]", locale3);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = partial0.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        boolean boolean32 = partial1.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial12.minus(readablePeriod33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = partial34.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(partial34);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        boolean boolean32 = partial1.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial12.minus(readablePeriod33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = partial34.isSupported(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = partial2.toDateTime(readableInstant3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = partial6.toDateTime(readableInstant7);
        org.joda.time.DateTime dateTime9 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        boolean boolean10 = partial2.isAfter((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial11 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial2);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial2.minus(readablePeriod12);
        org.joda.time.Chronology chronology14 = partial2.getChronology();
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) -1, chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial0.plus(readablePeriod21);
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = partial22.toString("", locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial8.withPeriodAdded(readablePeriod11, (int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField17 = partial15.getField((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        int int53 = partial49.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int55 = partial49.get(dateTimeFieldType54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        int int20 = partial16.size();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        java.lang.String str24 = partial21.toString();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        java.lang.String str30 = partial26.toString();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        boolean boolean39 = partial31.isBefore((org.joda.time.ReadablePartial) partial36);
        int[] intArray40 = partial31.getValues();
        boolean boolean41 = partial26.isEqual((org.joda.time.ReadablePartial) partial31);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial44 = partial26.withPeriodAdded(readablePeriod42, (int) (short) 100);
        boolean boolean45 = partial21.isEqual((org.joda.time.ReadablePartial) partial26);
        boolean boolean46 = partial16.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = partial21.toString(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial19.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial19.toString(dateTimeFormatter21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial19.withChronologyRetainFields(chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial19.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial27.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial27.withChronologyRetainFields(chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial27.isMatch((org.joda.time.ReadablePartial) partial33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        boolean boolean37 = partial19.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial56 = partial47.withPeriodAdded(readablePeriod54, (int) ' ');
        org.joda.time.Chronology chronology57 = partial56.getChronology();
        org.joda.time.Partial partial58 = partial19.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial59 = partial10.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial60 = partial6.withChronologyRetainFields(chronology57);
        org.joda.time.Partial partial61 = new org.joda.time.Partial(chronology57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = partial63.withChronologyRetainFields(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial68 = partial63.plus(readablePeriod67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial71 = partial63.withPeriodAdded(readablePeriod69, (int) (byte) 10);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = partial73.toDateTime(readableInstant74);
        org.joda.time.DateTime dateTime76 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = partial71.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        java.lang.String str78 = partial71.toStringList();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = partial83.toDateTime(readableInstant84);
        org.joda.time.DateTime dateTime86 = partial82.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean87 = partial79.isAfter((org.joda.time.ReadablePartial) partial82);
        boolean boolean88 = partial71.isEqual((org.joda.time.ReadablePartial) partial79);
        int[] intArray89 = partial79.getValues();
        boolean boolean90 = partial61.isMatch((org.joda.time.ReadablePartial) partial79);
        java.lang.Class<?> wildcardClass91 = partial61.getClass();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        java.lang.Class<?> wildcardClass31 = partial6.getClass();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        boolean boolean12 = partial2.isMatch((org.joda.time.ReadablePartial) partial11);
        boolean boolean14 = partial11.equals((java.lang.Object) 10);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = partial15.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = partial15.toString(dateTimeFormatter17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial15.withChronologyRetainFields(chronology19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial15.isMatch((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = partial23.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial23.withChronologyRetainFields(chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial23.isMatch((org.joda.time.ReadablePartial) partial29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = partial29.toString(dateTimeFormatter31);
        boolean boolean33 = partial15.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial35.plus(readablePeriod39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial35.withPeriodAdded(readablePeriod41, (int) (byte) 10);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime48 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial43.withPeriodAdded(readablePeriod50, (int) ' ');
        org.joda.time.Chronology chronology53 = partial52.getChronology();
        org.joda.time.Partial partial54 = partial15.withChronologyRetainFields(chronology53);
        org.joda.time.Partial partial55 = partial11.withChronologyRetainFields(chronology53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial56 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 100, chronology53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial55);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial27.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int[] intArray40 = partial35.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray40, chronology41);
        boolean boolean43 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial30.plus(readablePeriod44);
        boolean boolean46 = partial21.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray48 = new int[] {};
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray47, intArray48, chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial53 = partial50.withPeriodAdded(readablePeriod51, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray55 = new int[] {};
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray55, chronology56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime62 = partial58.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        int[] intArray63 = partial58.getValues();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray63, chronology64);
        boolean boolean66 = partial53.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial65.getChronology();
        boolean boolean68 = partial45.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = partial45.toString(dateTimeFormatter69);
        int int71 = partial45.size();
        java.lang.Class<?> wildcardClass72 = partial45.getClass();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial8.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial16.withPeriodAdded(readablePeriod23, (int) ' ');
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial25.equals((java.lang.Object) boolean28);
        boolean boolean30 = partial1.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial31 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        java.lang.String str37 = partial33.toString();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial33.withPeriodAdded(readablePeriod38, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray41, intArray43, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial40.getFormatter();
        boolean boolean56 = partial25.isEqual((org.joda.time.ReadablePartial) partial40);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial51.plus(readablePeriod55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        java.lang.String str60 = partial57.toString();
        boolean boolean61 = partial51.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial57.toDateTime(readableInstant63);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial66.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial67.withChronologyRetainFields(chronology69);
        boolean boolean72 = partial67.equals((java.lang.Object) 10.0f);
        int int73 = partial67.size();
        boolean boolean74 = partial57.isEqual((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = partial75.isAfter((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Partial partial84 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial75);
        int int85 = partial57.compareTo((org.joda.time.ReadablePartial) partial75);
        boolean boolean86 = partial47.isEqual((org.joda.time.ReadablePartial) partial57);
        java.lang.Class<?> wildcardClass87 = partial47.getClass();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial24.without(dateTimeFieldType25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = partial26.isSupported(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        boolean boolean32 = partial1.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        org.joda.time.Partial partial34 = partial12.without(dateTimeFieldType33);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = partial12.getFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray18 = new int[] {};
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray18, chronology19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray22 = new int[] {};
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray21, intArray22, chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray22, chronology26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial27.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        int[] intArray38 = partial33.getValues();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray38, chronology39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial43.isBefore((org.joda.time.ReadablePartial) partial48);
        int[] intArray52 = partial48.getValues();
        org.joda.time.Chronology chronology53 = partial48.getChronology();
        org.joda.time.Partial partial54 = partial41.withChronologyRetainFields(chronology53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray38, chronology53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(partial54);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = null;
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray2 = new int[] {};
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray2, chronology3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = partial6.toDateTime(readableInstant7);
        org.joda.time.DateTime dateTime9 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        int[] intArray10 = partial5.getValues();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray10, chronology11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray14 = new int[] {};
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray14, chronology15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray14);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        java.lang.String str23 = partial19.toString();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial29.isBefore((org.joda.time.ReadablePartial) partial30);
        boolean boolean32 = partial24.isBefore((org.joda.time.ReadablePartial) partial29);
        int[] intArray33 = partial24.getValues();
        boolean boolean34 = partial19.isEqual((org.joda.time.ReadablePartial) partial24);
        int[] intArray35 = partial24.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray37 = new int[] {};
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray37, chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime44 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        int[] intArray45 = partial40.getValues();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial49.plus(readablePeriod53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial49.withPeriodAdded(readablePeriod55, (int) (byte) 10);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime62 = partial58.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = partial57.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial66 = partial57.withPeriodAdded(readablePeriod64, (int) ' ');
        boolean boolean67 = partial47.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray69 = new int[] {};
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray68, intArray69, chronology70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial74 = partial71.withPeriodAdded(readablePeriod72, (int) (short) 100);
        org.joda.time.Chronology chronology75 = partial74.getChronology();
        org.joda.time.Partial partial76 = partial47.withChronologyRetainFields(chronology75);
        org.joda.time.Partial partial77 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray35, chronology75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial78 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Types array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(partial76);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = partial2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime5 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime6 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        int[] intArray7 = partial0.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = partial0.isSupported(dateTimeFieldType8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = partial0.indexOf(dateTimeFieldType10);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = partial0.getValue((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        boolean boolean6 = partial0.isAfter((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = partial5.getFields();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        java.lang.String str17 = partial8.toStringList();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = partial8.isMatch((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial5.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial28.toString(dateTimeFormatter30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial28.withPeriodAdded(readablePeriod32, (int) (byte) 100);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial28.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        boolean boolean45 = partial40.equals((java.lang.Object) 10.0f);
        boolean boolean46 = partial28.isMatch((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology47 = partial28.getChronology();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial28.minus(readablePeriod48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray51 = new int[] {};
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray50, intArray51, chronology52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        int[] intArray59 = partial54.getValues();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldTypeArray50, intArray59, chronology60);
        boolean boolean62 = partial49.equals((java.lang.Object) partial61);
        boolean boolean63 = partial5.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.DurationFieldType durationFieldType64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial66 = partial5.withFieldAdded(durationFieldType64, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial39.getFieldTypes();
        int int41 = partial39.size();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial42.isBefore((org.joda.time.ReadablePartial) partial47);
        int[] intArray51 = partial42.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = partial42.getFormatter();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = partial53.toString(dateTimeFormatter55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial53.withChronologyRetainFields(chronology57);
        java.util.Locale locale60 = null;
        java.lang.String str61 = partial53.toString("[]", locale60);
        boolean boolean62 = partial42.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean63 = partial39.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial64 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial39);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        boolean boolean66 = partial39.isSupported(dateTimeFieldType65);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter52);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Chronology chronology7 = partial6.getChronology();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial6.minus(readablePeriod8);
        org.joda.time.Chronology chronology10 = partial6.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial2.withChronologyRetainFields(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        java.lang.String str28 = partial25.toString();
        boolean boolean29 = partial19.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial25.toDateTime(readableInstant31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        boolean boolean40 = partial35.equals((java.lang.Object) 10.0f);
        int int41 = partial35.size();
        boolean boolean42 = partial25.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean50 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean51 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str52 = partial0.toString();
        java.lang.String str53 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial0.withPeriodAdded(readablePeriod55, (int) '4');
        int int58 = partial57.size();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial13.withPeriodAdded(readablePeriod14, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray18 = new int[] {};
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray18, chronology19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int[] intArray26 = partial21.getValues();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray26, chronology27);
        boolean boolean29 = partial16.isMatch((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray32, chronology35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = partial16.isMatch((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean44 = partial0.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = partial0.toString(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial0.minus(readablePeriod10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial0.withPeriodAdded(readablePeriod13, (int) 'a');
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(partial15);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray18 = new int[] {};
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray18, chronology19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray22 = new int[] {};
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray21, intArray22, chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray22, chronology26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial27.getFieldTypes();
        java.lang.String str29 = partial27.toStringList();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        java.lang.String str35 = partial32.toString();
        boolean boolean36 = partial26.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial37.withPeriodAdded(readablePeriod41, (int) (byte) 100);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial37.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        boolean boolean54 = partial49.equals((java.lang.Object) 10.0f);
        boolean boolean55 = partial37.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology56 = partial37.getChronology();
        boolean boolean57 = partial26.isEqual((org.joda.time.ReadablePartial) partial37);
        int int58 = partial24.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray60 = new int[] {};
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray60, chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = partial62.toString(dateTimeFormatter63);
        boolean boolean65 = partial24.isAfter((org.joda.time.ReadablePartial) partial62);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        int int67 = partial62.indexOf(dateTimeFieldType66);
        java.lang.String str68 = partial62.toStringList();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial39.getFieldTypes();
        int int41 = partial39.size();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial42.isBefore((org.joda.time.ReadablePartial) partial47);
        int[] intArray51 = partial42.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = partial42.getFormatter();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = partial53.toString(dateTimeFormatter55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial53.withChronologyRetainFields(chronology57);
        java.util.Locale locale60 = null;
        java.lang.String str61 = partial53.toString("[]", locale60);
        boolean boolean62 = partial42.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean63 = partial39.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial64 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial39);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        int int66 = partial64.indexOf(dateTimeFieldType65);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter52);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial13.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = partial28.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.DurationFieldType durationFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial33 = partial30.withFieldAddWrapped(durationFieldType31, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        int int53 = partial49.size();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology55 = partial54.getChronology();
        org.joda.time.Partial partial56 = partial49.withChronologyRetainFields(chronology55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial49);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(partial56);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial22.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial32.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        int int41 = partial27.compareTo((org.joda.time.ReadablePartial) partial40);
        int int42 = partial21.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial45 = partial40.withPeriodAdded(readablePeriod43, (int) '#');
        int int46 = partial40.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType48 = partial40.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        boolean boolean12 = partial4.isBefore((org.joda.time.ReadablePartial) partial9);
        int[] intArray13 = partial9.getValues();
        org.joda.time.Chronology chronology14 = partial9.getChronology();
        org.joda.time.Partial partial15 = partial2.withChronologyRetainFields(chronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldType0, 100, chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(partial15);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray29 = new int[] {};
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray29, chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime36 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        int[] intArray37 = partial32.getValues();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray37, chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        java.lang.String str45 = partial41.toString();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        boolean boolean54 = partial46.isBefore((org.joda.time.ReadablePartial) partial51);
        int[] intArray55 = partial46.getValues();
        boolean boolean56 = partial41.isEqual((org.joda.time.ReadablePartial) partial46);
        int[] intArray57 = partial46.getValues();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial58.withPeriodAdded(readablePeriod62, (int) (byte) 100);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial58.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        boolean boolean75 = partial70.equals((java.lang.Object) 10.0f);
        boolean boolean76 = partial58.isMatch((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology77 = partial58.getChronology();
        org.joda.time.Partial partial78 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray57, chronology77);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = partial79.getFormatter();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = partial82.toDateTime(readableInstant83);
        org.joda.time.DateTime dateTime85 = partial81.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Partial partial86 = new org.joda.time.Partial();
        org.joda.time.Partial partial87 = new org.joda.time.Partial();
        boolean boolean88 = partial86.isBefore((org.joda.time.ReadablePartial) partial87);
        boolean boolean89 = partial81.isBefore((org.joda.time.ReadablePartial) partial86);
        int[] intArray90 = partial86.getValues();
        org.joda.time.Chronology chronology91 = partial86.getChronology();
        org.joda.time.Partial partial92 = partial79.withChronologyRetainFields(chronology91);
        org.joda.time.Partial partial93 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray57, chronology91);
        int[] intArray94 = partial93.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter95 = partial93.getFormatter();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[]");
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter95);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.minus(readablePeriod10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial14 = partial11.withPeriodAdded(readablePeriod12, 0);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial14);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial20.minus(readablePeriod40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray43 = new int[] {};
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray43, chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int[] intArray51 = partial46.getValues();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray42, intArray51, chronology52);
        boolean boolean54 = partial41.equals((java.lang.Object) partial53);
        int int55 = partial19.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial41.plus(readablePeriod56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial41.plus(readablePeriod58);
        java.util.Locale locale61 = null;
        java.lang.String str62 = partial41.toString("[]", locale61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int64 = partial41.get(dateTimeFieldType63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        java.lang.String str7 = partial4.toStringList();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial4.minus(readablePeriod8);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = partial4.getValue((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial9);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial0.minus(readablePeriod7);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = partial8.getFields();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        java.lang.String str18 = partial17.toStringList();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial9.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = partial9.getFormatter();
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial9);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property19 = partial9.property(dateTimeFieldType18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNull(dateTimeFormatter16);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        java.util.Locale locale7 = null;
        java.lang.String str8 = partial0.toString("[]", locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = partial0.toString(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean9 = partial3.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        int int29 = partial15.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = partial28.isSupported(dateTimeFieldType30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial28.withPeriodAdded(readablePeriod32, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        org.joda.time.Partial partial36 = partial34.without(dateTimeFieldType35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        java.lang.String str42 = partial38.toString();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial43.isBefore((org.joda.time.ReadablePartial) partial48);
        int[] intArray52 = partial43.getValues();
        boolean boolean53 = partial38.isEqual((org.joda.time.ReadablePartial) partial43);
        boolean boolean54 = partial34.isMatch((org.joda.time.ReadablePartial) partial38);
        boolean boolean55 = partial3.isMatch((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial58 = partial3.with(dateTimeFieldType56, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial28.plus(readablePeriod32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial28.withPeriodAdded(readablePeriod34, (int) (byte) 10);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial45 = partial36.withPeriodAdded(readablePeriod43, (int) ' ');
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial45.equals((java.lang.Object) boolean48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial51.plus(readablePeriod55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        java.lang.String str60 = partial57.toString();
        boolean boolean61 = partial51.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial57.toDateTime(readableInstant63);
        boolean boolean66 = partial45.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.DateTime dateTime74 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean75 = partial67.isAfter((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Partial partial76 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial67);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial76.minus(readablePeriod77);
        boolean boolean79 = partial45.isEqual((org.joda.time.ReadablePartial) partial76);
        int int80 = partial76.size();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology82 = partial81.getChronology();
        org.joda.time.Partial partial83 = partial76.withChronologyRetainFields(chronology82);
        org.joda.time.Partial partial84 = partial18.withChronologyRetainFields(chronology82);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = null;
        java.lang.String str86 = partial84.toString(dateTimeFormatter85);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[]" + "'", str86, "[]");
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray56 = new int[] {};
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray56, chronology57);
        boolean boolean59 = partial53.isAfter((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial53.getChronology();
        boolean boolean61 = partial18.equals((java.lang.Object) chronology60);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        int[] intArray67 = partial62.getValues();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        boolean boolean70 = partial68.isBefore((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = partial69.withChronologyRetainFields(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial69.plus(readablePeriod73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial69.withPeriodAdded(readablePeriod75, (int) (byte) 10);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime83 = partial77.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        java.lang.String str84 = partial77.toStringList();
        boolean boolean85 = partial62.isAfter((org.joda.time.ReadablePartial) partial77);
        boolean boolean86 = partial18.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Partial partial88 = partial18.minus(readablePeriod87);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[]" + "'", str84, "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(partial88);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology31 = partial17.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = partial17.getValue((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial19.minus(readablePeriod20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(partial21);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial0.getFormatter();
        int[] intArray4 = partial0.getValues();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray11, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = partial8.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial26 = partial8.withField(dateTimeFieldType24, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial21 = partial13.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial21.withPeriodAdded(readablePeriod28, (int) ' ');
        org.joda.time.Chronology chronology31 = partial30.getChronology();
        int[] intArray32 = partial30.getValues();
        boolean boolean33 = partial7.isEqual((org.joda.time.ReadablePartial) partial30);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial30.plus(readablePeriod34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType37 = partial35.getFieldType((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(partial35);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = partial18.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType22 = partial18.getFieldType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial10.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial11.withChronologyRetainFields(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial11.plus(readablePeriod15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        java.lang.String str20 = partial17.toString();
        boolean boolean21 = partial11.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial17.toDateTime(readableInstant23);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial27.withChronologyRetainFields(chronology29);
        boolean boolean32 = partial27.equals((java.lang.Object) 10.0f);
        int int33 = partial27.size();
        boolean boolean34 = partial17.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        org.joda.time.Partial partial45 = partial42.without(dateTimeFieldType44);
        boolean boolean46 = partial6.isEqual((org.joda.time.ReadablePartial) partial42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = partial6.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray50 = new int[] {};
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(dateTimeFieldTypeArray49, intArray50, chronology51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial52.toString(dateTimeFormatter53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial52.minus(readablePeriod55);
        java.lang.String str57 = partial52.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        org.joda.time.Partial partial59 = partial52.without(dateTimeFieldType58);
        int int60 = partial6.compareTo((org.joda.time.ReadablePartial) partial52);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = partial6.getValue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        int int7 = partial4.size();
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial2.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial12.plus(readablePeriod16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial20 = partial12.withPeriodAdded(readablePeriod18, (int) (byte) 10);
        int int21 = partial7.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial20.isSupported(dateTimeFieldType22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (-1));
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial28.plus(readablePeriod32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        java.lang.String str37 = partial34.toString();
        boolean boolean38 = partial28.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = partial39.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = partial39.toString(dateTimeFormatter41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial45 = partial39.withPeriodAdded(readablePeriod43, (int) (byte) 100);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial39.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        boolean boolean56 = partial51.equals((java.lang.Object) 10.0f);
        boolean boolean57 = partial39.isMatch((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology58 = partial39.getChronology();
        boolean boolean59 = partial28.isEqual((org.joda.time.ReadablePartial) partial39);
        int int60 = partial26.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology61 = partial39.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 1, chronology61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(dateTimeFormatter40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology61);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        java.util.Locale locale7 = null;
        java.lang.String str8 = partial0.toString("[]", locale7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial9.withChronologyRetainFields(chronology13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial9.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial17.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial17.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial17.withChronologyRetainFields(chronology21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial17.isMatch((org.joda.time.ReadablePartial) partial23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        boolean boolean27 = partial9.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial29.withChronologyRetainFields(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial29.plus(readablePeriod33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial29.withPeriodAdded(readablePeriod35, (int) (byte) 10);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial37.withPeriodAdded(readablePeriod44, (int) ' ');
        org.joda.time.Chronology chronology47 = partial46.getChronology();
        org.joda.time.Partial partial48 = partial9.withChronologyRetainFields(chronology47);
        org.joda.time.Partial partial49 = partial0.withChronologyRetainFields(chronology47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        boolean boolean56 = partial51.equals((java.lang.Object) 10.0f);
        int int57 = partial51.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray59 = new int[] {};
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldTypeArray58, intArray59, chronology60);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        int[] intArray67 = partial62.getValues();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(dateTimeFieldTypeArray58, intArray67, chronology68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial70.isBefore((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Partial partial74 = partial71.withChronologyRetainFields(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial76 = partial71.plus(readablePeriod75);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial79 = partial71.withPeriodAdded(readablePeriod77, (int) (byte) 10);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = partial81.toDateTime(readableInstant82);
        org.joda.time.DateTime dateTime84 = partial80.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        org.joda.time.Partial partial88 = partial79.withPeriodAdded(readablePeriod86, (int) ' ');
        boolean boolean89 = partial69.isAfter((org.joda.time.ReadablePartial) partial79);
        int int90 = partial51.compareTo((org.joda.time.ReadablePartial) partial69);
        boolean boolean91 = partial49.isEqual((org.joda.time.ReadablePartial) partial51);
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        org.joda.time.Partial partial93 = partial51.plus(readablePeriod92);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(partial93);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        java.lang.String str76 = partial43.toStringList();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = partial77.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = partial77.toString(dateTimeFormatter79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial83 = partial77.withPeriodAdded(readablePeriod81, (int) (byte) 100);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        boolean boolean86 = partial84.isBefore((org.joda.time.ReadablePartial) partial85);
        boolean boolean87 = partial77.isBefore((org.joda.time.ReadablePartial) partial85);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Partial partial90 = partial77.withPeriodAdded(readablePeriod88, 0);
        boolean boolean91 = partial43.isAfter((org.joda.time.ReadablePartial) partial77);
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        org.joda.time.Partial partial93 = partial43.plus(readablePeriod92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType95 = partial43.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(partial93);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial11.withChronologyRetainFields(chronology15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = partial11.toString("[]", locale18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = partial0.isSupported(dateTimeFieldType21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType24 = partial0.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial39.getFieldTypes();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial42.plus(readablePeriod46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial42.withPeriodAdded(readablePeriod48, (int) (byte) 10);
        boolean boolean51 = partial39.isMatch((org.joda.time.ReadablePartial) partial50);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = partial50.getValue(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Chronology chronology19 = partial18.getChronology();
        int[] intArray20 = partial18.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        org.joda.time.Partial partial22 = partial18.without(dateTimeFieldType21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property24 = partial18.property(dateTimeFieldType23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(partial22);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Partial partial4 = partial0.plus(readablePeriod3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial6.plus(readablePeriod10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        java.lang.String str22 = partial19.toString();
        boolean boolean23 = partial13.isAfter((org.joda.time.ReadablePartial) partial19);
        boolean boolean24 = partial11.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial25.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial25.toString(dateTimeFormatter27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial25.withPeriodAdded(readablePeriod29, (int) (byte) 100);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial25.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        boolean boolean42 = partial37.equals((java.lang.Object) 10.0f);
        boolean boolean43 = partial25.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology44 = partial25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial25.minus(readablePeriod45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = partial46.isSupported(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = partial46.getChronology();
        org.joda.time.Partial partial50 = partial19.withChronologyRetainFields(chronology49);
        boolean boolean51 = partial0.isEqual((org.joda.time.ReadablePartial) partial19);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial19.minus(readablePeriod52);
        java.lang.String str54 = partial53.toStringList();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        java.lang.String str4 = partial3.toString();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial3.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        int int8 = partial6.indexOf(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        java.lang.String str20 = partial11.toStringList();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = partial11.isMatch((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial0.withChronologyRetainFields(chronology28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = partial0.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial29);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        boolean boolean41 = partial31.isMatch((org.joda.time.ReadablePartial) partial40);
        boolean boolean43 = partial40.equals((java.lang.Object) 10);
        java.lang.String str44 = partial40.toString();
        boolean boolean45 = partial6.equals((java.lang.Object) str44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        int int51 = partial6.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DurationFieldType durationFieldType52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial54 = partial6.withFieldAdded(durationFieldType52, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial9.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial22 = partial9.withPeriodAdded(readablePeriod20, 0);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = partial23.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial23.withPeriodAdded(readablePeriod27, (int) (byte) 100);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial23.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial23.withPeriodAdded(readablePeriod34, 0);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        java.lang.String str42 = partial38.toString();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial43.isBefore((org.joda.time.ReadablePartial) partial48);
        int[] intArray52 = partial43.getValues();
        boolean boolean53 = partial38.isEqual((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial56 = partial38.withPeriodAdded(readablePeriod54, (int) (short) 100);
        boolean boolean57 = partial23.isEqual((org.joda.time.ReadablePartial) partial56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial23.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime60 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property63 = partial8.property(dateTimeFieldType62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNull(dateTimeFormatter24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        java.lang.String str3 = partial0.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] {};
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray5, chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        int[] intArray13 = partial8.getValues();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray13, chronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray17 = new int[] {};
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray22 = new int[] {};
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray21, intArray22, chronology23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray26 = new int[] {};
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray26, chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray21, intArray26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray26, chronology30);
        boolean boolean32 = partial0.isAfter((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DurationFieldType durationFieldType33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial35 = partial0.withFieldAddWrapped(durationFieldType33, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial13.plus(readablePeriod27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial5.isEqual((org.joda.time.ReadablePartial) partial28);
        java.lang.String str31 = partial28.toStringList();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        java.lang.String str19 = partial16.toString();
        boolean boolean20 = partial10.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial22.plus(readablePeriod26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        java.lang.String str31 = partial28.toString();
        boolean boolean32 = partial22.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial33.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (int) (byte) 100);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial33.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = partial45.withChronologyRetainFields(chronology47);
        boolean boolean50 = partial45.equals((java.lang.Object) 10.0f);
        boolean boolean51 = partial33.isMatch((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology52 = partial33.getChronology();
        boolean boolean53 = partial22.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean54 = partial16.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean55 = partial8.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial33.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial59 = partial33.withField(dateTimeFieldType57, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = partial2.toDateTime(readableInstant3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = partial6.toDateTime(readableInstant7);
        org.joda.time.DateTime dateTime9 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        boolean boolean10 = partial2.isAfter((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial11 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial2);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial2.minus(readablePeriod12);
        org.joda.time.Chronology chronology14 = partial2.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldType0, 0, chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial17.getFormatter();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter18);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial9.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = partial9.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = partial9.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNull(dateTimeFormatter16);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        java.lang.String str35 = partial32.toString();
        boolean boolean36 = partial26.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial37.withPeriodAdded(readablePeriod41, (int) (byte) 100);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial37.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        boolean boolean54 = partial49.equals((java.lang.Object) 10.0f);
        boolean boolean55 = partial37.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology56 = partial37.getChronology();
        boolean boolean57 = partial26.isEqual((org.joda.time.ReadablePartial) partial37);
        int int58 = partial24.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.ReadablePartial readablePartial59 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = partial37.isEqual(readablePartial59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = partial7.isSupported(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.minus(readablePeriod25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray28 = new int[] {};
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray28, chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        int[] intArray36 = partial31.getValues();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray36, chronology37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial40.plus(readablePeriod44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial40.withPeriodAdded(readablePeriod46, (int) (byte) 10);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime53 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial48.withPeriodAdded(readablePeriod55, (int) ' ');
        boolean boolean58 = partial38.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray60 = new int[] {};
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray60, chronology61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial65 = partial62.withPeriodAdded(readablePeriod63, (int) (short) 100);
        org.joda.time.Chronology chronology66 = partial65.getChronology();
        org.joda.time.Partial partial67 = partial38.withChronologyRetainFields(chronology66);
        org.joda.time.Partial partial68 = partial24.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        boolean boolean70 = partial24.isSupported(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial13.plus(readablePeriod27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial5.isEqual((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial5.getFieldTypes();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial33.plus(readablePeriod37);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        java.lang.String str42 = partial39.toString();
        boolean boolean43 = partial33.isAfter((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = partial45.withChronologyRetainFields(chronology47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial45.plus(readablePeriod49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        java.lang.String str54 = partial51.toString();
        boolean boolean55 = partial45.isAfter((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = partial56.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = partial56.toString(dateTimeFormatter58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial62 = partial56.withPeriodAdded(readablePeriod60, (int) (byte) 100);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        boolean boolean66 = partial56.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        boolean boolean69 = partial67.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = partial68.withChronologyRetainFields(chronology70);
        boolean boolean73 = partial68.equals((java.lang.Object) 10.0f);
        boolean boolean74 = partial56.isMatch((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Chronology chronology75 = partial56.getChronology();
        boolean boolean76 = partial45.isEqual((org.joda.time.ReadablePartial) partial56);
        boolean boolean77 = partial39.isEqual((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        boolean boolean80 = partial78.isBefore((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial79.withChronologyRetainFields(chronology81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial84 = partial79.plus(readablePeriod83);
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = partial85.toDateTime(readableInstant86);
        java.lang.String str88 = partial85.toString();
        boolean boolean89 = partial79.isAfter((org.joda.time.ReadablePartial) partial85);
        org.joda.time.Partial partial90 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant91 = null;
        org.joda.time.DateTime dateTime92 = partial90.toDateTime(readableInstant91);
        org.joda.time.DateTime dateTime93 = partial85.toDateTime(readableInstant91);
        org.joda.time.DateTime dateTime94 = partial56.toDateTime((org.joda.time.ReadableInstant) dateTime93);
        boolean boolean95 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime93);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(dateTimeFormatter57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[]" + "'", str88, "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial11.withChronologyRetainFields(chronology15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = partial11.toString("[]", locale18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial0.toString(dateTimeFormatter21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = partial0.indexOf(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial31.withChronologyRetainFields(chronology35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial31.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        boolean boolean59 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology60 = partial41.getChronology();
        org.joda.time.Partial partial61 = partial37.withChronologyRetainFields(chronology60);
        boolean boolean62 = partial6.equals((java.lang.Object) partial61);
        org.joda.time.Chronology chronology63 = partial61.getChronology();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial61.plus(readablePeriod64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial68 = partial65.with(dateTimeFieldType66, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(partial65);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial21.getFieldTypes();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        int[] intArray30 = partial23.getValues();
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = partial32.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = partial32.toString(dateTimeFormatter34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial32.withPeriodAdded(readablePeriod36, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial38.toString(dateTimeFormatter39);
        int[] intArray41 = partial38.getValues();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial42.plus(readablePeriod45);
        org.joda.time.Chronology chronology47 = partial46.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray41, chronology47);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(chronology47);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        int int14 = partial1.compareTo((org.joda.time.ReadablePartial) partial13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray17 = new int[] {};
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray17, chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray21 = new int[] {};
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray21, chronology22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray15, intArray21);
        int[] intArray26 = partial25.getValues();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial13.withPeriodAdded(readablePeriod14, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray18 = new int[] {};
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray18, chronology19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int[] intArray26 = partial21.getValues();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray26, chronology27);
        boolean boolean29 = partial16.isMatch((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = partial28.indexOf(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial33.withPeriodAdded(readablePeriod34, (int) (byte) 0);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        int[] intArray44 = partial37.getValues();
        boolean boolean45 = partial36.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields(chronology49);
        java.lang.String str51 = partial47.toString();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.DateTime dateTime56 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial57.isBefore((org.joda.time.ReadablePartial) partial58);
        boolean boolean60 = partial52.isBefore((org.joda.time.ReadablePartial) partial57);
        int[] intArray61 = partial52.getValues();
        boolean boolean62 = partial47.isEqual((org.joda.time.ReadablePartial) partial52);
        java.lang.String str63 = partial47.toStringList();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial65.withChronologyRetainFields(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial65.plus(readablePeriod69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial73 = partial65.withPeriodAdded(readablePeriod71, (int) (byte) 10);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.DateTime dateTime78 = partial74.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime79 = partial73.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime80 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean81 = partial36.equals((java.lang.Object) dateTime80);
        org.joda.time.DateTime dateTime82 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean83 = partial1.isEqual((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int85 = partial28.get(dateTimeFieldType84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        boolean boolean4 = partial2.isBefore((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = partial3.withChronologyRetainFields(chronology5);
        java.lang.String str7 = partial3.toString();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial10 = partial3.withPeriodAdded(readablePeriod8, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray11, intArray13, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology25 = partial10.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 1, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        java.lang.String str20 = partial1.toStringList();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial1.plus(readablePeriod21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNull(dateTimeFormatter23);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray20 = new int[] {};
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(dateTimeFieldTypeArray19, intArray20, chronology21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray24 = new int[] {};
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray24, chronology25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray19, intArray24);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial27.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = partial31.withChronologyRetainFields(chronology33);
        java.lang.String str35 = partial31.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial31.getFormatter();
        boolean boolean37 = partial29.isMatch((org.joda.time.ReadablePartial) partial31);
        boolean boolean38 = partial12.equals((java.lang.Object) partial29);
        org.joda.time.ReadablePartial readablePartial39 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = partial29.isAfter(readablePartial39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = partial11.getFields();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial11.withPeriodAdded(readablePeriod14, (int) (short) 0);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(partial16);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField38 = partial0.getField((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = partial1.getFields();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        boolean boolean6 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = partial5.withChronologyRetainFields(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial5.plus(readablePeriod9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial5.withPeriodAdded(readablePeriod11, (int) (byte) 10);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime18 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = partial13.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial22 = partial13.withPeriodAdded(readablePeriod20, (int) ' ');
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial22.equals((java.lang.Object) boolean25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial28.plus(readablePeriod32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        java.lang.String str37 = partial34.toString();
        boolean boolean38 = partial28.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial34.toDateTime(readableInstant40);
        boolean boolean43 = partial22.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean52 = partial44.isAfter((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial53 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial44);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial55 = partial53.minus(readablePeriod54);
        boolean boolean56 = partial22.isEqual((org.joda.time.ReadablePartial) partial53);
        int int57 = partial53.size();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology59 = partial58.getChronology();
        org.joda.time.Partial partial60 = partial53.withChronologyRetainFields(chronology59);
        org.joda.time.Partial partial61 = partial1.withChronologyRetainFields(chronology59);
        java.lang.String str62 = partial61.toString();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial61.minus(readablePeriod63);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertNotNull(partial64);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        boolean boolean22 = partial14.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial23 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial14);
        boolean boolean24 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        boolean boolean27 = partial14.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DurationFieldType durationFieldType28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial30 = partial26.withFieldAddWrapped(durationFieldType28, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        int int10 = partial6.size();
        int int11 = partial6.size();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial6.plus(readablePeriod12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial15.withPeriodAdded(readablePeriod16, (int) (byte) 0);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int[] intArray26 = partial19.getValues();
        boolean boolean27 = partial18.isMatch((org.joda.time.ReadablePartial) partial19);
        boolean boolean28 = partial13.isAfter((org.joda.time.ReadablePartial) partial18);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = partial18.getValue(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial34.size();
        boolean boolean36 = partial18.isMatch((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property38 = partial34.property(dateTimeFieldType37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray11, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial8.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        int int25 = partial8.indexOf(dateTimeFieldType24);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = partial8.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType28 = partial8.getFieldType((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial1.withPeriodAdded(readablePeriod17, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        int int21 = partial1.indexOf(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        boolean boolean27 = partial19.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial29.withChronologyRetainFields(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial29.plus(readablePeriod33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial29.withPeriodAdded(readablePeriod35, (int) (byte) 10);
        int int38 = partial24.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = partial37.isSupported(dateTimeFieldType39);
        boolean boolean41 = partial18.isAfter((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = partial37.isSupported(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        java.lang.String str11 = partial9.toStringList();
        java.lang.String str12 = partial9.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = partial9.getFieldType((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = partial2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime5 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime6 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        java.util.Locale locale8 = null;
        java.lang.String str9 = partial0.toString("[]", locale8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        int[] intArray19 = partial10.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial10.getFormatter();
        boolean boolean21 = partial0.equals((java.lang.Object) partial10);
        int int22 = partial0.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int24 = partial0.get(dateTimeFieldType23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        int int14 = partial1.compareTo((org.joda.time.ReadablePartial) partial13);
        java.lang.String str15 = partial1.toStringList();
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = partial1.toString(dateTimeFormatter17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType20 = partial1.getFieldType((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        int int8 = partial6.indexOf(dateTimeFieldType7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime13 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        boolean boolean17 = partial9.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial19.withPeriodAdded(readablePeriod25, (int) (byte) 10);
        int int28 = partial14.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = partial27.isSupported(dateTimeFieldType29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial27.withPeriodAdded(readablePeriod31, (-1));
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial35.plus(readablePeriod39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        java.lang.String str44 = partial41.toString();
        boolean boolean45 = partial35.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = partial46.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial46.toString(dateTimeFormatter48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial46.withPeriodAdded(readablePeriod50, (int) (byte) 100);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        boolean boolean56 = partial46.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial57.isBefore((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = partial58.withChronologyRetainFields(chronology60);
        boolean boolean63 = partial58.equals((java.lang.Object) 10.0f);
        boolean boolean64 = partial46.isMatch((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology65 = partial46.getChronology();
        boolean boolean66 = partial35.isEqual((org.joda.time.ReadablePartial) partial46);
        int int67 = partial33.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray69 = new int[] {};
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray68, intArray69, chronology70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = partial71.toString(dateTimeFormatter72);
        boolean boolean74 = partial33.isAfter((org.joda.time.ReadablePartial) partial71);
        boolean boolean75 = partial6.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial78 = partial6.withPeriodAdded(readablePeriod76, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = partial6.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(dateTimeFormatter47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(partial78);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial3.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial3.minus(readablePeriod6);
        java.util.Locale locale9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = partial3.toString("", locale9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        java.lang.String str3 = partial0.toString();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        boolean boolean6 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = partial5.withChronologyRetainFields(chronology7);
        java.lang.String str9 = partial5.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        int[] intArray19 = partial10.getValues();
        boolean boolean20 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial5.withPeriodAdded(readablePeriod21, (int) (short) 100);
        boolean boolean24 = partial0.isEqual((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial5.without(dateTimeFieldType25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial26.withPeriodAdded(readablePeriod27, (int) '#');
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial30.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial40.plus(readablePeriod44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial40.withPeriodAdded(readablePeriod46, (int) (byte) 10);
        int int49 = partial35.compareTo((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = partial48.isSupported(dateTimeFieldType50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial54 = partial48.withPeriodAdded(readablePeriod52, (-1));
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial54.minus(readablePeriod55);
        org.joda.time.DateTimeField[] dateTimeFieldArray57 = partial54.getFields();
        boolean boolean58 = partial29.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        org.joda.time.Partial partial60 = partial29.without(dateTimeFieldType59);
        java.util.Locale locale62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = partial29.toString("hi!", locale62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTimeFieldArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        int[] intArray53 = partial48.getValues();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray53, chronology54);
        boolean boolean56 = partial43.isMatch((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        int int58 = partial55.indexOf(dateTimeFieldType57);
        boolean boolean59 = partial34.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = partial60.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial60.toString(dateTimeFormatter62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = partial60.withChronologyRetainFields(chronology64);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial60.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = partial68.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = null;
        java.lang.String str71 = partial68.toString(dateTimeFormatter70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial68.withChronologyRetainFields(chronology72);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        boolean boolean75 = partial68.isMatch((org.joda.time.ReadablePartial) partial74);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = null;
        java.lang.String str77 = partial74.toString(dateTimeFormatter76);
        boolean boolean78 = partial60.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        boolean boolean81 = partial79.isBefore((org.joda.time.ReadablePartial) partial80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = partial80.withChronologyRetainFields(chronology82);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.Partial partial85 = partial80.plus(readablePeriod84);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray87 = new int[] {};
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.Partial partial89 = new org.joda.time.Partial(dateTimeFieldTypeArray86, intArray87, chronology88);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.Partial partial92 = partial89.withPeriodAdded(readablePeriod90, (int) (short) 100);
        int int93 = partial80.compareTo((org.joda.time.ReadablePartial) partial92);
        org.joda.time.Partial partial94 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial80);
        boolean boolean95 = partial60.isBefore((org.joda.time.ReadablePartial) partial94);
        boolean boolean96 = partial34.isMatch((org.joda.time.ReadablePartial) partial60);
        org.joda.time.DateTimeFieldType dateTimeFieldType97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial99 = partial60.with(dateTimeFieldType97, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(dateTimeFormatter61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(dateTimeFormatter69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[]" + "'", str77, "[]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial29.withPeriodAdded(readablePeriod30, (int) (short) 100);
        int int33 = partial20.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        boolean boolean35 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial38 = partial34.with(dateTimeFieldType36, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        boolean boolean6 = partial0.isAfter((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = partial5.getFields();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        java.lang.String str17 = partial8.toStringList();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = partial8.isMatch((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial5.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = partial5.isSupported(dateTimeFieldType28);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.minus(readablePeriod10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial14 = partial9.withField(dateTimeFieldType12, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(partial11);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial18.withChronologyRetainFields(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial18.plus(readablePeriod22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial18.withPeriodAdded(readablePeriod24, (int) (byte) 10);
        int int27 = partial13.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = partial26.isSupported(dateTimeFieldType28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial26.withPeriodAdded(readablePeriod30, (-1));
        boolean boolean33 = partial6.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial32.getFormatter();
        java.lang.Object obj35 = null;
        boolean boolean36 = partial32.equals(obj35);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial18.withChronologyRetainFields(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial18.plus(readablePeriod22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial18.withPeriodAdded(readablePeriod24, (int) (byte) 10);
        int int27 = partial13.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = partial26.isSupported(dateTimeFieldType28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial26.withPeriodAdded(readablePeriod30, (-1));
        boolean boolean33 = partial6.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = partial32.getFields();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial35.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial35.withPeriodAdded(readablePeriod39, (int) (byte) 100);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        boolean boolean45 = partial35.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial35.withPeriodAdded(readablePeriod46, 0);
        boolean boolean49 = partial32.equals((java.lang.Object) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = partial32.toString(dateTimeFormatter50);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        int[] intArray7 = partial3.getValues();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial3.minus(readablePeriod8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial12 = partial9.withField(dateTimeFieldType10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(partial9);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.minus(readablePeriod25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial27.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial27.withPeriodAdded(readablePeriod31, (int) (byte) 100);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial27.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        boolean boolean44 = partial39.equals((java.lang.Object) 10.0f);
        boolean boolean45 = partial27.isMatch((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology46 = partial27.getChronology();
        org.joda.time.Partial partial47 = partial26.withChronologyRetainFields(chronology46);
        org.joda.time.DurationFieldType durationFieldType48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial50 = partial26.withFieldAddWrapped(durationFieldType48, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(partial47);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        java.lang.String str7 = partial4.toStringList();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial16.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial16.toString(dateTimeFormatter18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial16.withChronologyRetainFields(chronology20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial16.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial27.withChronologyRetainFields(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial32 = partial27.plus(readablePeriod31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        java.lang.String str36 = partial33.toString();
        boolean boolean37 = partial27.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = partial33.toDateTime(readableInstant39);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial43.withChronologyRetainFields(chronology45);
        boolean boolean48 = partial43.equals((java.lang.Object) 10.0f);
        int int49 = partial43.size();
        boolean boolean50 = partial33.isEqual((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime55 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime57 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean58 = partial15.isMatch((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean59 = partial8.isMatch((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean60 = partial4.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial8.plus(readablePeriod61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType64 = partial62.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(partial62);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial2.isBefore((org.joda.time.ReadablePartial) partial7);
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = partial7.getChronology();
        org.joda.time.Partial partial13 = partial0.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = partial14.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(partial13);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray29 = new int[] {};
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray29, chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime36 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        int[] intArray37 = partial32.getValues();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray37, chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        java.lang.String str45 = partial41.toString();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        boolean boolean54 = partial46.isBefore((org.joda.time.ReadablePartial) partial51);
        int[] intArray55 = partial46.getValues();
        boolean boolean56 = partial41.isEqual((org.joda.time.ReadablePartial) partial46);
        int[] intArray57 = partial46.getValues();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial58.withPeriodAdded(readablePeriod62, (int) (byte) 100);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial58.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        boolean boolean75 = partial70.equals((java.lang.Object) 10.0f);
        boolean boolean76 = partial58.isMatch((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology77 = partial58.getChronology();
        org.joda.time.Partial partial78 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray57, chronology77);
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = partial79.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = partial2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime5 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime6 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial11 = partial8.withPeriodAdded(readablePeriod9, (int) (byte) 0);
        int int12 = partial0.compareTo((org.joda.time.ReadablePartial) partial8);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        int int14 = partial8.indexOf(dateTimeFieldType13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = partial8.getFormatter();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(dateTimeFormatter15);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray18 = new int[] {};
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray18, chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial20.withPeriodAdded(readablePeriod21, (int) (short) 100);
        int[] intArray24 = partial20.getValues();
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray24);
        java.lang.Class<?> wildcardClass26 = partial25.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray41 = new int[] {};
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray40, intArray41, chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial43.toString(dateTimeFormatter44);
        boolean boolean46 = partial18.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial55.withChronologyRetainFields(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial60 = partial55.plus(readablePeriod59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        java.lang.String str64 = partial61.toString();
        boolean boolean65 = partial55.isAfter((org.joda.time.ReadablePartial) partial61);
        boolean boolean66 = partial53.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = partial67.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = partial67.toString(dateTimeFormatter69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial73 = partial67.withPeriodAdded(readablePeriod71, (int) (byte) 100);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial67.isBefore((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        boolean boolean80 = partial78.isBefore((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial79.withChronologyRetainFields(chronology81);
        boolean boolean84 = partial79.equals((java.lang.Object) 10.0f);
        boolean boolean85 = partial67.isMatch((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology86 = partial67.getChronology();
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Partial partial88 = partial67.minus(readablePeriod87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = partial88.isSupported(dateTimeFieldType89);
        org.joda.time.Chronology chronology91 = partial88.getChronology();
        org.joda.time.Partial partial92 = partial61.withChronologyRetainFields(chronology91);
        org.joda.time.Partial partial93 = partial43.withChronologyRetainFields(chronology91);
        java.util.Locale locale95 = null;
        java.lang.String str96 = partial43.toString("[]", locale95);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(dateTimeFormatter68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(partial88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[]" + "'", str96, "[]");
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        boolean boolean4 = partial2.isBefore((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = partial3.withChronologyRetainFields(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        java.lang.String str12 = partial9.toString();
        boolean boolean13 = partial3.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime17 = partial9.toDateTime(readableInstant15);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        boolean boolean24 = partial19.equals((java.lang.Object) 10.0f);
        int int25 = partial19.size();
        boolean boolean26 = partial9.isEqual((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial27.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial27.withPeriodAdded(readablePeriod31, (int) (byte) 100);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial27.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        boolean boolean44 = partial39.equals((java.lang.Object) 10.0f);
        boolean boolean45 = partial27.isMatch((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology46 = partial27.getChronology();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial27.minus(readablePeriod47);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = partial49.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = partial49.toString(dateTimeFormatter51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial49.withChronologyRetainFields(chronology53);
        boolean boolean55 = partial27.equals((java.lang.Object) chronology53);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime60 = partial56.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial56.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial66.plus(readablePeriod70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial74 = partial66.withPeriodAdded(readablePeriod72, (int) (byte) 10);
        int int75 = partial61.compareTo((org.joda.time.ReadablePartial) partial74);
        boolean boolean76 = partial27.isBefore((org.joda.time.ReadablePartial) partial74);
        boolean boolean77 = partial9.equals((java.lang.Object) partial74);
        java.lang.String str78 = partial74.toStringList();
        org.joda.time.Chronology chronology79 = partial74.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldType0, (int) ' ', chronology79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNull(dateTimeFormatter50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "[]" + "'", str78, "[]");
        org.junit.Assert.assertNotNull(chronology79);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial2.withChronologyRetainFields(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial2.isMatch((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        int int29 = partial15.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = partial28.isSupported(dateTimeFieldType30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial28.withPeriodAdded(readablePeriod32, (-1));
        boolean boolean35 = partial8.isMatch((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = partial34.getFields();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial37.withPeriodAdded(readablePeriod41, (int) (byte) 100);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial37.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial37.withPeriodAdded(readablePeriod48, 0);
        boolean boolean51 = partial34.equals((java.lang.Object) 0);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = partial52.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial52.toString(dateTimeFormatter54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = partial52.withChronologyRetainFields(chronology56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial52.isMatch((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = partial60.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial60.toString(dateTimeFormatter62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = partial60.withChronologyRetainFields(chronology64);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial60.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = partial66.toString(dateTimeFormatter68);
        boolean boolean70 = partial52.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        boolean boolean73 = partial71.isBefore((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = partial72.withChronologyRetainFields(chronology74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial72.plus(readablePeriod76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial80 = partial72.withPeriodAdded(readablePeriod78, (int) (byte) 10);
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = partial82.toDateTime(readableInstant83);
        org.joda.time.DateTime dateTime85 = partial81.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime86 = partial80.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.Partial partial89 = partial80.withPeriodAdded(readablePeriod87, (int) ' ');
        org.joda.time.Chronology chronology90 = partial89.getChronology();
        org.joda.time.Partial partial91 = partial52.withChronologyRetainFields(chronology90);
        org.joda.time.Partial partial92 = partial34.withChronologyRetainFields(chronology90);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial93 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) -1, chronology90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(dateTimeFormatter53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(dateTimeFormatter61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertNotNull(partial92);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial2.isBefore((org.joda.time.ReadablePartial) partial7);
        java.lang.String str11 = partial2.toStringList();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime16 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        boolean boolean17 = partial2.isMatch((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial18.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial28.plus(readablePeriod32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial28.withPeriodAdded(readablePeriod34, (int) (byte) 10);
        int int37 = partial23.compareTo((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial2.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial36.plus(readablePeriod39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = partial36.toString(dateTimeFormatter41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = partial36.isSupported(dateTimeFieldType43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial36.plus(readablePeriod45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime54 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean55 = partial47.isAfter((org.joda.time.ReadablePartial) partial50);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        int int57 = partial47.indexOf(dateTimeFieldType56);
        org.joda.time.Chronology chronology58 = partial47.getChronology();
        org.joda.time.Partial partial59 = partial46.withChronologyRetainFields(chronology58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial60 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 0, chronology58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(partial59);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial12.plus(readablePeriod16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        java.lang.String str21 = partial18.toString();
        boolean boolean22 = partial12.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial18.toDateTime(readableInstant24);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        boolean boolean33 = partial28.equals((java.lang.Object) 10.0f);
        int int34 = partial28.size();
        boolean boolean35 = partial18.isEqual((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        org.joda.time.DateTime dateTime40 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime41 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        java.util.Locale locale43 = null;
        java.lang.String str44 = partial28.toString("[]", locale43);
        boolean boolean45 = partial10.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray48 = new int[] {};
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray47, intArray48, chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(dateTimeFieldTypeArray46, intArray48, chronology51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean59 = partial28.isMatch((org.joda.time.ReadableInstant) dateTime56);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType16 = partial14.getFieldType((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        boolean boolean4 = partial2.isBefore((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = partial3.withChronologyRetainFields(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial11 = partial3.withPeriodAdded(readablePeriod9, (int) (byte) 10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime16 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial20 = partial11.withPeriodAdded(readablePeriod18, (int) ' ');
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        int int28 = partial20.compareTo((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial29.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial30.withChronologyRetainFields(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial30.plus(readablePeriod34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial30.withPeriodAdded(readablePeriod36, (int) (byte) 10);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial38.withPeriodAdded(readablePeriod45, (int) ' ');
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial47.equals((java.lang.Object) boolean50);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial53.plus(readablePeriod57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        java.lang.String str62 = partial59.toString();
        boolean boolean63 = partial53.isAfter((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = partial64.toDateTime(readableInstant65);
        org.joda.time.DateTime dateTime67 = partial59.toDateTime(readableInstant65);
        boolean boolean68 = partial47.isAfter((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = partial69.toDateTime(readableInstant70);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = partial73.toDateTime(readableInstant74);
        org.joda.time.DateTime dateTime76 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime75);
        boolean boolean77 = partial69.isAfter((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Partial partial78 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial69);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial80 = partial78.minus(readablePeriod79);
        boolean boolean81 = partial47.isEqual((org.joda.time.ReadablePartial) partial78);
        int int82 = partial78.size();
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology84 = partial83.getChronology();
        org.joda.time.Partial partial85 = partial78.withChronologyRetainFields(chronology84);
        org.joda.time.Partial partial86 = partial20.withChronologyRetainFields(chronology84);
        org.joda.time.Partial partial87 = new org.joda.time.Partial(chronology84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial88 = new org.joda.time.Partial(dateTimeFieldType0, (int) ' ', chronology84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNotNull(partial86);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial10.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial11.withChronologyRetainFields(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial11.plus(readablePeriod15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        java.lang.String str20 = partial17.toString();
        boolean boolean21 = partial11.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial17.toDateTime(readableInstant23);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial27.withChronologyRetainFields(chronology29);
        boolean boolean32 = partial27.equals((java.lang.Object) 10.0f);
        int int33 = partial27.size();
        boolean boolean34 = partial17.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        org.joda.time.Partial partial45 = partial42.without(dateTimeFieldType44);
        boolean boolean46 = partial6.isEqual((org.joda.time.ReadablePartial) partial42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = partial6.isSupported(dateTimeFieldType47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray50 = new int[] {};
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = new org.joda.time.Partial(dateTimeFieldTypeArray49, intArray50, chronology51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial52.toString(dateTimeFormatter53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial52.minus(readablePeriod55);
        java.lang.String str57 = partial52.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        org.joda.time.Partial partial59 = partial52.without(dateTimeFieldType58);
        int int60 = partial6.compareTo((org.joda.time.ReadablePartial) partial52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = partial6.getFormatter();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter61);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        boolean boolean22 = partial14.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial23 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial14);
        boolean boolean24 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(chronology25);
        boolean boolean27 = partial14.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DurationFieldType durationFieldType28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial30 = partial14.withFieldAddWrapped(durationFieldType28, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial22.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial32.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        int int41 = partial27.compareTo((org.joda.time.ReadablePartial) partial40);
        int int42 = partial21.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial44.plus(readablePeriod48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial44.withPeriodAdded(readablePeriod50, (int) (byte) 10);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial52.withPeriodAdded(readablePeriod59, (int) ' ');
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        boolean boolean65 = partial61.equals((java.lang.Object) boolean64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial61.toString(dateTimeFormatter66);
        boolean boolean68 = partial21.isEqual((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime73 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial69.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        boolean boolean80 = partial78.isBefore((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial79.withChronologyRetainFields(chronology81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial84 = partial79.plus(readablePeriod83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial79.withPeriodAdded(readablePeriod85, (int) (byte) 10);
        int int88 = partial74.compareTo((org.joda.time.ReadablePartial) partial87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = partial87.isSupported(dateTimeFieldType89);
        boolean boolean91 = partial21.isEqual((org.joda.time.ReadablePartial) partial87);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = null;
        org.joda.time.Partial partial93 = partial21.without(dateTimeFieldType92);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(partial93);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        java.lang.String str18 = partial15.toString();
        boolean boolean19 = partial9.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = partial15.toDateTime(readableInstant21);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        boolean boolean30 = partial25.equals((java.lang.Object) 10.0f);
        int int31 = partial25.size();
        boolean boolean32 = partial15.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = partial0.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial40.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial52.withChronologyRetainFields(chronology54);
        boolean boolean57 = partial52.equals((java.lang.Object) 10.0f);
        boolean boolean58 = partial40.isMatch((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology59 = partial40.getChronology();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial61 = partial40.minus(readablePeriod60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = null;
        boolean boolean63 = partial61.isSupported(dateTimeFieldType62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = partial64.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray67 = new int[] {};
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = new org.joda.time.Partial(dateTimeFieldTypeArray66, intArray67, chronology68);
        boolean boolean70 = partial64.isAfter((org.joda.time.ReadablePartial) partial69);
        int int71 = partial61.compareTo((org.joda.time.ReadablePartial) partial64);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = null;
        org.joda.time.Partial partial73 = partial64.without(dateTimeFieldType72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial73.plus(readablePeriod74);
        boolean boolean76 = partial25.isMatch((org.joda.time.ReadablePartial) partial75);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology21 = partial20.getChronology();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial22.withPeriodAdded(readablePeriod26, (int) (byte) 100);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial29.isBefore((org.joda.time.ReadablePartial) partial30);
        boolean boolean32 = partial22.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial33.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial34.withChronologyRetainFields(chronology36);
        boolean boolean39 = partial34.equals((java.lang.Object) 10.0f);
        boolean boolean40 = partial22.isMatch((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology41 = partial22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial22.minus(readablePeriod42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        int[] intArray53 = partial48.getValues();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray53, chronology54);
        boolean boolean56 = partial43.equals((java.lang.Object) partial55);
        boolean boolean57 = partial20.isEqual((org.joda.time.ReadablePartial) partial43);
        boolean boolean58 = partial0.isEqual((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial43.withPeriodAdded(readablePeriod59, 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial43.toString(dateTimeFormatter62);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial13.plus(readablePeriod27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial5.isEqual((org.joda.time.ReadablePartial) partial28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial28.getFormatter();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        java.lang.String str35 = partial32.toString();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        java.lang.String str41 = partial37.toString();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial42.isBefore((org.joda.time.ReadablePartial) partial47);
        int[] intArray51 = partial42.getValues();
        boolean boolean52 = partial37.isEqual((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial55 = partial37.withPeriodAdded(readablePeriod53, (int) (short) 100);
        boolean boolean56 = partial32.isEqual((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray58 = new int[] {};
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(dateTimeFieldTypeArray57, intArray58, chronology59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        int[] intArray66 = partial61.getValues();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = new org.joda.time.Partial(dateTimeFieldTypeArray57, intArray66, chronology67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray70 = new int[] {};
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray69, intArray70, chronology71);
        org.joda.time.Partial partial73 = new org.joda.time.Partial(dateTimeFieldTypeArray57, intArray70);
        org.joda.time.Partial partial74 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        org.joda.time.Partial partial76 = partial73.without(dateTimeFieldType75);
        boolean boolean77 = partial37.equals((java.lang.Object) partial73);
        boolean boolean78 = partial28.equals((java.lang.Object) partial37);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertNotNull(partial76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        int[] intArray7 = partial3.getValues();
        int[] intArray8 = partial3.getValues();
        org.joda.time.DurationFieldType durationFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial11 = partial3.withFieldAdded(durationFieldType9, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        java.lang.String str24 = partial18.toString("[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial0.minus(readablePeriod10);
        java.lang.String str12 = partial0.toStringList();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = partial1.getFieldTypes();
        java.lang.String str5 = partial1.toString("[]");
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = partial6.toDateTime(readableInstant7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime13 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        boolean boolean14 = partial6.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        int int16 = partial6.indexOf(dateTimeFieldType15);
        org.joda.time.Chronology chronology17 = partial6.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial(chronology17);
        int int19 = partial1.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = partial1.getFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial2.withChronologyRetainFields(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        java.lang.String str28 = partial25.toString();
        boolean boolean29 = partial19.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial25.toDateTime(readableInstant31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        boolean boolean40 = partial35.equals((java.lang.Object) 10.0f);
        int int41 = partial35.size();
        boolean boolean42 = partial25.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean50 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean51 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str52 = partial0.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial0.toString(dateTimeFormatter53);
        org.joda.time.Chronology chronology55 = partial0.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = partial57.withChronologyRetainFields(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial57.plus(readablePeriod61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial65 = partial57.withPeriodAdded(readablePeriod63, (int) (byte) 10);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime70 = partial66.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial74 = partial65.withPeriodAdded(readablePeriod72, (int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = partial74.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        org.joda.time.Partial partial77 = partial74.without(dateTimeFieldType76);
        boolean boolean78 = partial0.isBefore((org.joda.time.ReadablePartial) partial77);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property80 = partial0.property(dateTimeFieldType79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        int int10 = partial6.size();
        int int11 = partial6.size();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial6.plus(readablePeriod12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = partial15.getFields();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial19.withPeriodAdded(readablePeriod25, (int) (byte) 10);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime33 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial27.withPeriodAdded(readablePeriod34, (int) ' ');
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        boolean boolean40 = partial36.equals((java.lang.Object) boolean39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial42.plus(readablePeriod46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        java.lang.String str51 = partial48.toString();
        boolean boolean52 = partial42.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.DateTime dateTime56 = partial48.toDateTime(readableInstant54);
        boolean boolean57 = partial36.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = partial58.isAfter((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial67 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial58);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial67.minus(readablePeriod68);
        boolean boolean70 = partial36.isEqual((org.joda.time.ReadablePartial) partial67);
        int int71 = partial67.size();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology73 = partial72.getChronology();
        org.joda.time.Partial partial74 = partial67.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial15.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeField[] dateTimeFieldArray76 = partial15.getFields();
        boolean boolean77 = partial6.isAfter((org.joda.time.ReadablePartial) partial15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType79 = partial15.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(dateTimeFieldArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        int int7 = partial1.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = partial1.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial1.indexOf(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        int int8 = partial6.indexOf(dateTimeFieldType7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime13 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        boolean boolean17 = partial9.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial19.withPeriodAdded(readablePeriod25, (int) (byte) 10);
        int int28 = partial14.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = partial27.isSupported(dateTimeFieldType29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial27.withPeriodAdded(readablePeriod31, (-1));
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial35.plus(readablePeriod39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        java.lang.String str44 = partial41.toString();
        boolean boolean45 = partial35.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = partial46.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial46.toString(dateTimeFormatter48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial46.withPeriodAdded(readablePeriod50, (int) (byte) 100);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        boolean boolean56 = partial46.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial57.isBefore((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = partial58.withChronologyRetainFields(chronology60);
        boolean boolean63 = partial58.equals((java.lang.Object) 10.0f);
        boolean boolean64 = partial46.isMatch((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology65 = partial46.getChronology();
        boolean boolean66 = partial35.isEqual((org.joda.time.ReadablePartial) partial46);
        int int67 = partial33.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray69 = new int[] {};
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray68, intArray69, chronology70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = partial71.toString(dateTimeFormatter72);
        boolean boolean74 = partial33.isAfter((org.joda.time.ReadablePartial) partial71);
        boolean boolean75 = partial6.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = null;
        java.lang.String str77 = partial33.toString(dateTimeFormatter76);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(dateTimeFormatter47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[]" + "'", str77, "[]");
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        java.lang.String str17 = partial13.toString();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial18.isBefore((org.joda.time.ReadablePartial) partial23);
        int[] intArray27 = partial18.getValues();
        boolean boolean28 = partial13.isEqual((org.joda.time.ReadablePartial) partial18);
        int[] intArray29 = partial18.getValues();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial30.withPeriodAdded(readablePeriod34, (int) (byte) 100);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        boolean boolean40 = partial30.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        boolean boolean47 = partial42.equals((java.lang.Object) 10.0f);
        boolean boolean48 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology49 = partial30.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray29, chronology49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray52 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray53 = new int[] {};
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray52, intArray53, chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial58 = partial55.withPeriodAdded(readablePeriod56, (int) (short) 100);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = new org.joda.time.Partial(chronology59);
        boolean boolean61 = partial55.isAfter((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial51.isAfter((org.joda.time.ReadablePartial) partial55);
        java.util.Locale locale64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = partial55.toString("hi!", locale64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial21 = partial13.withPeriodAdded(readablePeriod19, (int) (byte) 10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial21.withPeriodAdded(readablePeriod28, (int) ' ');
        boolean boolean31 = partial11.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray33 = new int[] {};
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray33, chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial35.withPeriodAdded(readablePeriod36, (int) (short) 100);
        org.joda.time.Chronology chronology39 = partial38.getChronology();
        org.joda.time.Partial partial40 = partial11.withChronologyRetainFields(chronology39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial40);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        java.lang.String str29 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial0.getFieldTypes();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial32.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial40.withPeriodAdded(readablePeriod47, (int) ' ');
        org.joda.time.Chronology chronology50 = partial49.getChronology();
        int[] intArray51 = partial49.getValues();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial53.plus(readablePeriod57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial53.withPeriodAdded(readablePeriod59, (int) (byte) 10);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial70 = partial61.withPeriodAdded(readablePeriod68, (int) ' ');
        org.joda.time.Chronology chronology71 = partial70.getChronology();
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray51, chronology71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = partial72.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int75 = partial72.get(dateTimeFieldType74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNull(dateTimeFormatter73);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray23 = new int[] {};
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray23, chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray31 = partial26.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray31, chronology32);
        boolean boolean34 = partial21.equals((java.lang.Object) partial33);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = partial33.getFields();
        int[] intArray36 = partial33.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial40.withPeriodAdded(readablePeriod41, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray45 = new int[] {};
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray45, chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial47.withPeriodAdded(readablePeriod48, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray52 = new int[] {};
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial(dateTimeFieldTypeArray51, intArray52, chronology53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = partial56.toDateTime(readableInstant57);
        org.joda.time.DateTime dateTime59 = partial55.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        int[] intArray60 = partial55.getValues();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray51, intArray60, chronology61);
        boolean boolean63 = partial50.isMatch((org.joda.time.ReadablePartial) partial62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial50.plus(readablePeriod64);
        org.joda.time.Chronology chronology66 = partial65.getChronology();
        org.joda.time.Partial partial67 = partial43.withChronologyRetainFields(chronology66);
        org.joda.time.Partial partial68 = partial33.withChronologyRetainFields(chronology66);
        java.lang.String str70 = partial33.toString("[]");
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        java.util.Locale locale17 = null;
        java.lang.String str18 = partial10.toString("[]", locale17);
        boolean boolean19 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray21 = new int[] {};
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray21, chronology22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        int[] intArray29 = partial24.getValues();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray29, chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial33.plus(readablePeriod37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial33.withPeriodAdded(readablePeriod39, (int) (byte) 10);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial41.withPeriodAdded(readablePeriod48, (int) ' ');
        boolean boolean51 = partial31.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        int int53 = partial41.indexOf(dateTimeFieldType52);
        boolean boolean54 = partial5.isEqual((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = partial41.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray57 = new int[] {};
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldTypeArray56, intArray57, chronology58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        org.joda.time.DateTime dateTime64 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        int[] intArray65 = partial60.getValues();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = new org.joda.time.Partial(dateTimeFieldTypeArray56, intArray65, chronology66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray69 = new int[] {};
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray68, intArray69, chronology70);
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray56, intArray69);
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        boolean boolean75 = partial73.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = partial74.withChronologyRetainFields(chronology76);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Partial partial79 = partial74.plus(readablePeriod78);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        boolean boolean82 = partial80.isBefore((org.joda.time.ReadablePartial) partial81);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = partial81.withChronologyRetainFields(chronology83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial86 = partial81.plus(readablePeriod85);
        org.joda.time.Partial partial87 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.DateTime dateTime89 = partial87.toDateTime(readableInstant88);
        java.lang.String str90 = partial87.toString();
        boolean boolean91 = partial81.isAfter((org.joda.time.ReadablePartial) partial87);
        boolean boolean92 = partial79.isBefore((org.joda.time.ReadablePartial) partial87);
        org.joda.time.Chronology chronology93 = partial87.getChronology();
        org.joda.time.Partial partial94 = new org.joda.time.Partial(chronology93);
        org.joda.time.Partial partial95 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray69, chronology93);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(partial86);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "[]" + "'", str90, "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(chronology93);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        java.lang.String str26 = partial20.toString("[]");
        boolean boolean27 = partial5.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial29.withChronologyRetainFields(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial29.plus(readablePeriod33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial29.withPeriodAdded(readablePeriod35, (int) (byte) 10);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial37.withPeriodAdded(readablePeriod44, (int) ' ');
        org.joda.time.Chronology chronology47 = partial46.getChronology();
        org.joda.time.Partial partial48 = partial20.withChronologyRetainFields(chronology47);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial48);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray23 = new int[] {};
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray23, chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray31 = partial26.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray31, chronology32);
        boolean boolean34 = partial21.equals((java.lang.Object) partial33);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = partial33.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray37 = new int[] {};
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray37, chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime44 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        int[] intArray45 = partial40.getValues();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        java.lang.String str53 = partial49.toString();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial54.isBefore((org.joda.time.ReadablePartial) partial59);
        int[] intArray63 = partial54.getValues();
        boolean boolean64 = partial49.isEqual((org.joda.time.ReadablePartial) partial54);
        int[] intArray65 = partial54.getValues();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = partial66.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = partial66.toString(dateTimeFormatter68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial66.withPeriodAdded(readablePeriod70, (int) (byte) 100);
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        boolean boolean75 = partial73.isBefore((org.joda.time.ReadablePartial) partial74);
        boolean boolean76 = partial66.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        boolean boolean79 = partial77.isBefore((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = partial78.withChronologyRetainFields(chronology80);
        boolean boolean83 = partial78.equals((java.lang.Object) 10.0f);
        boolean boolean84 = partial66.isMatch((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology85 = partial66.getChronology();
        org.joda.time.Partial partial86 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray65, chronology85);
        int int87 = partial86.size();
        boolean boolean88 = partial33.isAfter((org.joda.time.ReadablePartial) partial86);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = null;
        java.lang.String str90 = partial33.toString(dateTimeFormatter89);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "[]" + "'", str90, "[]");
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = partial2.toDateTime(readableInstant3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = partial6.toDateTime(readableInstant7);
        org.joda.time.DateTime dateTime9 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        boolean boolean10 = partial2.isAfter((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        int int12 = partial2.indexOf(dateTimeFieldType11);
        org.joda.time.Chronology chronology13 = partial2.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial14 = new org.joda.time.Partial(dateTimeFieldType0, (int) 'a', chronology13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        int int19 = partial17.indexOf(dateTimeFieldType18);
        org.joda.time.DurationFieldType durationFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial22 = partial17.withFieldAddWrapped(durationFieldType20, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray23 = new int[] {};
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray23, chronology24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = partial27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime30 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        int[] intArray31 = partial26.getValues();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray31, chronology32);
        boolean boolean34 = partial21.equals((java.lang.Object) partial33);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = partial33.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray37 = new int[] {};
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray37, chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime44 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        int[] intArray45 = partial40.getValues();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray45, chronology46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        java.lang.String str53 = partial49.toString();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial54.isBefore((org.joda.time.ReadablePartial) partial59);
        int[] intArray63 = partial54.getValues();
        boolean boolean64 = partial49.isEqual((org.joda.time.ReadablePartial) partial54);
        int[] intArray65 = partial54.getValues();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = partial66.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = null;
        java.lang.String str69 = partial66.toString(dateTimeFormatter68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial66.withPeriodAdded(readablePeriod70, (int) (byte) 100);
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        boolean boolean75 = partial73.isBefore((org.joda.time.ReadablePartial) partial74);
        boolean boolean76 = partial66.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        boolean boolean79 = partial77.isBefore((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = partial78.withChronologyRetainFields(chronology80);
        boolean boolean83 = partial78.equals((java.lang.Object) 10.0f);
        boolean boolean84 = partial66.isMatch((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Chronology chronology85 = partial66.getChronology();
        org.joda.time.Partial partial86 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray65, chronology85);
        int int87 = partial86.size();
        boolean boolean88 = partial33.isAfter((org.joda.time.ReadablePartial) partial86);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = partial86.isSupported(dateTimeFieldType89);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        int[] intArray5 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = partial0.toString(dateTimeFormatter6);
        java.lang.String str8 = partial0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = partial0.get(dateTimeFieldType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = partial54.withChronologyRetainFields(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial54.plus(readablePeriod58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = partial60.toDateTime(readableInstant61);
        java.lang.String str63 = partial60.toString();
        boolean boolean64 = partial54.isAfter((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = partial65.toDateTime(readableInstant66);
        org.joda.time.DateTime dateTime68 = partial60.toDateTime(readableInstant66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        boolean boolean75 = partial70.equals((java.lang.Object) 10.0f);
        int int76 = partial70.size();
        boolean boolean77 = partial60.isEqual((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime83 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = partial70.getFormatter();
        boolean boolean85 = partial49.isEqual((org.joda.time.ReadablePartial) partial70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType87 = partial49.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNull(dateTimeFormatter84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        int int7 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray9 = new int[] {};
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime16 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        int[] intArray17 = partial12.getValues();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isAfter((org.joda.time.ReadablePartial) partial29);
        boolean boolean40 = partial1.isBefore((org.joda.time.ReadablePartial) partial29);
        java.lang.String str41 = partial1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial18.withChronologyRetainFields(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial18.plus(readablePeriod22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial18.withPeriodAdded(readablePeriod24, (int) (byte) 10);
        int int27 = partial13.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = partial26.isSupported(dateTimeFieldType28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial26.withPeriodAdded(readablePeriod30, (-1));
        boolean boolean33 = partial6.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = partial32.getFields();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial35.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial35.withPeriodAdded(readablePeriod39, (int) (byte) 100);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        boolean boolean45 = partial35.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial35.withPeriodAdded(readablePeriod46, 0);
        boolean boolean49 = partial32.equals((java.lang.Object) 0);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial50.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial50.withChronologyRetainFields(chronology54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial50.isMatch((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial58.withChronologyRetainFields(chronology62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial58.isMatch((org.joda.time.ReadablePartial) partial64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial64.toString(dateTimeFormatter66);
        boolean boolean68 = partial50.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial70.plus(readablePeriod74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial78 = partial70.withPeriodAdded(readablePeriod76, (int) (byte) 10);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = partial80.toDateTime(readableInstant81);
        org.joda.time.DateTime dateTime83 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime dateTime84 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial78.withPeriodAdded(readablePeriod85, (int) ' ');
        org.joda.time.Chronology chronology88 = partial87.getChronology();
        org.joda.time.Partial partial89 = partial50.withChronologyRetainFields(chronology88);
        org.joda.time.Partial partial90 = partial32.withChronologyRetainFields(chronology88);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = null;
        org.joda.time.Partial partial92 = partial90.without(dateTimeFieldType91);
        org.joda.time.ReadablePartial readablePartial93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int94 = partial92.compareTo(readablePartial93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(dateTimeFormatter51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(partial89);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertNotNull(partial92);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        java.lang.String str9 = partial6.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial10.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial16.toString(dateTimeFormatter18);
        int int20 = partial16.size();
        int int21 = partial16.size();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial16.plus(readablePeriod22);
        boolean boolean24 = partial6.isAfter((org.joda.time.ReadablePartial) partial16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType26 = partial16.getFieldType((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeField[] dateTimeFieldArray76 = partial75.getFields();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = partial75.getFormatter();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(dateTimeFieldArray76);
        org.junit.Assert.assertNull(dateTimeFormatter77);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        int int20 = partial16.size();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        java.lang.String str24 = partial21.toString();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        java.lang.String str30 = partial26.toString();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime35 = partial31.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        boolean boolean39 = partial31.isBefore((org.joda.time.ReadablePartial) partial36);
        int[] intArray40 = partial31.getValues();
        boolean boolean41 = partial26.isEqual((org.joda.time.ReadablePartial) partial31);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial44 = partial26.withPeriodAdded(readablePeriod42, (int) (short) 100);
        boolean boolean45 = partial21.isEqual((org.joda.time.ReadablePartial) partial26);
        boolean boolean46 = partial16.isAfter((org.joda.time.ReadablePartial) partial21);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial49 = partial21.with(dateTimeFieldType47, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = partial3.isSupported(dateTimeFieldType9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial11.isMatch((org.joda.time.ReadablePartial) partial20);
        boolean boolean23 = partial20.equals((java.lang.Object) 10);
        java.lang.String str24 = partial20.toString();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial20.withPeriodAdded(readablePeriod25, (int) '4');
        int[] intArray28 = partial27.getValues();
        boolean boolean29 = partial3.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = partial27.isSupported(dateTimeFieldType30);
        int[] intArray32 = partial27.getValues();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = partial11.getFields();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial11.withPeriodAdded(readablePeriod14, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType18 = partial16.getFieldType((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(partial16);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray56 = new int[] {};
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldTypeArray55, intArray56, chronology57);
        boolean boolean59 = partial53.isAfter((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = partial53.getChronology();
        boolean boolean61 = partial18.equals((java.lang.Object) chronology60);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        int[] intArray67 = partial62.getValues();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        boolean boolean70 = partial68.isBefore((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Partial partial72 = partial69.withChronologyRetainFields(chronology71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial69.plus(readablePeriod73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial69.withPeriodAdded(readablePeriod75, (int) (byte) 10);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTime dateTime83 = partial77.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        java.lang.String str84 = partial77.toStringList();
        boolean boolean85 = partial62.isAfter((org.joda.time.ReadablePartial) partial77);
        boolean boolean86 = partial18.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.DateTimeField[] dateTimeFieldArray87 = partial62.getFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "[]" + "'", str84, "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray87);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial17.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        int int33 = partial17.indexOf(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        int int5 = partial3.indexOf(dateTimeFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial8 = partial3.withFieldAddWrapped(durationFieldType6, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        boolean boolean32 = partial1.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial33.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial34.withChronologyRetainFields(chronology36);
        java.lang.String str38 = partial34.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial39.isBefore((org.joda.time.ReadablePartial) partial44);
        int[] intArray48 = partial39.getValues();
        boolean boolean49 = partial34.isEqual((org.joda.time.ReadablePartial) partial39);
        java.lang.String str50 = partial34.toStringList();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial52.withChronologyRetainFields(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial52.plus(readablePeriod56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial52.withPeriodAdded(readablePeriod58, (int) (byte) 10);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime66 = partial60.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime67 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean68 = partial12.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DateTimeField[] dateTimeFieldArray69 = partial34.getFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray69);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        java.lang.String str13 = partial9.toString();
        int[] intArray14 = partial9.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = partial9.getFormatter();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter15);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.Partial partial14 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial13);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = partial13.getValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = partial0.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        org.joda.time.Partial partial24 = partial0.without(dateTimeFieldType23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial0.minus(readablePeriod25);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        int int22 = partial18.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial18.getFormatter();
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial24.toString(dateTimeFormatter25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial24.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial15.withChronologyRetainFields(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial20 = partial15.plus(readablePeriod19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial15.withPeriodAdded(readablePeriod21, (int) (byte) 10);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial23.withPeriodAdded(readablePeriod30, (int) ' ');
        boolean boolean33 = partial13.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray35 = new int[] {};
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(dateTimeFieldTypeArray34, intArray35, chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial37.withPeriodAdded(readablePeriod38, (int) (short) 100);
        org.joda.time.Chronology chronology41 = partial40.getChronology();
        org.joda.time.Partial partial42 = partial13.withChronologyRetainFields(chronology41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 100, chronology41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(partial42);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = partial3.isSupported(dateTimeFieldType9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial11.isMatch((org.joda.time.ReadablePartial) partial20);
        boolean boolean23 = partial20.equals((java.lang.Object) 10);
        java.lang.String str24 = partial20.toString();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial20.withPeriodAdded(readablePeriod25, (int) '4');
        int[] intArray28 = partial27.getValues();
        boolean boolean29 = partial3.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = partial27.getFields();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = partial2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime5 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime6 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        java.util.Locale locale8 = null;
        java.lang.String str9 = partial0.toString("[]", locale8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial13.withPeriodAdded(readablePeriod14, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray18 = new int[] {};
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray18, chronology19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int[] intArray26 = partial21.getValues();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray26, chronology27);
        boolean boolean29 = partial16.isMatch((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = partial28.indexOf(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = new org.joda.time.Partial(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial33.withPeriodAdded(readablePeriod34, (int) (byte) 0);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        int[] intArray44 = partial37.getValues();
        boolean boolean45 = partial36.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields(chronology49);
        java.lang.String str51 = partial47.toString();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.DateTime dateTime56 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial57.isBefore((org.joda.time.ReadablePartial) partial58);
        boolean boolean60 = partial52.isBefore((org.joda.time.ReadablePartial) partial57);
        int[] intArray61 = partial52.getValues();
        boolean boolean62 = partial47.isEqual((org.joda.time.ReadablePartial) partial52);
        java.lang.String str63 = partial47.toStringList();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial65.withChronologyRetainFields(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial65.plus(readablePeriod69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Partial partial73 = partial65.withPeriodAdded(readablePeriod71, (int) (byte) 10);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.DateTime dateTime78 = partial74.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime79 = partial73.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime80 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean81 = partial36.equals((java.lang.Object) dateTime80);
        org.joda.time.DateTime dateTime82 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean83 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial39.getFieldTypes();
        int int41 = partial39.size();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial42.isBefore((org.joda.time.ReadablePartial) partial47);
        int[] intArray51 = partial42.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = partial42.getFormatter();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = partial53.toString(dateTimeFormatter55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial53.withChronologyRetainFields(chronology57);
        java.util.Locale locale60 = null;
        java.lang.String str61 = partial53.toString("[]", locale60);
        boolean boolean62 = partial42.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean63 = partial39.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial65.withChronologyRetainFields(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial65.plus(readablePeriod69);
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        java.lang.String str74 = partial71.toString();
        boolean boolean75 = partial65.isAfter((org.joda.time.ReadablePartial) partial71);
        java.lang.String str76 = partial71.toStringList();
        org.joda.time.DateTimeField[] dateTimeFieldArray77 = partial71.getFields();
        int int78 = partial42.compareTo((org.joda.time.ReadablePartial) partial71);
        org.joda.time.DurationFieldType durationFieldType79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial81 = partial42.withFieldAddWrapped(durationFieldType79, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter52);
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[]" + "'", str74, "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        java.lang.String str76 = partial43.toStringList();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = partial77.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = null;
        java.lang.String str80 = partial77.toString(dateTimeFormatter79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial83 = partial77.withPeriodAdded(readablePeriod81, (int) (byte) 100);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        boolean boolean86 = partial84.isBefore((org.joda.time.ReadablePartial) partial85);
        boolean boolean87 = partial77.isBefore((org.joda.time.ReadablePartial) partial85);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.Partial partial90 = partial77.withPeriodAdded(readablePeriod88, 0);
        boolean boolean91 = partial43.isAfter((org.joda.time.ReadablePartial) partial77);
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        org.joda.time.Partial partial93 = partial77.minus(readablePeriod92);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = null;
        java.lang.String str95 = partial77.toString(dateTimeFormatter94);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[]" + "'", str95, "[]");
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Chronology chronology10 = partial5.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial11.minus(readablePeriod12);
        org.joda.time.DurationFieldType durationFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial16 = partial13.withFieldAddWrapped(durationFieldType14, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(partial13);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial27.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int[] intArray40 = partial35.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray40, chronology41);
        boolean boolean43 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial30.plus(readablePeriod44);
        boolean boolean46 = partial21.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeField[] dateTimeFieldArray47 = partial21.getFields();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = partial48.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = partial48.toString(dateTimeFormatter50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial54 = partial48.withPeriodAdded(readablePeriod52, (int) (byte) 100);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial55.isBefore((org.joda.time.ReadablePartial) partial56);
        boolean boolean58 = partial48.isBefore((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = partial60.toDateTime(readableInstant61);
        org.joda.time.DateTime dateTime63 = partial59.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        boolean boolean67 = partial59.isBefore((org.joda.time.ReadablePartial) partial64);
        java.lang.String str68 = partial59.toStringList();
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime73 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean74 = partial59.isMatch((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime75 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime76 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial79 = partial21.with(dateTimeFieldType77, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray47);
        org.junit.Assert.assertNull(dateTimeFormatter49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Chronology chronology6 = partial5.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial13.plus(readablePeriod27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial5.isEqual((org.joda.time.ReadablePartial) partial28);
        java.lang.Class<?> wildcardClass31 = partial5.getClass();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int int9 = partial0.size();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial10.withChronologyRetainFields(chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial10.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial16.toString(dateTimeFormatter18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = partial20.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = partial20.toString(dateTimeFormatter22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial20.withPeriodAdded(readablePeriod24, (int) (byte) 100);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial20.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        boolean boolean37 = partial32.equals((java.lang.Object) 10.0f);
        boolean boolean38 = partial20.isMatch((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology39 = partial20.getChronology();
        org.joda.time.Partial partial40 = partial16.withChronologyRetainFields(chronology39);
        boolean boolean41 = partial0.isEqual((org.joda.time.ReadablePartial) partial40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial44 = partial0.withField(dateTimeFieldType42, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial34.size();
        boolean boolean36 = partial18.isMatch((org.joda.time.ReadablePartial) partial34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial18.toString(dateTimeFormatter37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = partial18.indexOf(dateTimeFieldType39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial54 = partial41.withPeriodAdded(readablePeriod52, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = partial41.getFieldTypes();
        boolean boolean56 = partial18.isEqual((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DurationFieldType durationFieldType57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial59 = partial18.withFieldAdded(durationFieldType57, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        java.util.Locale locale7 = null;
        java.lang.String str8 = partial0.toString("[]", locale7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial9.withChronologyRetainFields(chronology13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial9.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = partial17.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = partial17.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial17.withChronologyRetainFields(chronology21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial17.isMatch((org.joda.time.ReadablePartial) partial23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = partial23.toString(dateTimeFormatter25);
        boolean boolean27 = partial9.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = partial29.withChronologyRetainFields(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial29.plus(readablePeriod33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial29.withPeriodAdded(readablePeriod35, (int) (byte) 10);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = partial39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime42 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial37.withPeriodAdded(readablePeriod44, (int) ' ');
        org.joda.time.Chronology chronology47 = partial46.getChronology();
        org.joda.time.Partial partial48 = partial9.withChronologyRetainFields(chronology47);
        org.joda.time.Partial partial49 = partial0.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial52 = partial0.with(dateTimeFieldType50, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial49);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial8.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial16.withPeriodAdded(readablePeriod23, (int) ' ');
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial25.equals((java.lang.Object) boolean28);
        boolean boolean30 = partial1.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial34 = partial1.with(dateTimeFieldType32, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        java.lang.String str17 = partial13.toString();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial18.isBefore((org.joda.time.ReadablePartial) partial23);
        int[] intArray27 = partial18.getValues();
        boolean boolean28 = partial13.isEqual((org.joda.time.ReadablePartial) partial18);
        int[] intArray29 = partial18.getValues();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial30.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = partial30.toString(dateTimeFormatter32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial30.withPeriodAdded(readablePeriod34, (int) (byte) 100);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        boolean boolean40 = partial30.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        boolean boolean47 = partial42.equals((java.lang.Object) 10.0f);
        boolean boolean48 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology49 = partial30.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray29, chronology49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial(chronology49);
        java.lang.String str52 = partial51.toStringList();
        int int53 = partial51.size();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = partial6.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial6.withChronologyRetainFields(chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial6.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial17.plus(readablePeriod21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        java.lang.String str26 = partial23.toString();
        boolean boolean27 = partial17.isAfter((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial23.toDateTime(readableInstant29);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        boolean boolean38 = partial33.equals((java.lang.Object) 10.0f);
        int int39 = partial33.size();
        boolean boolean40 = partial23.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean48 = partial5.isMatch((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.DateTimeField[] dateTimeFieldArray52 = partial50.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = partial50.getFieldTypes();
        org.joda.time.Chronology chronology54 = partial50.getChronology();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial55.isBefore((org.joda.time.ReadablePartial) partial56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = partial55.getFormatter();
        boolean boolean59 = partial50.equals((java.lang.Object) dateTimeFormatter58);
        boolean boolean60 = partial5.equals((java.lang.Object) dateTimeFormatter58);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(dateTimeFormatter58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        int int8 = partial6.indexOf(dateTimeFieldType7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime13 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        boolean boolean17 = partial9.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial19.withPeriodAdded(readablePeriod25, (int) (byte) 10);
        int int28 = partial14.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = partial27.isSupported(dateTimeFieldType29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial27.withPeriodAdded(readablePeriod31, (-1));
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial35.plus(readablePeriod39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        java.lang.String str44 = partial41.toString();
        boolean boolean45 = partial35.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = partial46.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial46.toString(dateTimeFormatter48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial46.withPeriodAdded(readablePeriod50, (int) (byte) 100);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        boolean boolean56 = partial46.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial57.isBefore((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = partial58.withChronologyRetainFields(chronology60);
        boolean boolean63 = partial58.equals((java.lang.Object) 10.0f);
        boolean boolean64 = partial46.isMatch((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology65 = partial46.getChronology();
        boolean boolean66 = partial35.isEqual((org.joda.time.ReadablePartial) partial46);
        int int67 = partial33.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray69 = new int[] {};
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray68, intArray69, chronology70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = partial71.toString(dateTimeFormatter72);
        boolean boolean74 = partial33.isAfter((org.joda.time.ReadablePartial) partial71);
        boolean boolean75 = partial6.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray77 = new int[] {};
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray76, intArray77, chronology78);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = partial81.toDateTime(readableInstant82);
        org.joda.time.DateTime dateTime84 = partial80.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        int[] intArray85 = partial80.getValues();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = new org.joda.time.Partial(dateTimeFieldTypeArray76, intArray85, chronology86);
        org.joda.time.Partial partial88 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial87);
        boolean boolean89 = partial33.isMatch((org.joda.time.ReadablePartial) partial88);
        java.util.Locale locale91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = partial33.toString("hi!", locale91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(dateTimeFormatter47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology9 = partial0.getChronology();
        java.lang.String str10 = partial0.toString();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial12 = partial0.minus(readablePeriod11);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial12);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial13.withPeriodAdded(readablePeriod14, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial19.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial19.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial19.withPeriodAdded(readablePeriod23, (int) (byte) 100);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial19.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial19.withPeriodAdded(readablePeriod30, 0);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial33.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (int) (byte) 100);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial33.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial33.withPeriodAdded(readablePeriod44, 0);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        java.lang.String str52 = partial48.toString();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        boolean boolean61 = partial53.isBefore((org.joda.time.ReadablePartial) partial58);
        int[] intArray62 = partial53.getValues();
        boolean boolean63 = partial48.isEqual((org.joda.time.ReadablePartial) partial53);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial66 = partial48.withPeriodAdded(readablePeriod64, (int) (short) 100);
        boolean boolean67 = partial33.isEqual((org.joda.time.ReadablePartial) partial66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial33.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime70 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime72 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DurationFieldType durationFieldType73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial75 = partial0.withFieldAdded(durationFieldType73, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial27.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int[] intArray40 = partial35.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray40, chronology41);
        boolean boolean43 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial30.plus(readablePeriod44);
        boolean boolean46 = partial21.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeField[] dateTimeFieldArray47 = partial21.getFields();
        org.joda.time.DurationFieldType durationFieldType48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial50 = partial21.withFieldAdded(durationFieldType48, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray47);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        java.lang.String str17 = partial1.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = partial1.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial1.getFieldTypes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial29.withPeriodAdded(readablePeriod30, (int) (short) 100);
        int int33 = partial20.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        boolean boolean35 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.DurationFieldType durationFieldType36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial38 = partial34.withFieldAddWrapped(durationFieldType36, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        java.lang.String str3 = partial0.toString();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        boolean boolean6 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = partial5.withChronologyRetainFields(chronology7);
        java.lang.String str9 = partial5.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        int[] intArray19 = partial10.getValues();
        boolean boolean20 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial5.withPeriodAdded(readablePeriod21, (int) (short) 100);
        boolean boolean24 = partial0.isEqual((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial25.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial25.toString(dateTimeFormatter27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial25.withPeriodAdded(readablePeriod29, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = partial25.isSupported(dateTimeFieldType32);
        boolean boolean34 = partial5.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial37 = partial5.withField(dateTimeFieldType35, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] {};
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray5, chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        org.joda.time.Partial partial18 = partial16.without(dateTimeFieldType17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial19.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial19.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial19.withPeriodAdded(readablePeriod23, (int) (byte) 100);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial19.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = partial31.withChronologyRetainFields(chronology33);
        boolean boolean36 = partial31.equals((java.lang.Object) 10.0f);
        boolean boolean37 = partial19.isMatch((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        java.lang.String str43 = partial39.toString();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime48 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        boolean boolean52 = partial44.isBefore((org.joda.time.ReadablePartial) partial49);
        int[] intArray53 = partial44.getValues();
        boolean boolean54 = partial39.isEqual((org.joda.time.ReadablePartial) partial44);
        java.lang.String str55 = partial39.toStringList();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = partial57.withChronologyRetainFields(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial57.plus(readablePeriod61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial65 = partial57.withPeriodAdded(readablePeriod63, (int) (byte) 10);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime70 = partial66.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime72 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean73 = partial19.isMatch((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        org.joda.time.Partial partial75 = partial19.without(dateTimeFieldType74);
        boolean boolean76 = partial16.isMatch((org.joda.time.ReadablePartial) partial75);
        int int77 = partial8.compareTo((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology78 = partial75.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(chronology78);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial13.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = partial28.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int[] intArray40 = partial35.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray40, chronology41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial44.plus(readablePeriod48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial44.withPeriodAdded(readablePeriod50, (int) (byte) 10);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial52.withPeriodAdded(readablePeriod59, (int) ' ');
        boolean boolean62 = partial42.isAfter((org.joda.time.ReadablePartial) partial52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray64 = new int[] {};
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = new org.joda.time.Partial(dateTimeFieldTypeArray63, intArray64, chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Partial partial69 = partial66.withPeriodAdded(readablePeriod67, (int) (short) 100);
        org.joda.time.Chronology chronology70 = partial69.getChronology();
        org.joda.time.Partial partial71 = partial42.withChronologyRetainFields(chronology70);
        boolean boolean72 = partial30.isBefore((org.joda.time.ReadablePartial) partial71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = null;
        org.joda.time.Partial partial74 = partial71.without(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(partial74);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial25.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial25.toString(dateTimeFormatter27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial25.withPeriodAdded(readablePeriod29, (int) (byte) 100);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial25.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        boolean boolean42 = partial37.equals((java.lang.Object) 10.0f);
        boolean boolean43 = partial25.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology44 = partial25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial25.minus(readablePeriod45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = partial47.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = partial47.toString(dateTimeFormatter49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial47.withChronologyRetainFields(chronology51);
        boolean boolean53 = partial25.equals((java.lang.Object) chronology51);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial54.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial64.withChronologyRetainFields(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial64.plus(readablePeriod68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial64.withPeriodAdded(readablePeriod70, (int) (byte) 10);
        int int73 = partial59.compareTo((org.joda.time.ReadablePartial) partial72);
        boolean boolean74 = partial25.isBefore((org.joda.time.ReadablePartial) partial72);
        boolean boolean75 = partial7.equals((java.lang.Object) partial72);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        org.joda.time.Partial partial77 = partial7.without(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNull(dateTimeFormatter48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[]" + "'", str50, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(partial77);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = partial3.isSupported(dateTimeFieldType9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial11.isMatch((org.joda.time.ReadablePartial) partial20);
        boolean boolean23 = partial20.equals((java.lang.Object) 10);
        java.lang.String str24 = partial20.toString();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial20.withPeriodAdded(readablePeriod25, (int) '4');
        int[] intArray28 = partial27.getValues();
        boolean boolean29 = partial3.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial32 = partial3.with(dateTimeFieldType30, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial29.withPeriodAdded(readablePeriod30, (int) (short) 100);
        int int33 = partial20.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        boolean boolean35 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = partial37.getFields();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial41.plus(readablePeriod45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial41.withPeriodAdded(readablePeriod47, (int) (byte) 10);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime54 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime55 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial58 = partial49.withPeriodAdded(readablePeriod56, (int) ' ');
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        boolean boolean62 = partial58.equals((java.lang.Object) boolean61);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial64.withChronologyRetainFields(chronology66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial64.plus(readablePeriod68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        java.lang.String str73 = partial70.toString();
        boolean boolean74 = partial64.isAfter((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.DateTime dateTime78 = partial70.toDateTime(readableInstant76);
        boolean boolean79 = partial58.isAfter((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = partial80.toDateTime(readableInstant81);
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = partial84.toDateTime(readableInstant85);
        org.joda.time.DateTime dateTime87 = partial83.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        boolean boolean88 = partial80.isAfter((org.joda.time.ReadablePartial) partial83);
        org.joda.time.Partial partial89 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial80);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.Partial partial91 = partial89.minus(readablePeriod90);
        boolean boolean92 = partial58.isEqual((org.joda.time.ReadablePartial) partial89);
        int int93 = partial89.size();
        org.joda.time.Partial partial94 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology95 = partial94.getChronology();
        org.joda.time.Partial partial96 = partial89.withChronologyRetainFields(chronology95);
        org.joda.time.Partial partial97 = partial37.withChronologyRetainFields(chronology95);
        org.joda.time.Partial partial98 = partial34.withChronologyRetainFields(chronology95);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray99 = partial98.getFieldTypes();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(partial91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(partial96);
        org.junit.Assert.assertNotNull(partial97);
        org.junit.Assert.assertNotNull(partial98);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray99);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        java.lang.String str20 = partial11.toStringList();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean26 = partial11.isMatch((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial0.withChronologyRetainFields(chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType31 = partial0.getFieldType((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(partial29);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        java.lang.String str24 = partial20.toString();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial25.isBefore((org.joda.time.ReadablePartial) partial30);
        int[] intArray34 = partial25.getValues();
        boolean boolean35 = partial20.isEqual((org.joda.time.ReadablePartial) partial25);
        java.lang.String str36 = partial20.toStringList();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Partial partial41 = partial38.withChronologyRetainFields(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial38.plus(readablePeriod42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial38.withPeriodAdded(readablePeriod44, (int) (byte) 10);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime53 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime52);
        int int55 = partial0.size();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial0.toDateTime(readableInstant56);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial40.withChronologyRetainFields(chronology44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial40.isMatch((org.joda.time.ReadablePartial) partial46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = partial48.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = partial48.toString(dateTimeFormatter50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = partial48.withChronologyRetainFields(chronology52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial48.isMatch((org.joda.time.ReadablePartial) partial54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        boolean boolean58 = partial40.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial59.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial60.withChronologyRetainFields(chronology62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial60.plus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial68 = partial60.withPeriodAdded(readablePeriod66, (int) (byte) 10);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime73 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime74 = partial68.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.Partial partial77 = partial68.withPeriodAdded(readablePeriod75, (int) ' ');
        org.joda.time.Chronology chronology78 = partial77.getChronology();
        org.joda.time.Partial partial79 = partial40.withChronologyRetainFields(chronology78);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray80 = partial79.getFieldTypes();
        boolean boolean81 = partial0.isEqual((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology82 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial84 = partial0.plus(readablePeriod83);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int86 = partial0.get(dateTimeFieldType85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(dateTimeFormatter49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(partial84);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial6.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial24 = partial21.with(dateTimeFieldType22, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial21);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        java.lang.String str3 = partial0.toString();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        boolean boolean6 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = partial5.withChronologyRetainFields(chronology7);
        java.lang.String str9 = partial5.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        int[] intArray19 = partial10.getValues();
        boolean boolean20 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial5.withPeriodAdded(readablePeriod21, (int) (short) 100);
        boolean boolean24 = partial0.isEqual((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray26 = new int[] {};
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray26, chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        int[] intArray34 = partial29.getValues();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray34, chronology35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray38);
        org.joda.time.Partial partial42 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        org.joda.time.Partial partial44 = partial41.without(dateTimeFieldType43);
        boolean boolean45 = partial5.equals((java.lang.Object) partial41);
        java.lang.Class<?> wildcardClass46 = partial41.getClass();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial21.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray24 = new int[] {};
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray24, chronology25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray28 = new int[] {};
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray28, chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray28);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = partial32.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = partial32.toString(dateTimeFormatter34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial32.withPeriodAdded(readablePeriod36, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial38.toString(dateTimeFormatter39);
        int[] intArray41 = partial38.getValues();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime49 = partial45.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial42.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = partial42.indexOf(dateTimeFieldType51);
        org.joda.time.Chronology chronology53 = partial42.getChronology();
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray41, chronology53);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = partial56.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = partial56.toString(dateTimeFormatter58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial62 = partial56.withPeriodAdded(readablePeriod60, (int) (byte) 100);
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        boolean boolean65 = partial63.isBefore((org.joda.time.ReadablePartial) partial64);
        boolean boolean66 = partial56.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray68 = new int[] {};
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = new org.joda.time.Partial(dateTimeFieldTypeArray67, intArray68, chronology69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = null;
        java.lang.String str72 = partial70.toString(dateTimeFormatter71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial74 = partial70.minus(readablePeriod73);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        boolean boolean77 = partial75.isBefore((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = partial76.withChronologyRetainFields(chronology78);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial81 = partial76.plus(readablePeriod80);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial84 = partial76.withPeriodAdded(readablePeriod82, (int) (byte) 10);
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.Partial partial86 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.DateTime dateTime88 = partial86.toDateTime(readableInstant87);
        org.joda.time.DateTime dateTime89 = partial85.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime90 = partial84.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.ReadablePeriod readablePeriod91 = null;
        org.joda.time.Partial partial93 = partial84.withPeriodAdded(readablePeriod91, (int) ' ');
        org.joda.time.Chronology chronology94 = partial93.getChronology();
        org.joda.time.Partial partial95 = partial74.withChronologyRetainFields(chronology94);
        org.joda.time.Partial partial96 = partial64.withChronologyRetainFields(chronology94);
        org.joda.time.Partial partial97 = new org.joda.time.Partial(dateTimeFieldTypeArray22, intArray41, chronology94);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNull(dateTimeFormatter57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(partial93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(partial95);
        org.junit.Assert.assertNotNull(partial96);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        java.lang.String str29 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial0.getFieldTypes();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial31.withPeriodAdded(readablePeriod35, (int) (byte) 100);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        boolean boolean41 = partial31.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial43.withChronologyRetainFields(chronology45);
        boolean boolean48 = partial43.equals((java.lang.Object) 10.0f);
        boolean boolean49 = partial31.isMatch((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology50 = partial31.getChronology();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial52 = partial31.minus(readablePeriod51);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray54 = new int[] {};
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(dateTimeFieldTypeArray53, intArray54, chronology55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime61 = partial57.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        int[] intArray62 = partial57.getValues();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(dateTimeFieldTypeArray53, intArray62, chronology63);
        boolean boolean65 = partial52.equals((java.lang.Object) partial64);
        org.joda.time.DateTimeField[] dateTimeFieldArray66 = partial64.getFields();
        int[] intArray67 = partial64.getValues();
        org.joda.time.Partial partial68 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray67);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[]");
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial8.withPeriodAdded(readablePeriod11, (int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial16.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = partial16.toString(dateTimeFormatter18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial22 = partial16.withPeriodAdded(readablePeriod20, (int) (byte) 100);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial16.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        boolean boolean33 = partial28.equals((java.lang.Object) 10.0f);
        boolean boolean34 = partial16.isMatch((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology35 = partial16.getChronology();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial16.minus(readablePeriod36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        boolean boolean39 = partial37.isSupported(dateTimeFieldType38);
        boolean boolean40 = partial15.equals((java.lang.Object) dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial2.isBefore((org.joda.time.ReadablePartial) partial7);
        int[] intArray11 = partial7.getValues();
        org.joda.time.Chronology chronology12 = partial7.getChronology();
        org.joda.time.Partial partial13 = partial0.withChronologyRetainFields(chronology12);
        java.lang.String str15 = partial0.toString("[]");
        org.joda.time.Chronology chronology16 = partial0.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial19 = partial0.with(dateTimeFieldType17, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        int int7 = partial1.size();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = partial8.toDateTime(readableInstant9);
        java.lang.String str11 = partial8.toString();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        java.lang.String str17 = partial13.toString();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        boolean boolean26 = partial18.isBefore((org.joda.time.ReadablePartial) partial23);
        int[] intArray27 = partial18.getValues();
        boolean boolean28 = partial13.isEqual((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial13.withPeriodAdded(readablePeriod29, (int) (short) 100);
        boolean boolean32 = partial8.isEqual((org.joda.time.ReadablePartial) partial13);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        org.joda.time.Partial partial34 = partial13.without(dateTimeFieldType33);
        boolean boolean35 = partial1.isBefore((org.joda.time.ReadablePartial) partial34);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        int int14 = partial1.compareTo((org.joda.time.ReadablePartial) partial13);
        java.lang.String str15 = partial1.toStringList();
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial17.plus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial22.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = partial23.withChronologyRetainFields(chronology25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial23.plus(readablePeriod27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial29.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial30.withChronologyRetainFields(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial30.plus(readablePeriod34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        java.lang.String str39 = partial36.toString();
        boolean boolean40 = partial30.isAfter((org.joda.time.ReadablePartial) partial36);
        boolean boolean41 = partial28.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial42.toString(dateTimeFormatter44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial42.withPeriodAdded(readablePeriod46, (int) (byte) 100);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        boolean boolean52 = partial42.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = partial54.withChronologyRetainFields(chronology56);
        boolean boolean59 = partial54.equals((java.lang.Object) 10.0f);
        boolean boolean60 = partial42.isMatch((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology61 = partial42.getChronology();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial42.minus(readablePeriod62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = partial63.isSupported(dateTimeFieldType64);
        org.joda.time.Chronology chronology66 = partial63.getChronology();
        org.joda.time.Partial partial67 = partial36.withChronologyRetainFields(chronology66);
        boolean boolean68 = partial17.isEqual((org.joda.time.ReadablePartial) partial36);
        boolean boolean69 = partial16.isMatch((org.joda.time.ReadablePartial) partial17);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology9 = partial0.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial0.toString(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial25.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        int int35 = partial7.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = partial25.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial39 = partial25.with(dateTimeFieldType37, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        int int7 = partial1.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = partial1.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray10 = new int[] {};
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray10, chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial12.withPeriodAdded(readablePeriod13, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial12.plus(readablePeriod16);
        boolean boolean18 = partial1.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        java.lang.String str24 = partial20.toString();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        boolean boolean33 = partial25.isBefore((org.joda.time.ReadablePartial) partial30);
        int[] intArray34 = partial25.getValues();
        boolean boolean35 = partial20.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial20.withPeriodAdded(readablePeriod36, (int) (short) 100);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial40.plus(readablePeriod44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial40.withPeriodAdded(readablePeriod46, (int) (byte) 10);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime53 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial48.withPeriodAdded(readablePeriod55, (int) ' ');
        boolean boolean58 = partial38.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean59 = partial1.isMatch((org.joda.time.ReadablePartial) partial38);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial10.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        boolean boolean27 = partial22.equals((java.lang.Object) 10.0f);
        boolean boolean28 = partial10.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology29 = partial10.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = partial31.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = partial31.toString(dateTimeFormatter33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial31.withChronologyRetainFields(chronology35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial31.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        boolean boolean58 = partial53.equals((java.lang.Object) 10.0f);
        boolean boolean59 = partial41.isMatch((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology60 = partial41.getChronology();
        org.joda.time.Partial partial61 = partial37.withChronologyRetainFields(chronology60);
        boolean boolean62 = partial6.equals((java.lang.Object) partial61);
        org.joda.time.Chronology chronology63 = partial61.getChronology();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial61.plus(readablePeriod64);
        org.joda.time.DurationFieldType durationFieldType66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial68 = partial65.withFieldAddWrapped(durationFieldType66, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(partial65);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = new org.joda.time.Partial(chronology7);
        boolean boolean9 = partial3.isAfter((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial10.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = partial10.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial10.withPeriodAdded(readablePeriod14, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        org.joda.time.Partial partial18 = partial16.without(dateTimeFieldType17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial19.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial19.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial19.withPeriodAdded(readablePeriod23, (int) (byte) 100);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial19.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial30.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = partial31.withChronologyRetainFields(chronology33);
        boolean boolean36 = partial31.equals((java.lang.Object) 10.0f);
        boolean boolean37 = partial19.isMatch((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        java.lang.String str43 = partial39.toString();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime48 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        boolean boolean52 = partial44.isBefore((org.joda.time.ReadablePartial) partial49);
        int[] intArray53 = partial44.getValues();
        boolean boolean54 = partial39.isEqual((org.joda.time.ReadablePartial) partial44);
        java.lang.String str55 = partial39.toStringList();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = partial57.withChronologyRetainFields(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial57.plus(readablePeriod61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial65 = partial57.withPeriodAdded(readablePeriod63, (int) (byte) 10);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime70 = partial66.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime72 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean73 = partial19.isMatch((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = null;
        org.joda.time.Partial partial75 = partial19.without(dateTimeFieldType74);
        boolean boolean76 = partial16.isMatch((org.joda.time.ReadablePartial) partial75);
        java.lang.String str77 = partial75.toString();
        boolean boolean78 = partial8.isEqual((org.joda.time.ReadablePartial) partial75);
        int int79 = partial75.size();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(dateTimeFormatter11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[]" + "'", str77, "[]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = partial4.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = partial4.toString(dateTimeFormatter6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial10 = partial4.withPeriodAdded(readablePeriod8, (int) (byte) 100);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial4.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = partial16.withChronologyRetainFields(chronology18);
        boolean boolean21 = partial16.equals((java.lang.Object) 10.0f);
        boolean boolean22 = partial4.isMatch((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Chronology chronology23 = partial4.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial4.minus(readablePeriod24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial25.getFieldTypes();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = partial27.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = partial27.toString(dateTimeFormatter29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial27.withPeriodAdded(readablePeriod31, (int) (byte) 100);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial27.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        boolean boolean44 = partial39.equals((java.lang.Object) 10.0f);
        boolean boolean45 = partial27.isMatch((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology46 = partial27.getChronology();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial27.minus(readablePeriod47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = partial48.getFieldTypes();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = partial52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime55 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        int[] intArray57 = partial50.getValues();
        org.joda.time.Partial partial58 = new org.joda.time.Partial(dateTimeFieldTypeArray49, intArray57);
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = partial60.toDateTime(readableInstant61);
        org.joda.time.DateTime dateTime63 = partial59.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        boolean boolean67 = partial59.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.Chronology chronology68 = partial59.getChronology();
        org.joda.time.Partial partial69 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray57, chronology68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = partial74.toDateTime(readableInstant75);
        org.joda.time.DateTime dateTime77 = partial73.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = partial70.isAfter((org.joda.time.ReadablePartial) partial73);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = null;
        int int80 = partial70.indexOf(dateTimeFieldType79);
        org.joda.time.Chronology chronology81 = partial70.getChronology();
        org.joda.time.Partial partial82 = new org.joda.time.Partial(chronology81);
        org.joda.time.Partial partial83 = new org.joda.time.Partial(chronology81);
        org.joda.time.Partial partial84 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray57, chronology81);
        java.lang.Class<?> wildcardClass85 = chronology81.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNull(dateTimeFormatter28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = partial2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime5 = partial1.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime6 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        java.util.Locale locale8 = null;
        java.lang.String str9 = partial0.toString("[]", locale8);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        int[] intArray19 = partial10.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial10.getFormatter();
        boolean boolean21 = partial0.equals((java.lang.Object) partial10);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime27 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = partial22.getFields();
        boolean boolean30 = partial10.isAfter((org.joda.time.ReadablePartial) partial22);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology1 = partial0.getChronology();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial2.withPeriodAdded(readablePeriod6, (int) (byte) 100);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        boolean boolean12 = partial2.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial14.withChronologyRetainFields(chronology16);
        boolean boolean19 = partial14.equals((java.lang.Object) 10.0f);
        boolean boolean20 = partial2.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology21 = partial2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial2.minus(readablePeriod22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        int[] intArray33 = partial28.getValues();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray33, chronology34);
        boolean boolean36 = partial23.equals((java.lang.Object) partial35);
        boolean boolean37 = partial0.isEqual((org.joda.time.ReadablePartial) partial23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField39 = partial23.getField((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Partial partial14 = partial9.withChronologyRetainFields(chronology13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial9.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = partial15.toString(dateTimeFormatter17);
        int int19 = partial15.size();
        int int20 = partial15.size();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial15.plus(readablePeriod21);
        boolean boolean23 = partial6.isMatch((org.joda.time.ReadablePartial) partial22);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = partial6.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial22.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial32.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        int int41 = partial27.compareTo((org.joda.time.ReadablePartial) partial40);
        int int42 = partial21.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial44.plus(readablePeriod48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial44.withPeriodAdded(readablePeriod50, (int) (byte) 10);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial52.withPeriodAdded(readablePeriod59, (int) ' ');
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        boolean boolean65 = partial61.equals((java.lang.Object) boolean64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial61.toString(dateTimeFormatter66);
        boolean boolean68 = partial21.isEqual((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime73 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial69.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        boolean boolean80 = partial78.isBefore((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial79.withChronologyRetainFields(chronology81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial84 = partial79.plus(readablePeriod83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial79.withPeriodAdded(readablePeriod85, (int) (byte) 10);
        int int88 = partial74.compareTo((org.joda.time.ReadablePartial) partial87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = partial87.isSupported(dateTimeFieldType89);
        boolean boolean91 = partial21.isEqual((org.joda.time.ReadablePartial) partial87);
        int int92 = partial21.size();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial27.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int[] intArray40 = partial35.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray40, chronology41);
        boolean boolean43 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial30.plus(readablePeriod44);
        boolean boolean46 = partial21.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial49 = partial45.withFieldAdded(durationFieldType47, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        boolean boolean6 = partial0.isAfter((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = partial5.getFields();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime12 = partial8.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        boolean boolean16 = partial8.isBefore((org.joda.time.ReadablePartial) partial13);
        java.lang.String str17 = partial8.toStringList();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = partial8.isMatch((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial5.withPeriodAdded(readablePeriod25, (int) 'a');
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial28.toString(dateTimeFormatter30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial28.withPeriodAdded(readablePeriod32, (int) (byte) 100);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial28.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        boolean boolean45 = partial40.equals((java.lang.Object) 10.0f);
        boolean boolean46 = partial28.isMatch((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology47 = partial28.getChronology();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial28.minus(readablePeriod48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray51 = new int[] {};
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray50, intArray51, chronology52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        int[] intArray59 = partial54.getValues();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldTypeArray50, intArray59, chronology60);
        boolean boolean62 = partial49.equals((java.lang.Object) partial61);
        boolean boolean63 = partial5.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial65.withChronologyRetainFields(chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.Partial partial70 = partial65.plus(readablePeriod69);
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        java.lang.String str74 = partial71.toString();
        boolean boolean75 = partial65.isAfter((org.joda.time.ReadablePartial) partial71);
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = partial76.toDateTime(readableInstant77);
        org.joda.time.DateTime dateTime79 = partial71.toDateTime(readableInstant77);
        boolean boolean80 = partial49.isMatch(readableInstant77);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        org.joda.time.Partial partial82 = partial49.without(dateTimeFieldType81);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[]" + "'", str74, "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(partial82);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = partial1.getFormatter();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial3.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial3.toString(dateTimeFormatter5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial3.withPeriodAdded(readablePeriod7, (int) (byte) 100);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial10.isBefore((org.joda.time.ReadablePartial) partial11);
        boolean boolean13 = partial3.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = partial15.withChronologyRetainFields(chronology17);
        boolean boolean20 = partial15.equals((java.lang.Object) 10.0f);
        boolean boolean21 = partial3.isMatch((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Chronology chronology22 = partial3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial3.minus(readablePeriod23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray26 = new int[] {};
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray26, chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        int[] intArray34 = partial29.getValues();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray34, chronology35);
        boolean boolean37 = partial24.equals((java.lang.Object) partial36);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = partial36.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray40 = new int[] {};
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray40, chronology41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        int[] intArray48 = partial43.getValues();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray48, chronology49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial52.withChronologyRetainFields(chronology54);
        java.lang.String str56 = partial52.toString();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime61 = partial57.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        boolean boolean65 = partial57.isBefore((org.joda.time.ReadablePartial) partial62);
        int[] intArray66 = partial57.getValues();
        boolean boolean67 = partial52.isEqual((org.joda.time.ReadablePartial) partial57);
        int[] intArray68 = partial57.getValues();
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = partial69.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = null;
        java.lang.String str72 = partial69.toString(dateTimeFormatter71);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.Partial partial75 = partial69.withPeriodAdded(readablePeriod73, (int) (byte) 100);
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        boolean boolean78 = partial76.isBefore((org.joda.time.ReadablePartial) partial77);
        boolean boolean79 = partial69.isBefore((org.joda.time.ReadablePartial) partial77);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        boolean boolean82 = partial80.isBefore((org.joda.time.ReadablePartial) partial81);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = partial81.withChronologyRetainFields(chronology83);
        boolean boolean86 = partial81.equals((java.lang.Object) 10.0f);
        boolean boolean87 = partial69.isMatch((org.joda.time.ReadablePartial) partial81);
        org.joda.time.Chronology chronology88 = partial69.getChronology();
        org.joda.time.Partial partial89 = new org.joda.time.Partial(dateTimeFieldTypeArray39, intArray68, chronology88);
        int int90 = partial89.size();
        boolean boolean91 = partial36.isAfter((org.joda.time.ReadablePartial) partial89);
        boolean boolean92 = partial1.isBefore((org.joda.time.ReadablePartial) partial89);
        org.junit.Assert.assertNull(dateTimeFormatter2);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial6.plus(readablePeriod20);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = partial21.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial25 = partial21.withField(dateTimeFieldType23, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial2.withPeriodAdded(readablePeriod6, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = partial8.toString(dateTimeFormatter9);
        int[] intArray11 = partial8.getValues();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial12.withChronologyRetainFields(chronology16);
        java.util.Locale locale19 = null;
        java.lang.String str20 = partial12.toString("[]", locale19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = partial21.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = partial21.toString(dateTimeFormatter23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = partial21.withChronologyRetainFields(chronology25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial21.isMatch((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = partial29.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = partial29.toString(dateTimeFormatter31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = partial29.withChronologyRetainFields(chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial29.isMatch((org.joda.time.ReadablePartial) partial35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial35.toString(dateTimeFormatter37);
        boolean boolean39 = partial21.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial41.plus(readablePeriod45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial41.withPeriodAdded(readablePeriod47, (int) (byte) 10);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime54 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime55 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial58 = partial49.withPeriodAdded(readablePeriod56, (int) ' ');
        org.joda.time.Chronology chronology59 = partial58.getChronology();
        org.joda.time.Partial partial60 = partial21.withChronologyRetainFields(chronology59);
        org.joda.time.Partial partial61 = partial12.withChronologyRetainFields(chronology59);
        org.joda.time.Partial partial62 = partial8.withChronologyRetainFields(chronology59);
        org.joda.time.Partial partial63 = new org.joda.time.Partial(chronology59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial64 = new org.joda.time.Partial(dateTimeFieldType0, 0, chronology59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(dateTimeFormatter30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(partial62);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial3.getFormatter();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = partial3.isSupported(dateTimeFieldType10);
        java.util.Locale locale13 = null;
        java.lang.String str14 = partial3.toString("[]", locale13);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = partial3.getValue((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeField[] dateTimeFieldArray76 = partial75.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray77 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray78 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray79 = new int[] {};
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.Partial partial81 = new org.joda.time.Partial(dateTimeFieldTypeArray78, intArray79, chronology80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = new org.joda.time.Partial(dateTimeFieldTypeArray77, intArray79, chronology82);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = partial85.toDateTime(readableInstant86);
        org.joda.time.DateTime dateTime88 = partial84.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime89 = partial83.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        boolean boolean90 = partial75.isMatch((org.joda.time.ReadableInstant) dateTime87);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(dateTimeFieldArray76);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray77);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial1.toString(dateTimeFormatter10);
        int[] intArray12 = partial1.getValues();
        java.lang.String str13 = partial1.toString();
        java.lang.String str14 = partial1.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = partial1.isSupported(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        java.lang.String str3 = partial0.toString();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        boolean boolean6 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Partial partial8 = partial5.withChronologyRetainFields(chronology7);
        java.lang.String str9 = partial5.toString();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        boolean boolean17 = partial15.isBefore((org.joda.time.ReadablePartial) partial16);
        boolean boolean18 = partial10.isBefore((org.joda.time.ReadablePartial) partial15);
        int[] intArray19 = partial10.getValues();
        boolean boolean20 = partial5.isEqual((org.joda.time.ReadablePartial) partial10);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial23 = partial5.withPeriodAdded(readablePeriod21, (int) (short) 100);
        boolean boolean24 = partial0.isEqual((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray26 = new int[] {};
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray26, chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        int[] intArray34 = partial29.getValues();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray34, chronology35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial(dateTimeFieldTypeArray25, intArray38);
        org.joda.time.Partial partial42 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        org.joda.time.Partial partial44 = partial41.without(dateTimeFieldType43);
        boolean boolean45 = partial5.equals((java.lang.Object) partial41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = partial5.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial5.plus(readablePeriod47);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(partial48);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        boolean boolean22 = partial14.isAfter((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial23 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial14);
        boolean boolean24 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = partial34.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial34.withPeriodAdded(readablePeriod41, (int) ' ');
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime48 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        boolean boolean52 = partial44.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = partial54.withChronologyRetainFields(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial54.plus(readablePeriod58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Partial partial62 = partial54.withPeriodAdded(readablePeriod60, (int) (byte) 10);
        int int63 = partial49.compareTo((org.joda.time.ReadablePartial) partial62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = partial62.isSupported(dateTimeFieldType64);
        boolean boolean66 = partial34.isMatch((org.joda.time.ReadablePartial) partial62);
        int int67 = partial13.compareTo((org.joda.time.ReadablePartial) partial34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType69 = partial34.getFieldType((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial2.withPeriodAdded(readablePeriod6, (int) (byte) 100);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        boolean boolean12 = partial2.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial14.withChronologyRetainFields(chronology16);
        boolean boolean19 = partial14.equals((java.lang.Object) 10.0f);
        boolean boolean20 = partial2.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Chronology chronology21 = partial2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial23 = partial2.minus(readablePeriod22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial23.getFieldTypes();
        org.joda.time.Chronology chronology25 = partial23.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 1, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial9.minus(readablePeriod10);
        org.joda.time.DurationFieldType durationFieldType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial14 = partial11.withFieldAdded(durationFieldType12, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(partial11);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial9.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray17 = new int[] {};
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray17);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Partial partial22 = partial20.plus(readablePeriod21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        java.lang.String str28 = partial24.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial24.getFormatter();
        boolean boolean30 = partial22.isMatch((org.joda.time.ReadablePartial) partial24);
        int int31 = partial9.compareTo((org.joda.time.ReadablePartial) partial22);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        java.lang.String str13 = partial9.toString();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime18 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial14.isBefore((org.joda.time.ReadablePartial) partial19);
        int[] intArray23 = partial14.getValues();
        boolean boolean24 = partial9.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial9.withPeriodAdded(readablePeriod25, (int) (short) 100);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = partial28.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = partial28.toString(dateTimeFormatter30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial28.withPeriodAdded(readablePeriod32, (int) (byte) 100);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial28.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial39.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Partial partial43 = partial40.withChronologyRetainFields(chronology42);
        boolean boolean45 = partial40.equals((java.lang.Object) 10.0f);
        boolean boolean46 = partial28.isMatch((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology47 = partial28.getChronology();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial28.minus(readablePeriod48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray51 = new int[] {};
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Partial partial53 = new org.joda.time.Partial(dateTimeFieldTypeArray50, intArray51, chronology52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = partial54.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        int[] intArray59 = partial54.getValues();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = new org.joda.time.Partial(dateTimeFieldTypeArray50, intArray59, chronology60);
        boolean boolean62 = partial49.equals((java.lang.Object) partial61);
        int int63 = partial27.compareTo((org.joda.time.ReadablePartial) partial49);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial65 = partial49.plus(readablePeriod64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Partial partial67 = partial49.plus(readablePeriod66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        int int69 = partial67.indexOf(dateTimeFieldType68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial71 = partial67.plus(readablePeriod70);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        boolean boolean74 = partial72.isBefore((org.joda.time.ReadablePartial) partial73);
        org.joda.time.DateTimeField[] dateTimeFieldArray75 = partial73.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray77 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray78 = new int[] {};
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = new org.joda.time.Partial(dateTimeFieldTypeArray77, intArray78, chronology79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = new org.joda.time.Partial(dateTimeFieldTypeArray76, intArray78, chronology81);
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = partial84.toDateTime(readableInstant85);
        org.joda.time.DateTime dateTime87 = partial83.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime88 = partial82.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        boolean boolean89 = partial73.isMatch((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean90 = partial71.isMatch((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = null;
        org.joda.time.Partial partial92 = partial71.without(dateTimeFieldType91);
        boolean boolean93 = partial7.isMatch((org.joda.time.ReadablePartial) partial71);
        java.util.Locale locale95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = partial7.toString("", locale95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(partial71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray75);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray76);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray77);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        java.lang.String str18 = partial15.toString();
        boolean boolean19 = partial9.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = partial15.toDateTime(readableInstant21);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        boolean boolean30 = partial25.equals((java.lang.Object) 10.0f);
        int int31 = partial25.size();
        boolean boolean32 = partial15.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = partial0.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        java.lang.String str57 = partial54.toString();
        boolean boolean58 = partial48.isAfter((org.joda.time.ReadablePartial) partial54);
        boolean boolean59 = partial40.isEqual((org.joda.time.ReadablePartial) partial54);
        boolean boolean60 = partial25.isBefore((org.joda.time.ReadablePartial) partial54);
        java.lang.String str61 = partial25.toString();
        java.lang.String str62 = partial25.toStringList();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        boolean boolean32 = partial1.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial12.minus(readablePeriod33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        org.joda.time.Partial partial36 = partial12.without(dateTimeFieldType35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField38 = partial12.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNotNull(partial36);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        boolean boolean12 = partial4.isBefore((org.joda.time.ReadablePartial) partial9);
        int[] intArray13 = partial9.getValues();
        org.joda.time.Chronology chronology14 = partial9.getChronology();
        org.joda.time.Partial partial15 = partial2.withChronologyRetainFields(chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 0, chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(partial15);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        java.lang.String str20 = partial5.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property22 = partial5.property(dateTimeFieldType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = partial9.getField((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        java.lang.String str9 = partial0.toStringList();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        boolean boolean15 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial16.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial21.compareTo((org.joda.time.ReadablePartial) partial34);
        boolean boolean36 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial34.plus(readablePeriod37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial34.toString(dateTimeFormatter39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial34.isSupported(dateTimeFieldType41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial34.plus(readablePeriod43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = partial49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime52 = partial48.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        boolean boolean53 = partial45.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = null;
        int int55 = partial45.indexOf(dateTimeFieldType54);
        org.joda.time.Chronology chronology56 = partial45.getChronology();
        org.joda.time.Partial partial57 = partial44.withChronologyRetainFields(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial59 = partial44.minus(readablePeriod58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = partial44.getFormatter();
        int int61 = partial44.size();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial63 = partial44.minus(readablePeriod62);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNull(dateTimeFormatter60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(partial63);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial39.withChronologyRetainFields(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial44 = partial39.plus(readablePeriod43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial39.withPeriodAdded(readablePeriod45, (int) (byte) 10);
        int int48 = partial34.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial0.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial51.plus(readablePeriod55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        java.lang.String str60 = partial57.toString();
        boolean boolean61 = partial51.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial57.toDateTime(readableInstant63);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial66.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Partial partial70 = partial67.withChronologyRetainFields(chronology69);
        boolean boolean72 = partial67.equals((java.lang.Object) 10.0f);
        int int73 = partial67.size();
        boolean boolean74 = partial57.isEqual((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = partial75.toDateTime(readableInstant76);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = partial79.toDateTime(readableInstant80);
        org.joda.time.DateTime dateTime82 = partial78.toDateTime((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean83 = partial75.isAfter((org.joda.time.ReadablePartial) partial78);
        org.joda.time.Partial partial84 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial75);
        int int85 = partial57.compareTo((org.joda.time.ReadablePartial) partial75);
        boolean boolean86 = partial47.isEqual((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeField[] dateTimeFieldArray87 = partial47.getFields();
        org.joda.time.Partial partial88 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial47);
        int[] intArray89 = partial47.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = null;
        boolean boolean91 = partial47.isSupported(dateTimeFieldType90);
        int[] intArray92 = partial47.getValues();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = partial6.toString(dateTimeFormatter8);
        int int10 = partial6.size();
        int int11 = partial6.size();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial6.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        int int17 = partial15.indexOf(dateTimeFieldType16);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray20 = new int[] {};
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(dateTimeFieldTypeArray19, intArray20, chronology21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray20);
        org.joda.time.Partial partial24 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial23.without(dateTimeFieldType25);
        int int27 = partial23.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        org.joda.time.Partial partial29 = partial23.without(dateTimeFieldType28);
        boolean boolean30 = partial4.isAfter((org.joda.time.ReadablePartial) partial29);
        java.lang.Class<?> wildcardClass31 = partial4.getClass();
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = partial1.getFields();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial7 = partial1.with(dateTimeFieldType5, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        java.lang.String str32 = partial28.toString();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial38.isBefore((org.joda.time.ReadablePartial) partial39);
        boolean boolean41 = partial33.isBefore((org.joda.time.ReadablePartial) partial38);
        int[] intArray42 = partial33.getValues();
        boolean boolean43 = partial28.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = partial33.isSupported(dateTimeFieldType44);
        boolean boolean46 = partial19.isMatch((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial49 = partial33.withField(dateTimeFieldType47, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        int int13 = partial11.indexOf(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial11.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = partial3.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial3.toString(dateTimeFormatter5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial3.withPeriodAdded(readablePeriod7, (int) (byte) 100);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial10.isBefore((org.joda.time.ReadablePartial) partial11);
        boolean boolean13 = partial3.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial3.withPeriodAdded(readablePeriod14, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = partial3.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray19 = new int[] {};
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = new org.joda.time.Partial(dateTimeFieldTypeArray18, intArray19, chronology20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial(dateTimeFieldTypeArray17, intArray19);
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        int[] intArray33 = partial28.getValues();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray33, chronology34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        java.lang.String str41 = partial37.toString();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = partial43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        boolean boolean50 = partial42.isBefore((org.joda.time.ReadablePartial) partial47);
        int[] intArray51 = partial42.getValues();
        boolean boolean52 = partial37.isEqual((org.joda.time.ReadablePartial) partial42);
        int[] intArray53 = partial42.getValues();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray53, chronology73);
        org.joda.time.Partial partial75 = partial23.withChronologyRetainFields(chronology73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial76 = new org.joda.time.Partial(dateTimeFieldType0, (int) '4', chronology73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNull(dateTimeFormatter4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial75);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial8.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial16.withPeriodAdded(readablePeriod23, (int) ' ');
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial25.equals((java.lang.Object) boolean28);
        boolean boolean30 = partial1.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial1.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = partial1.getValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        java.lang.String str16 = partial9.toStringList();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean25 = partial17.isAfter((org.joda.time.ReadablePartial) partial20);
        boolean boolean26 = partial9.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial17.toString(dateTimeFormatter27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial17);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        java.lang.String str13 = partial9.toString();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial16 = partial9.withFieldAdded(durationFieldType14, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Partial partial9 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        int[] intArray10 = partial9.getValues();
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        int int20 = partial16.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        org.joda.time.Partial partial22 = partial16.without(dateTimeFieldType21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray24 = new int[] {};
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray24, chronology25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray28 = new int[] {};
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray28, chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray28);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = partial32.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = partial32.toString(dateTimeFormatter34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial32.withPeriodAdded(readablePeriod36, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial38.toString(dateTimeFormatter39);
        int[] intArray41 = partial38.getValues();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = partial46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime49 = partial45.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = partial42.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        int int52 = partial42.indexOf(dateTimeFieldType51);
        org.joda.time.Chronology chronology53 = partial42.getChronology();
        org.joda.time.Partial partial54 = new org.joda.time.Partial(chronology53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray41, chronology53);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial56.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Partial partial60 = partial57.withChronologyRetainFields(chronology59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Partial partial62 = partial57.plus(readablePeriod61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial65 = partial57.withPeriodAdded(readablePeriod63, (int) (byte) 10);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime70 = partial66.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        java.lang.String str72 = partial65.toStringList();
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = partial73.toDateTime(readableInstant74);
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = partial77.toDateTime(readableInstant78);
        org.joda.time.DateTime dateTime80 = partial76.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean81 = partial73.isAfter((org.joda.time.ReadablePartial) partial76);
        boolean boolean82 = partial65.isEqual((org.joda.time.ReadablePartial) partial73);
        int[] intArray83 = partial73.getValues();
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = partial84.getFormatter();
        org.joda.time.Partial partial86 = new org.joda.time.Partial();
        org.joda.time.Partial partial87 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.DateTime dateTime89 = partial87.toDateTime(readableInstant88);
        org.joda.time.DateTime dateTime90 = partial86.toDateTime((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.Partial partial91 = new org.joda.time.Partial();
        org.joda.time.Partial partial92 = new org.joda.time.Partial();
        boolean boolean93 = partial91.isBefore((org.joda.time.ReadablePartial) partial92);
        boolean boolean94 = partial86.isBefore((org.joda.time.ReadablePartial) partial91);
        int[] intArray95 = partial91.getValues();
        org.joda.time.Chronology chronology96 = partial91.getChronology();
        org.joda.time.Partial partial97 = partial84.withChronologyRetainFields(chronology96);
        org.joda.time.Partial partial98 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray83, chronology96);
        boolean boolean99 = partial16.isEqual((org.joda.time.ReadablePartial) partial98);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(partial62);
        org.junit.Assert.assertNotNull(partial65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter85);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(partial97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.Partial partial4 = partial0.plus(readablePeriod3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Partial partial11 = partial6.plus(readablePeriod10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial12.isBefore((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial13.withChronologyRetainFields(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        java.lang.String str22 = partial19.toString();
        boolean boolean23 = partial13.isAfter((org.joda.time.ReadablePartial) partial19);
        boolean boolean24 = partial11.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = partial25.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = partial25.toString(dateTimeFormatter27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial31 = partial25.withPeriodAdded(readablePeriod29, (int) (byte) 100);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial25.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial36.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = partial37.withChronologyRetainFields(chronology39);
        boolean boolean42 = partial37.equals((java.lang.Object) 10.0f);
        boolean boolean43 = partial25.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.Chronology chronology44 = partial25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial25.minus(readablePeriod45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = partial46.isSupported(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = partial46.getChronology();
        org.joda.time.Partial partial50 = partial19.withChronologyRetainFields(chronology49);
        boolean boolean51 = partial0.isEqual((org.joda.time.ReadablePartial) partial19);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial19.minus(readablePeriod52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = partial53.toString(dateTimeFormatter54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType57 = partial53.getFieldType((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(dateTimeFormatter26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeField[] dateTimeFieldArray76 = partial75.getFields();
        java.lang.String str77 = partial75.toStringList();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(dateTimeFieldArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[]" + "'", str77, "[]");
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = partial25.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        int int35 = partial7.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = partial7.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = partial7.indexOf(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        java.lang.String str18 = partial15.toString();
        boolean boolean19 = partial9.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = partial15.toDateTime(readableInstant21);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        boolean boolean30 = partial25.equals((java.lang.Object) 10.0f);
        int int31 = partial25.size();
        boolean boolean32 = partial15.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = partial0.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial41.plus(readablePeriod45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        java.lang.String str57 = partial54.toString();
        boolean boolean58 = partial48.isAfter((org.joda.time.ReadablePartial) partial54);
        boolean boolean59 = partial46.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = partial60.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial60.toString(dateTimeFormatter62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial66 = partial60.withPeriodAdded(readablePeriod64, (int) (byte) 100);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        boolean boolean69 = partial67.isBefore((org.joda.time.ReadablePartial) partial68);
        boolean boolean70 = partial60.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        boolean boolean73 = partial71.isBefore((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = partial72.withChronologyRetainFields(chronology74);
        boolean boolean77 = partial72.equals((java.lang.Object) 10.0f);
        boolean boolean78 = partial60.isMatch((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology79 = partial60.getChronology();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Partial partial81 = partial60.minus(readablePeriod80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = null;
        boolean boolean83 = partial81.isSupported(dateTimeFieldType82);
        org.joda.time.Chronology chronology84 = partial81.getChronology();
        org.joda.time.Partial partial85 = partial54.withChronologyRetainFields(chronology84);
        org.joda.time.Partial partial86 = partial25.withChronologyRetainFields(chronology84);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(dateTimeFormatter61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(partial81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(partial85);
        org.junit.Assert.assertNotNull(partial86);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial24.minus(readablePeriod25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial29 = partial26.with(dateTimeFieldType27, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = partial4.toString(dateTimeFormatter5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial20 = partial17.withPeriodAdded(readablePeriod18, (int) (short) 100);
        int int21 = partial8.compareTo((org.joda.time.ReadablePartial) partial20);
        java.lang.String str22 = partial8.toStringList();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = partial24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime27 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        boolean boolean31 = partial23.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Partial partial36 = partial33.withChronologyRetainFields(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial38 = partial33.plus(readablePeriod37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial33.withPeriodAdded(readablePeriod39, (int) (byte) 10);
        int int42 = partial28.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = partial41.isSupported(dateTimeFieldType43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (-1));
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Partial partial54 = partial49.plus(readablePeriod53);
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = partial55.toDateTime(readableInstant56);
        java.lang.String str58 = partial55.toString();
        boolean boolean59 = partial49.isAfter((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = partial60.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = partial60.toString(dateTimeFormatter62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial66 = partial60.withPeriodAdded(readablePeriod64, (int) (byte) 100);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        boolean boolean69 = partial67.isBefore((org.joda.time.ReadablePartial) partial68);
        boolean boolean70 = partial60.isBefore((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        boolean boolean73 = partial71.isBefore((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = partial72.withChronologyRetainFields(chronology74);
        boolean boolean77 = partial72.equals((java.lang.Object) 10.0f);
        boolean boolean78 = partial60.isMatch((org.joda.time.ReadablePartial) partial72);
        org.joda.time.Chronology chronology79 = partial60.getChronology();
        boolean boolean80 = partial49.isEqual((org.joda.time.ReadablePartial) partial60);
        int int81 = partial47.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray82 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray83 = new int[] {};
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Partial partial85 = new org.joda.time.Partial(dateTimeFieldTypeArray82, intArray83, chronology84);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = null;
        java.lang.String str87 = partial85.toString(dateTimeFormatter86);
        boolean boolean88 = partial47.isAfter((org.joda.time.ReadablePartial) partial85);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = partial47.getFormatter();
        int int90 = partial8.compareTo((org.joda.time.ReadablePartial) partial47);
        boolean boolean91 = partial4.isMatch((org.joda.time.ReadablePartial) partial8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray92 = partial4.getFieldTypes();
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(dateTimeFormatter61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[]" + "'", str63, "[]");
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[]" + "'", str87, "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(dateTimeFormatter89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray92);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = partial8.withChronologyRetainFields(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Partial partial13 = partial8.plus(readablePeriod12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial8.withPeriodAdded(readablePeriod14, (int) (byte) 10);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = partial18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime21 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial16.withPeriodAdded(readablePeriod23, (int) ' ');
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial25.equals((java.lang.Object) boolean28);
        boolean boolean30 = partial1.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial31 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial31.withPeriodAdded(readablePeriod32, (int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial31.toString(dateTimeFormatter35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int38 = partial31.get(dateTimeFieldType37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(partial11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = partial4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime7 = partial3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        boolean boolean8 = partial0.isAfter((org.joda.time.ReadablePartial) partial3);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = partial3.isSupported(dateTimeFieldType9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean21 = partial11.isMatch((org.joda.time.ReadablePartial) partial20);
        boolean boolean23 = partial20.equals((java.lang.Object) 10);
        java.lang.String str24 = partial20.toString();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial20.withPeriodAdded(readablePeriod25, (int) '4');
        int[] intArray28 = partial27.getValues();
        boolean boolean29 = partial3.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial32 = partial3.withField(dateTimeFieldType30, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = partial1.getFields();
        java.lang.String str5 = partial1.toString("[]");
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = partial1.get(dateTimeFieldType6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial0.minus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial9.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = partial9.toString(dateTimeFormatter11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial15 = partial9.withPeriodAdded(readablePeriod13, (int) (byte) 100);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        boolean boolean19 = partial9.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        boolean boolean26 = partial21.equals((java.lang.Object) 10.0f);
        boolean boolean27 = partial9.isMatch((org.joda.time.ReadablePartial) partial21);
        boolean boolean28 = partial0.isEqual((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        java.util.Locale locale37 = null;
        java.lang.String str38 = partial29.toString("[]", locale37);
        boolean boolean39 = partial9.isEqual((org.joda.time.ReadablePartial) partial29);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial46 = partial41.plus(readablePeriod45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial41.withPeriodAdded(readablePeriod47, (int) (byte) 10);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = partial51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime54 = partial50.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime55 = partial49.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = partial29.isMatch((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DurationFieldType durationFieldType57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial59 = partial29.withFieldAdded(durationFieldType57, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial5.withPeriodAdded(readablePeriod6, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray10 = new int[] {};
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray10, chronology11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime17 = partial13.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        int[] intArray18 = partial13.getValues();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldTypeArray9, intArray18, chronology19);
        boolean boolean21 = partial8.isMatch((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = partial20.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 1, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[]");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = partial6.toString(dateTimeFormatter7);
        int[] intArray9 = partial6.getValues();
        java.lang.Class<?> wildcardClass10 = intArray9.getClass();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        java.lang.String str29 = partial0.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial0.getFieldTypes();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial32.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = partial40.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial49 = partial40.withPeriodAdded(readablePeriod47, (int) ' ');
        org.joda.time.Chronology chronology50 = partial49.getChronology();
        int[] intArray51 = partial49.getValues();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = partial53.withChronologyRetainFields(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial53.plus(readablePeriod57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial53.withPeriodAdded(readablePeriod59, (int) (byte) 10);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial70 = partial61.withPeriodAdded(readablePeriod68, (int) ' ');
        org.joda.time.Chronology chronology71 = partial70.getChronology();
        org.joda.time.Partial partial72 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray51, chronology71);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray74 = new int[] {};
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(dateTimeFieldTypeArray73, intArray74, chronology75);
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = partial78.toDateTime(readableInstant79);
        org.joda.time.DateTime dateTime81 = partial77.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        int[] intArray82 = partial77.getValues();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.Partial partial84 = new org.joda.time.Partial(dateTimeFieldTypeArray73, intArray82, chronology83);
        org.joda.time.Partial partial85 = new org.joda.time.Partial(dateTimeFieldTypeArray30, intArray82);
        java.lang.String str86 = partial85.toStringList();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(partial70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "[]" + "'", str86, "[]");
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = new org.joda.time.Partial(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial16.withPeriodAdded(readablePeriod17, (int) (byte) 0);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = partial22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime25 = partial21.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        int[] intArray27 = partial20.getValues();
        boolean boolean28 = partial19.isMatch((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial29.isBefore((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Partial partial33 = partial30.withChronologyRetainFields(chronology32);
        java.lang.String str34 = partial30.toString();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial35.isBefore((org.joda.time.ReadablePartial) partial40);
        int[] intArray44 = partial35.getValues();
        boolean boolean45 = partial30.isEqual((org.joda.time.ReadablePartial) partial35);
        java.lang.String str46 = partial30.toStringList();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Partial partial56 = partial48.withPeriodAdded(readablePeriod54, (int) (byte) 10);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime61 = partial57.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = partial56.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime63 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = partial19.equals((java.lang.Object) dateTime63);
        boolean boolean65 = partial14.isMatch((org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial18.indexOf(dateTimeFieldType25);
        java.util.Locale locale28 = null;
        java.lang.String str29 = partial18.toString("[]", locale28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial18.withPeriodAdded(readablePeriod30, (int) (byte) 100);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(partial32);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] {};
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray5, chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        java.lang.String str16 = partial12.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial12.getFormatter();
        boolean boolean18 = partial10.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property20 = partial10.property(dateTimeFieldType19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray11 = new int[] {};
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray10, intArray11, chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial16 = partial13.withPeriodAdded(readablePeriod14, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial18 = partial13.plus(readablePeriod17);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = partial19.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = partial19.toString(dateTimeFormatter21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial19.withPeriodAdded(readablePeriod23, (int) (byte) 100);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        boolean boolean29 = partial19.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial19.withPeriodAdded(readablePeriod30, 0);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial33.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (int) (byte) 100);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial33.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial33.withPeriodAdded(readablePeriod44, 0);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        java.lang.String str52 = partial48.toString();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        boolean boolean61 = partial53.isBefore((org.joda.time.ReadablePartial) partial58);
        int[] intArray62 = partial53.getValues();
        boolean boolean63 = partial48.isEqual((org.joda.time.ReadablePartial) partial53);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.Partial partial66 = partial48.withPeriodAdded(readablePeriod64, (int) (short) 100);
        boolean boolean67 = partial33.isEqual((org.joda.time.ReadablePartial) partial66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial33.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime70 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime72 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeField[] dateTimeFieldArray73 = partial0.getFields();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNull(dateTimeFormatter20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldArray73);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray3 = new int[] {};
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray3, chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        int[] intArray11 = partial6.getValues();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray11, chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray15);
        org.joda.time.Partial partial19 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        java.lang.String str26 = partial22.toString();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial32.isBefore((org.joda.time.ReadablePartial) partial33);
        boolean boolean35 = partial27.isBefore((org.joda.time.ReadablePartial) partial32);
        int[] intArray36 = partial27.getValues();
        boolean boolean37 = partial22.isEqual((org.joda.time.ReadablePartial) partial27);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial22.withPeriodAdded(readablePeriod38, (int) (short) 100);
        boolean boolean41 = partial18.isMatch((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Partial partial46 = partial43.withChronologyRetainFields(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.Partial partial48 = partial43.plus(readablePeriod47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial51 = partial43.withPeriodAdded(readablePeriod49, (int) (byte) 10);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.DateTime dateTime56 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = partial51.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial51.withPeriodAdded(readablePeriod58, (int) ' ');
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = partial63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime66 = partial62.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        int int68 = partial60.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial61.getFieldTypes();
        boolean boolean70 = partial22.isBefore((org.joda.time.ReadablePartial) partial61);
        java.lang.String str71 = partial61.toStringList();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial3);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial7.minus(readablePeriod8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = partial9.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial15 = partial9.withField(dateTimeFieldType13, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        org.joda.time.Partial partial26 = partial24.without(dateTimeFieldType25);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = partial26.getValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray21 = new int[] {};
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray21, chronology22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime28 = partial24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        int[] intArray29 = partial24.getValues();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray29, chronology30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray33 = new int[] {};
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldTypeArray32, intArray33, chronology34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray42 = new int[] {};
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = new org.joda.time.Partial(dateTimeFieldTypeArray41, intArray42, chronology43);
        org.joda.time.Partial partial45 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray42);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray42, chronology46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial47.getFieldTypes();
        boolean boolean49 = partial19.isEqual((org.joda.time.ReadablePartial) partial47);
        java.util.Locale locale51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = partial47.toString("", locale51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType17 = partial9.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.DateTime dateTime2 = partial0.toDateTime(readableInstant1);
        boolean boolean4 = partial0.equals((java.lang.Object) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType6 = partial0.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField12 = partial9.getField((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = partial21.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        int int26 = partial21.indexOf(dateTimeFieldType25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        int int28 = partial21.indexOf(dateTimeFieldType27);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        org.joda.time.Partial partial19 = partial16.without(dateTimeFieldType18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial16.minus(readablePeriod20);
        int int22 = partial16.size();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial20.getFieldTypes();
        java.lang.String str24 = partial20.toString("[]");
        boolean boolean25 = partial18.isMatch((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial27.withChronologyRetainFields(chronology29);
        boolean boolean32 = partial27.equals((java.lang.Object) 10.0f);
        int int33 = partial27.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial27.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray36 = new int[] {};
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldTypeArray35, intArray36, chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial38.withPeriodAdded(readablePeriod39, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.Partial partial43 = partial38.plus(readablePeriod42);
        boolean boolean44 = partial27.isEqual((org.joda.time.ReadablePartial) partial43);
        boolean boolean45 = partial18.isMatch((org.joda.time.ReadablePartial) partial43);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        boolean boolean30 = partial24.isAfter((org.joda.time.ReadablePartial) partial29);
        int int31 = partial21.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        org.joda.time.Partial partial33 = partial24.without(dateTimeFieldType32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial33.toDateTime(readableInstant36);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = partial8.getFields();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = partial12.withChronologyRetainFields(chronology16);
        org.joda.time.Chronology chronology18 = partial17.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray20 = new int[] {};
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = new org.joda.time.Partial(dateTimeFieldTypeArray19, intArray20, chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial22.withPeriodAdded(readablePeriod23, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        int[] intArray35 = partial30.getValues();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray35, chronology36);
        boolean boolean38 = partial25.isMatch((org.joda.time.ReadablePartial) partial37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial25.plus(readablePeriod39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        boolean boolean42 = partial17.isEqual((org.joda.time.ReadablePartial) partial40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        boolean boolean44 = partial17.isSupported(dateTimeFieldType43);
        boolean boolean45 = partial8.isMatch((org.joda.time.ReadablePartial) partial17);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        int int47 = partial17.indexOf(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial17.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Partial partial21 = partial18.withChronologyRetainFields(chronology20);
        java.lang.String str22 = partial18.toString();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial18.withPeriodAdded(readablePeriod23, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray28 = new int[] {};
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray28, chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray28, chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial41 = partial25.plus(readablePeriod40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        boolean boolean44 = partial1.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial47 = partial1.with(dateTimeFieldType45, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = partial22.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = partial22.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial22.withChronologyRetainFields(chronology26);
        boolean boolean28 = partial0.equals((java.lang.Object) chronology26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime36 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        boolean boolean37 = partial29.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        int int39 = partial29.indexOf(dateTimeFieldType38);
        org.joda.time.Chronology chronology40 = partial29.getChronology();
        org.joda.time.Partial partial41 = new org.joda.time.Partial(chronology40);
        boolean boolean42 = partial0.isMatch((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int44 = partial41.get(dateTimeFieldType43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNull(dateTimeFormatter23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial34 = partial26.withPeriodAdded(readablePeriod32, (int) (byte) 10);
        int int35 = partial34.size();
        boolean boolean36 = partial18.isMatch((org.joda.time.ReadablePartial) partial34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial18.toString(dateTimeFormatter37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        int int40 = partial18.indexOf(dateTimeFieldType39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = partial41.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = partial41.toString(dateTimeFormatter43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.Partial partial47 = partial41.withPeriodAdded(readablePeriod45, (int) (byte) 100);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        boolean boolean51 = partial41.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial54 = partial41.withPeriodAdded(readablePeriod52, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = partial41.getFieldTypes();
        boolean boolean56 = partial18.isEqual((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial57.isBefore((org.joda.time.ReadablePartial) partial58);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = partial58.getFieldTypes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = partial58.getFormatter();
        org.joda.time.Chronology chronology62 = partial58.getChronology();
        org.joda.time.Partial partial63 = partial41.withChronologyRetainFields(chronology62);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(partial63);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial3.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial3.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial3.minus(readablePeriod8);
        int int10 = partial9.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial13 = partial9.with(dateTimeFieldType11, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial8.withPeriodAdded(readablePeriod11, (int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial13.getFieldTypes();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = partial15.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = partial15.toString(dateTimeFormatter17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.Partial partial21 = partial15.withPeriodAdded(readablePeriod19, (int) (byte) 100);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial22.isBefore((org.joda.time.ReadablePartial) partial23);
        boolean boolean25 = partial15.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = partial27.withChronologyRetainFields(chronology29);
        boolean boolean32 = partial27.equals((java.lang.Object) 10.0f);
        boolean boolean33 = partial15.isMatch((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Chronology chronology34 = partial15.getChronology();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial15.minus(readablePeriod35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = partial37.withChronologyRetainFields(chronology41);
        boolean boolean43 = partial15.equals((java.lang.Object) chronology41);
        java.lang.String str44 = partial15.toStringList();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial15.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray47 = new int[] {};
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = new org.joda.time.Partial(dateTimeFieldTypeArray46, intArray47, chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial49.withPeriodAdded(readablePeriod50, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray54 = new int[] {};
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Partial partial56 = new org.joda.time.Partial(dateTimeFieldTypeArray53, intArray54, chronology55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.DateTime dateTime61 = partial57.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        int[] intArray62 = partial57.getValues();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = new org.joda.time.Partial(dateTimeFieldTypeArray53, intArray62, chronology63);
        boolean boolean65 = partial52.isMatch((org.joda.time.ReadablePartial) partial64);
        int[] intArray66 = partial52.getValues();
        org.joda.time.Partial partial67 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray66);
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = partial68.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = null;
        java.lang.String str71 = partial68.toString(dateTimeFormatter70);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.Partial partial74 = partial68.withPeriodAdded(readablePeriod72, (int) (byte) 100);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        boolean boolean77 = partial75.isBefore((org.joda.time.ReadablePartial) partial76);
        boolean boolean78 = partial68.isBefore((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        boolean boolean81 = partial79.isBefore((org.joda.time.ReadablePartial) partial80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Partial partial83 = partial80.withChronologyRetainFields(chronology82);
        boolean boolean85 = partial80.equals((java.lang.Object) 10.0f);
        boolean boolean86 = partial68.isMatch((org.joda.time.ReadablePartial) partial80);
        org.joda.time.Chronology chronology87 = partial80.getChronology();
        org.joda.time.Chronology chronology88 = partial80.getChronology();
        org.joda.time.Partial partial89 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray66, chronology88);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(chronology88);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial0.getFieldTypes();
        java.lang.Class<?> wildcardClass15 = partial0.getClass();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial22.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial31.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Partial partial35 = partial32.withChronologyRetainFields(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial37 = partial32.plus(readablePeriod36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial40 = partial32.withPeriodAdded(readablePeriod38, (int) (byte) 10);
        int int41 = partial27.compareTo((org.joda.time.ReadablePartial) partial40);
        int int42 = partial21.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Partial partial47 = partial44.withChronologyRetainFields(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial49 = partial44.plus(readablePeriod48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial44.withPeriodAdded(readablePeriod50, (int) (byte) 10);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = partial52.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Partial partial61 = partial52.withPeriodAdded(readablePeriod59, (int) ' ');
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        boolean boolean65 = partial61.equals((java.lang.Object) boolean64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = partial61.toString(dateTimeFormatter66);
        boolean boolean68 = partial21.isEqual((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = partial70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime73 = partial69.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        boolean boolean77 = partial69.isBefore((org.joda.time.ReadablePartial) partial74);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        boolean boolean80 = partial78.isBefore((org.joda.time.ReadablePartial) partial79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Partial partial82 = partial79.withChronologyRetainFields(chronology81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.Partial partial84 = partial79.plus(readablePeriod83);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.Partial partial87 = partial79.withPeriodAdded(readablePeriod85, (int) (byte) 10);
        int int88 = partial74.compareTo((org.joda.time.ReadablePartial) partial87);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = null;
        boolean boolean90 = partial87.isSupported(dateTimeFieldType89);
        boolean boolean91 = partial21.isEqual((org.joda.time.ReadablePartial) partial87);
        java.util.Locale locale93 = null;
        java.lang.String str94 = partial87.toString("[]", locale93);
        org.joda.time.DurationFieldType durationFieldType95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial97 = partial87.withFieldAddWrapped(durationFieldType95, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[]" + "'", str94, "[]");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        boolean boolean6 = partial1.equals((java.lang.Object) 10.0f);
        int int7 = partial1.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray9 = new int[] {};
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray9, chronology10);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = partial13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime16 = partial12.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        int[] intArray17 = partial12.getValues();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray8, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = partial21.withChronologyRetainFields(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial26 = partial21.plus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial29 = partial21.withPeriodAdded(readablePeriod27, (int) (byte) 10);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial29.withPeriodAdded(readablePeriod36, (int) ' ');
        boolean boolean39 = partial19.isAfter((org.joda.time.ReadablePartial) partial29);
        boolean boolean40 = partial1.isBefore((org.joda.time.ReadablePartial) partial29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = partial29.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial2.withChronologyRetainFields(chronology6);
        org.joda.time.Chronology chronology8 = partial7.getChronology();
        org.joda.time.Partial partial9 = new org.joda.time.Partial(chronology8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 10, chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Chronology chronology9 = partial0.getChronology();
        java.lang.String str10 = partial0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial13 = partial0.withField(dateTimeFieldType11, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        boolean boolean4 = partial2.isBefore((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = partial3.withChronologyRetainFields(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        java.lang.String str12 = partial9.toString();
        boolean boolean13 = partial3.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = partial14.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial20 = partial14.withPeriodAdded(readablePeriod18, (int) (byte) 100);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        boolean boolean24 = partial14.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        boolean boolean31 = partial26.equals((java.lang.Object) 10.0f);
        boolean boolean32 = partial14.isMatch((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology33 = partial14.getChronology();
        boolean boolean34 = partial3.isEqual((org.joda.time.ReadablePartial) partial14);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial36 = partial14.minus(readablePeriod35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        boolean boolean45 = partial37.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology46 = partial37.getChronology();
        org.joda.time.Partial partial47 = new org.joda.time.Partial(chronology46);
        org.joda.time.Partial partial48 = partial36.withChronologyRetainFields(chronology46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial49 = new org.joda.time.Partial(dateTimeFieldType0, (int) (short) 1, chronology46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(partial48);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial7.toDateTime(readableInstant13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Partial partial20 = partial17.withChronologyRetainFields(chronology19);
        boolean boolean22 = partial17.equals((java.lang.Object) 10.0f);
        int int23 = partial17.size();
        boolean boolean24 = partial7.isEqual((org.joda.time.ReadablePartial) partial17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial17.getFormatter();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = partial17.getValue(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(dateTimeFormatter25);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = partial17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime20 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        int[] intArray21 = partial16.getValues();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray21, chronology22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        java.lang.String str29 = partial25.toString();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        boolean boolean38 = partial30.isBefore((org.joda.time.ReadablePartial) partial35);
        int[] intArray39 = partial30.getValues();
        boolean boolean40 = partial25.isEqual((org.joda.time.ReadablePartial) partial30);
        int[] intArray41 = partial30.getValues();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = partial42.toString(dateTimeFormatter44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial48 = partial42.withPeriodAdded(readablePeriod46, (int) (byte) 100);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        boolean boolean52 = partial42.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = partial54.withChronologyRetainFields(chronology56);
        boolean boolean59 = partial54.equals((java.lang.Object) 10.0f);
        boolean boolean60 = partial42.isMatch((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Chronology chronology61 = partial42.getChronology();
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray41, chronology61);
        int[] intArray63 = partial62.getValues();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial65.withChronologyRetainFields(chronology67);
        java.lang.String str69 = partial65.toString();
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Partial partial72 = partial65.withPeriodAdded(readablePeriod70, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray74 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray75 = new int[] {};
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Partial partial77 = new org.joda.time.Partial(dateTimeFieldTypeArray74, intArray75, chronology76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray73, intArray75, chronology78);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = partial81.toDateTime(readableInstant82);
        org.joda.time.DateTime dateTime84 = partial80.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = partial79.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime86 = partial72.toDateTime((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Chronology chronology87 = partial72.getChronology();
        org.joda.time.Partial partial88 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray63, chronology87);
        java.lang.Class<?> wildcardClass89 = chronology87.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertNotNull(partial72);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.Partial partial4 = partial1.withPeriodAdded(readablePeriod2, (int) (byte) 0);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = partial5.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        int[] intArray12 = partial5.getValues();
        boolean boolean13 = partial4.isMatch((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = partial14.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray17 = new int[] {};
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray17, chronology18);
        boolean boolean20 = partial14.isAfter((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = partial19.getFields();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = partial23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime26 = partial22.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        boolean boolean30 = partial22.isBefore((org.joda.time.ReadablePartial) partial27);
        java.lang.String str31 = partial22.toStringList();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime36 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        boolean boolean37 = partial22.isMatch((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial19.withPeriodAdded(readablePeriod39, (int) 'a');
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = partial42.getFormatter();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial50.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Partial partial55 = partial50.withChronologyRetainFields(chronology54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial50.isMatch((org.joda.time.ReadablePartial) partial56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = partial56.toString(dateTimeFormatter58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        boolean boolean62 = partial60.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = partial61.withChronologyRetainFields(chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.Partial partial66 = partial61.plus(readablePeriod65);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        java.lang.String str70 = partial67.toString();
        boolean boolean71 = partial61.isAfter((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = partial72.toDateTime(readableInstant73);
        org.joda.time.DateTime dateTime75 = partial67.toDateTime(readableInstant73);
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        boolean boolean78 = partial76.isBefore((org.joda.time.ReadablePartial) partial77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Partial partial80 = partial77.withChronologyRetainFields(chronology79);
        boolean boolean82 = partial77.equals((java.lang.Object) 10.0f);
        int int83 = partial77.size();
        boolean boolean84 = partial67.isEqual((org.joda.time.ReadablePartial) partial77);
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.Partial partial86 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.DateTime dateTime88 = partial86.toDateTime(readableInstant87);
        org.joda.time.DateTime dateTime89 = partial85.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime90 = partial77.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime91 = partial56.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean92 = partial49.isMatch((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean93 = partial42.isMatch((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime94 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean95 = partial4.isMatch((org.joda.time.ReadableInstant) dateTime88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = partial4.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertNull(dateTimeFormatter43);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNull(dateTimeFormatter51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = partial18.isSupported(dateTimeFieldType20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Partial partial24 = partial18.withPeriodAdded(readablePeriod22, (-1));
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial25.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = partial26.withChronologyRetainFields(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial31 = partial26.plus(readablePeriod30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = partial32.toDateTime(readableInstant33);
        java.lang.String str35 = partial32.toString();
        boolean boolean36 = partial26.isAfter((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = partial37.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = partial37.toString(dateTimeFormatter39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.Partial partial43 = partial37.withPeriodAdded(readablePeriod41, (int) (byte) 100);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial37.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial48.isBefore((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Partial partial52 = partial49.withChronologyRetainFields(chronology51);
        boolean boolean54 = partial49.equals((java.lang.Object) 10.0f);
        boolean boolean55 = partial37.isMatch((org.joda.time.ReadablePartial) partial49);
        org.joda.time.Chronology chronology56 = partial37.getChronology();
        boolean boolean57 = partial26.isEqual((org.joda.time.ReadablePartial) partial37);
        int int58 = partial24.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray60 = new int[] {};
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray60, chronology61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = partial62.toString(dateTimeFormatter63);
        boolean boolean65 = partial24.isAfter((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial66 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = partial66.getFormatter();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(dateTimeFormatter67);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial10.withPeriodAdded(readablePeriod16, (int) (byte) 10);
        int int19 = partial5.compareTo((org.joda.time.ReadablePartial) partial18);
        java.lang.String str20 = partial5.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray22 = new int[] {};
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray21, intArray22, chronology23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime29 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        int[] intArray30 = partial25.getValues();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray21, intArray30, chronology31);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial33.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial34.withChronologyRetainFields(chronology36);
        java.lang.String str38 = partial34.toString();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime43 = partial39.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        boolean boolean47 = partial39.isBefore((org.joda.time.ReadablePartial) partial44);
        int[] intArray48 = partial39.getValues();
        boolean boolean49 = partial34.isEqual((org.joda.time.ReadablePartial) partial39);
        int[] intArray50 = partial39.getValues();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = partial51.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = partial51.toString(dateTimeFormatter53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial51.withPeriodAdded(readablePeriod55, (int) (byte) 100);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial58.isBefore((org.joda.time.ReadablePartial) partial59);
        boolean boolean61 = partial51.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.Partial partial63 = new org.joda.time.Partial();
        boolean boolean64 = partial62.isBefore((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Partial partial66 = partial63.withChronologyRetainFields(chronology65);
        boolean boolean68 = partial63.equals((java.lang.Object) 10.0f);
        boolean boolean69 = partial51.isMatch((org.joda.time.ReadablePartial) partial63);
        org.joda.time.Chronology chronology70 = partial51.getChronology();
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray21, intArray50, chronology70);
        org.joda.time.Partial partial72 = partial5.withChronologyRetainFields(chronology70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField74 = partial72.getField((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(partial66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(partial72);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial24.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        boolean boolean30 = partial24.isAfter((org.joda.time.ReadablePartial) partial29);
        int int31 = partial21.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        org.joda.time.Partial partial33 = partial24.without(dateTimeFieldType32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial35 = partial33.plus(readablePeriod34);
        int[] intArray36 = partial33.getValues();
        org.joda.time.DurationFieldType durationFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial39 = partial33.withFieldAddWrapped(durationFieldType37, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = partial9.getFieldTypes();
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = partial9.toString("", locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial(chronology38);
        org.joda.time.Chronology chronology41 = partial40.getChronology();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial18.equals((java.lang.Object) boolean21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial29 = partial24.plus(readablePeriod28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        java.lang.String str33 = partial30.toString();
        boolean boolean34 = partial24.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = partial35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime38 = partial30.toDateTime(readableInstant36);
        boolean boolean39 = partial18.isAfter((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = partial40.toDateTime(readableInstant41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean48 = partial40.isAfter((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial40);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial51 = partial49.minus(readablePeriod50);
        boolean boolean52 = partial18.isEqual((org.joda.time.ReadablePartial) partial49);
        int int53 = partial49.size();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology55 = partial54.getChronology();
        org.joda.time.Partial partial56 = partial49.withChronologyRetainFields(chronology55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial56);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(partial56);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Chronology chronology10 = partial5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField12 = partial5.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial15.toDateTime(readableInstant16);
        java.lang.String str18 = partial15.toString();
        boolean boolean19 = partial9.isAfter((org.joda.time.ReadablePartial) partial15);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = partial15.toDateTime(readableInstant21);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        boolean boolean30 = partial25.equals((java.lang.Object) 10.0f);
        int int31 = partial25.size();
        boolean boolean32 = partial15.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = partial34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = partial33.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = partial25.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = partial0.isEqual((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = partial40.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = partial40.toString(dateTimeFormatter42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial46 = partial40.withPeriodAdded(readablePeriod44, (int) (byte) 100);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.Partial partial53 = partial48.plus(readablePeriod52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        java.lang.String str57 = partial54.toString();
        boolean boolean58 = partial48.isAfter((org.joda.time.ReadablePartial) partial54);
        boolean boolean59 = partial40.isEqual((org.joda.time.ReadablePartial) partial54);
        boolean boolean60 = partial25.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial61 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = partial62.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = null;
        java.lang.String str65 = partial62.toString(dateTimeFormatter64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Partial partial67 = partial62.withChronologyRetainFields(chronology66);
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        boolean boolean69 = partial62.isMatch((org.joda.time.ReadablePartial) partial68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = null;
        java.lang.String str71 = partial68.toString(dateTimeFormatter70);
        int int72 = partial68.size();
        int int73 = partial68.size();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.Partial partial75 = partial68.plus(readablePeriod74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.Partial partial77 = partial75.plus(readablePeriod76);
        boolean boolean78 = partial61.equals((java.lang.Object) readablePeriod76);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(dateTimeFormatter63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertNotNull(partial67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[]" + "'", str71, "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        int int8 = partial6.indexOf(dateTimeFieldType7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = partial10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime13 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        boolean boolean16 = partial14.isBefore((org.joda.time.ReadablePartial) partial15);
        boolean boolean17 = partial9.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial19.withPeriodAdded(readablePeriod25, (int) (byte) 10);
        int int28 = partial14.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = partial27.isSupported(dateTimeFieldType29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial27.withPeriodAdded(readablePeriod31, (-1));
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial40 = partial35.plus(readablePeriod39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = partial41.toDateTime(readableInstant42);
        java.lang.String str44 = partial41.toString();
        boolean boolean45 = partial35.isAfter((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = partial46.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = partial46.toString(dateTimeFormatter48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.Partial partial52 = partial46.withPeriodAdded(readablePeriod50, (int) (byte) 100);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial53.isBefore((org.joda.time.ReadablePartial) partial54);
        boolean boolean56 = partial46.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial57.isBefore((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Partial partial61 = partial58.withChronologyRetainFields(chronology60);
        boolean boolean63 = partial58.equals((java.lang.Object) 10.0f);
        boolean boolean64 = partial46.isMatch((org.joda.time.ReadablePartial) partial58);
        org.joda.time.Chronology chronology65 = partial46.getChronology();
        boolean boolean66 = partial35.isEqual((org.joda.time.ReadablePartial) partial46);
        int int67 = partial33.compareTo((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray69 = new int[] {};
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Partial partial71 = new org.joda.time.Partial(dateTimeFieldTypeArray68, intArray69, chronology70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = partial71.toString(dateTimeFormatter72);
        boolean boolean74 = partial33.isAfter((org.joda.time.ReadablePartial) partial71);
        boolean boolean75 = partial6.isEqual((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray76 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray77 = new int[] {};
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray76, intArray77, chronology78);
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.DateTime dateTime83 = partial81.toDateTime(readableInstant82);
        org.joda.time.DateTime dateTime84 = partial80.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        int[] intArray85 = partial80.getValues();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Partial partial87 = new org.joda.time.Partial(dateTimeFieldTypeArray76, intArray85, chronology86);
        org.joda.time.Partial partial88 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial87);
        boolean boolean89 = partial33.isMatch((org.joda.time.ReadablePartial) partial88);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray90 = partial33.getFieldTypes();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertNotNull(partial40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(dateTimeFormatter47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(partial52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(partial61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray90);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        boolean boolean17 = partial12.equals((java.lang.Object) 10.0f);
        boolean boolean18 = partial0.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology19 = partial0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.minus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = partial21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray25 = new int[] {};
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray24, intArray25, chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.Partial partial30 = partial27.withPeriodAdded(readablePeriod28, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray32 = new int[] {};
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = partial36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime39 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        int[] intArray40 = partial35.getValues();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray31, intArray40, chronology41);
        boolean boolean43 = partial30.isMatch((org.joda.time.ReadablePartial) partial42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.Partial partial45 = partial30.plus(readablePeriod44);
        boolean boolean46 = partial21.isAfter((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray48 = new int[] {};
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Partial partial50 = new org.joda.time.Partial(dateTimeFieldTypeArray47, intArray48, chronology49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Partial partial53 = partial50.withPeriodAdded(readablePeriod51, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray55 = new int[] {};
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Partial partial57 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray55, chronology56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = partial59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime62 = partial58.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        int[] intArray63 = partial58.getValues();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray54, intArray63, chronology64);
        boolean boolean66 = partial53.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = partial65.getChronology();
        boolean boolean68 = partial45.isMatch((org.joda.time.ReadablePartial) partial65);
        java.lang.Class<?> wildcardClass69 = partial65.getClass();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray30 = new int[] {};
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray29, intArray30, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray30, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray38 = new int[] {};
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldTypeArray37, intArray38, chronology39);
        boolean boolean41 = partial35.isAfter((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Chronology chronology42 = partial35.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray30, chronology42);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Partial partial49 = partial44.withChronologyRetainFields(chronology48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial44.isMatch((org.joda.time.ReadablePartial) partial50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = partial50.toString(dateTimeFormatter52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = partial54.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = partial54.toString(dateTimeFormatter56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial54.withPeriodAdded(readablePeriod58, (int) (byte) 100);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial61.isBefore((org.joda.time.ReadablePartial) partial62);
        boolean boolean64 = partial54.isBefore((org.joda.time.ReadablePartial) partial62);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        boolean boolean71 = partial66.equals((java.lang.Object) 10.0f);
        boolean boolean72 = partial54.isMatch((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology73 = partial54.getChronology();
        org.joda.time.Partial partial74 = partial50.withChronologyRetainFields(chronology73);
        org.joda.time.Partial partial75 = partial43.withChronologyRetainFields(chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = null;
        int int77 = partial43.indexOf(dateTimeFieldType76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        boolean boolean79 = partial43.isSupported(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(partial75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        java.lang.String str11 = partial0.toString("[]");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = partial0.isSupported(dateTimeFieldType13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial0.minus(readablePeriod15);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = partial16.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial20 = partial16.with(dateTimeFieldType18, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        java.lang.String str16 = partial12.toString();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Partial partial19 = partial12.withPeriodAdded(readablePeriod17, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray22 = new int[] {};
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Partial partial24 = new org.joda.time.Partial(dateTimeFieldTypeArray21, intArray22, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldTypeArray20, intArray22, chronology25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = partial26.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = partial0.getFormatter();
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = partial0.toString("", locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNull(dateTimeFormatter35);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        java.lang.String str11 = partial0.toString("[]");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = partial0.isSupported(dateTimeFieldType13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial16 = partial0.minus(readablePeriod15);
        java.lang.String str17 = partial16.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property19 = partial16.property(dateTimeFieldType18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial3.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial3.minus(readablePeriod6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Partial partial9 = partial3.minus(readablePeriod8);
        java.lang.String str10 = partial3.toStringList();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        boolean boolean32 = partial1.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        org.joda.time.Partial partial34 = partial12.without(dateTimeFieldType33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property36 = partial12.property(dateTimeFieldType35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(partial34);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial3.toString(dateTimeFormatter4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial7 = partial3.minus(readablePeriod6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        boolean boolean10 = partial8.isBefore((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial9.withChronologyRetainFields(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial9.plus(readablePeriod13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.Partial partial17 = partial9.withPeriodAdded(readablePeriod15, (int) (byte) 10);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = partial17.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial26 = partial17.withPeriodAdded(readablePeriod24, (int) ' ');
        org.joda.time.Chronology chronology27 = partial26.getChronology();
        org.joda.time.Partial partial28 = partial7.withChronologyRetainFields(chronology27);
        org.joda.time.Partial partial29 = new org.joda.time.Partial(chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int31 = partial29.get(dateTimeFieldType30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(partial26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(partial28);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.Partial partial4 = new org.joda.time.Partial();
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = partial5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime8 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        int[] intArray9 = partial4.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Partial partial11 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray9, chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray13 = new int[] {};
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = new org.joda.time.Partial(dateTimeFieldTypeArray12, intArray13, chronology14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Partial partial27 = partial19.withPeriodAdded(readablePeriod25, (int) (byte) 10);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = partial29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime32 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime33 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial27.withPeriodAdded(readablePeriod34, (int) ' ');
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial37.isBefore((org.joda.time.ReadablePartial) partial38);
        boolean boolean40 = partial36.equals((java.lang.Object) boolean39);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial42.plus(readablePeriod46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        java.lang.String str51 = partial48.toString();
        boolean boolean52 = partial42.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = partial53.toDateTime(readableInstant54);
        org.joda.time.DateTime dateTime56 = partial48.toDateTime(readableInstant54);
        boolean boolean57 = partial36.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = partial58.toDateTime(readableInstant59);
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial61.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = partial58.isAfter((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial67 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial58);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.Partial partial69 = partial67.minus(readablePeriod68);
        boolean boolean70 = partial36.isEqual((org.joda.time.ReadablePartial) partial67);
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = partial71.getFormatter();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray74 = new int[] {};
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Partial partial76 = new org.joda.time.Partial(dateTimeFieldTypeArray73, intArray74, chronology75);
        boolean boolean77 = partial71.isAfter((org.joda.time.ReadablePartial) partial76);
        org.joda.time.Chronology chronology78 = partial71.getChronology();
        boolean boolean79 = partial36.equals((java.lang.Object) chronology78);
        boolean boolean80 = partial17.isEqual((org.joda.time.ReadablePartial) partial36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        org.joda.time.DateTime dateTime10 = partial6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        boolean boolean14 = partial6.isBefore((org.joda.time.ReadablePartial) partial11);
        int[] intArray15 = partial6.getValues();
        boolean boolean16 = partial1.isEqual((org.joda.time.ReadablePartial) partial6);
        java.lang.String str17 = partial1.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = partial1.isSupported(dateTimeFieldType18);
        org.joda.time.DurationFieldType durationFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial22 = partial1.withFieldAdded(durationFieldType20, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.util.Locale locale6 = null;
        java.lang.String str7 = partial4.toString("[]", locale6);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = partial2.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = partial2.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial2.withChronologyRetainFields(chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial24 = partial19.plus(readablePeriod23);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = partial25.toDateTime(readableInstant26);
        java.lang.String str28 = partial25.toString();
        boolean boolean29 = partial19.isAfter((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial25.toDateTime(readableInstant31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Partial partial38 = partial35.withChronologyRetainFields(chronology37);
        boolean boolean40 = partial35.equals((java.lang.Object) 10.0f);
        int int41 = partial35.size();
        boolean boolean42 = partial25.isEqual((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean50 = partial7.isMatch((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean51 = partial0.isMatch((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str52 = partial0.toString();
        java.lang.String str53 = partial0.toStringList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = partial0.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(dateTimeFormatter3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial7);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertNotNull(partial24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = partial28.withChronologyRetainFields(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Partial partial33 = partial28.plus(readablePeriod32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Partial partial36 = partial28.withPeriodAdded(readablePeriod34, (int) (byte) 10);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = partial38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime41 = partial37.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.Partial partial45 = partial36.withPeriodAdded(readablePeriod43, (int) ' ');
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial45.equals((java.lang.Object) boolean48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial50.isBefore((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Partial partial54 = partial51.withChronologyRetainFields(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial56 = partial51.plus(readablePeriod55);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        java.lang.String str60 = partial57.toString();
        boolean boolean61 = partial51.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = partial62.toDateTime(readableInstant63);
        org.joda.time.DateTime dateTime65 = partial57.toDateTime(readableInstant63);
        boolean boolean66 = partial45.isAfter((org.joda.time.ReadablePartial) partial57);
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = partial71.toDateTime(readableInstant72);
        org.joda.time.DateTime dateTime74 = partial70.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean75 = partial67.isAfter((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Partial partial76 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial67);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Partial partial78 = partial76.minus(readablePeriod77);
        boolean boolean79 = partial45.isEqual((org.joda.time.ReadablePartial) partial76);
        int int80 = partial76.size();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology82 = partial81.getChronology();
        org.joda.time.Partial partial83 = partial76.withChronologyRetainFields(chronology82);
        org.joda.time.Partial partial84 = partial18.withChronologyRetainFields(chronology82);
        org.joda.time.Partial partial85 = new org.joda.time.Partial(chronology82);
        org.joda.time.DateTimeField[] dateTimeFieldArray86 = partial85.getFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(partial31);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertNotNull(partial36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(partial54);
        org.junit.Assert.assertNotNull(partial56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(dateTimeFieldArray86);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray27 = new int[] {};
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray27, chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Partial partial32 = partial29.withPeriodAdded(readablePeriod30, (int) (short) 100);
        int int33 = partial20.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial20);
        boolean boolean35 = partial0.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = partial36.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = partial36.toString(dateTimeFormatter38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial42 = partial36.withPeriodAdded(readablePeriod40, (int) (byte) 100);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        boolean boolean45 = partial43.isBefore((org.joda.time.ReadablePartial) partial44);
        boolean boolean46 = partial36.isBefore((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial47.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Partial partial51 = partial48.withChronologyRetainFields(chronology50);
        boolean boolean53 = partial48.equals((java.lang.Object) 10.0f);
        boolean boolean54 = partial36.isMatch((org.joda.time.ReadablePartial) partial48);
        org.joda.time.Chronology chronology55 = partial36.getChronology();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.Partial partial57 = partial36.minus(readablePeriod56);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Partial partial63 = partial58.withChronologyRetainFields(chronology62);
        boolean boolean64 = partial36.equals((java.lang.Object) chronology62);
        java.lang.String str65 = partial36.toStringList();
        java.util.Locale locale67 = null;
        java.lang.String str68 = partial36.toString("[]", locale67);
        boolean boolean69 = partial34.isBefore((org.joda.time.ReadablePartial) partial36);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = partial36.getValue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertNotNull(partial32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(dateTimeFormatter37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(partial51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        java.lang.String str11 = partial0.toString("[]");
        java.lang.String str12 = partial0.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = partial12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime15 = partial11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int[] intArray16 = partial11.getValues();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Partial partial18 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray16, chronology17);
        boolean boolean19 = partial6.isMatch((org.joda.time.ReadablePartial) partial18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial6.plus(readablePeriod20);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = partial21.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int24 = partial21.get(dateTimeFieldType23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial9.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        int int26 = partial18.compareTo((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial19.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray29 = new int[] {};
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray29, chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = partial33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime36 = partial32.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        int[] intArray37 = partial32.getValues();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray37, chronology38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Partial partial44 = partial41.withChronologyRetainFields(chronology43);
        java.lang.String str45 = partial41.toString();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        boolean boolean54 = partial46.isBefore((org.joda.time.ReadablePartial) partial51);
        int[] intArray55 = partial46.getValues();
        boolean boolean56 = partial41.isEqual((org.joda.time.ReadablePartial) partial46);
        int[] intArray57 = partial46.getValues();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = partial58.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = partial58.toString(dateTimeFormatter60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.Partial partial64 = partial58.withPeriodAdded(readablePeriod62, (int) (byte) 100);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        boolean boolean68 = partial58.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial69.isBefore((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = partial70.withChronologyRetainFields(chronology72);
        boolean boolean75 = partial70.equals((java.lang.Object) 10.0f);
        boolean boolean76 = partial58.isMatch((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Chronology chronology77 = partial58.getChronology();
        org.joda.time.Partial partial78 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray57, chronology77);
        org.joda.time.Partial partial79 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray57);
        int[] intArray80 = partial79.getValues();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(partial73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial0.withPeriodAdded(readablePeriod4, (int) (byte) 100);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial0.isBefore((org.joda.time.ReadablePartial) partial8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial0.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        org.joda.time.Partial partial15 = partial0.without(dateTimeFieldType14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray17 = new int[] {};
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Partial partial19 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray17, chronology18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = partial21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime24 = partial20.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        int[] intArray25 = partial20.getValues();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray25, chronology26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray29 = new int[] {};
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray29, chronology30);
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray16, intArray29);
        org.joda.time.Partial partial33 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        org.joda.time.Partial partial35 = partial32.without(dateTimeFieldType34);
        int int36 = partial32.size();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = partial37.toDateTime(readableInstant38);
        java.lang.String str40 = partial37.toString();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        java.lang.String str46 = partial42.toString();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = partial48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime51 = partial47.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial52.isBefore((org.joda.time.ReadablePartial) partial53);
        boolean boolean55 = partial47.isBefore((org.joda.time.ReadablePartial) partial52);
        int[] intArray56 = partial47.getValues();
        boolean boolean57 = partial42.isEqual((org.joda.time.ReadablePartial) partial47);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.Partial partial60 = partial42.withPeriodAdded(readablePeriod58, (int) (short) 100);
        boolean boolean61 = partial37.isEqual((org.joda.time.ReadablePartial) partial42);
        boolean boolean62 = partial32.isAfter((org.joda.time.ReadablePartial) partial37);
        boolean boolean63 = partial15.isEqual((org.joda.time.ReadablePartial) partial32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType65 = partial32.getFieldType(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[]");
        org.junit.Assert.assertNotNull(partial35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(partial60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray5 = new int[] {};
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldTypeArray4, intArray5, chronology6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Partial partial10 = partial8.plus(readablePeriod9);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        java.lang.String str16 = partial12.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = partial12.getFormatter();
        boolean boolean18 = partial10.isMatch((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = partial26.toDateTime(readableInstant27);
        java.lang.String str29 = partial26.toString();
        boolean boolean30 = partial20.isAfter((org.joda.time.ReadablePartial) partial26);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = partial31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = partial26.toDateTime(readableInstant32);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = partial36.withChronologyRetainFields(chronology38);
        boolean boolean41 = partial36.equals((java.lang.Object) 10.0f);
        int int42 = partial36.size();
        boolean boolean43 = partial26.isEqual((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = partial45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime48 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = partial36.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        java.util.Locale locale51 = null;
        java.lang.String str52 = partial36.toString("[]", locale51);
        boolean boolean53 = partial12.isAfter((org.joda.time.ReadablePartial) partial36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial5.getValues();
        org.joda.time.Chronology chronology10 = partial5.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Partial partial25 = partial12.withPeriodAdded(readablePeriod23, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial12.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray28 = new int[] {};
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Partial partial30 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray28, chronology29);
        org.joda.time.Partial partial31 = new org.joda.time.Partial(dateTimeFieldTypeArray26, intArray28);
        org.joda.time.Partial partial32 = new org.joda.time.Partial(dateTimeFieldTypeArray11, intArray28);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial33.isBefore((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Partial partial37 = partial34.withChronologyRetainFields(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.Partial partial39 = partial34.plus(readablePeriod38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Partial partial42 = partial34.withPeriodAdded(readablePeriod40, (int) (byte) 10);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = partial44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime47 = partial43.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = partial42.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        java.lang.String str49 = partial42.toStringList();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = partial50.toDateTime(readableInstant51);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = partial54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime57 = partial53.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean58 = partial50.isAfter((org.joda.time.ReadablePartial) partial53);
        boolean boolean59 = partial42.isEqual((org.joda.time.ReadablePartial) partial50);
        int[] intArray60 = partial50.getValues();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = partial61.toDateTime(readableInstant62);
        java.lang.String str64 = partial61.toString();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial65.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Partial partial69 = partial66.withChronologyRetainFields(chronology68);
        java.lang.String str70 = partial66.toString();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = partial72.toDateTime(readableInstant73);
        org.joda.time.DateTime dateTime75 = partial71.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Partial partial76 = new org.joda.time.Partial();
        org.joda.time.Partial partial77 = new org.joda.time.Partial();
        boolean boolean78 = partial76.isBefore((org.joda.time.ReadablePartial) partial77);
        boolean boolean79 = partial71.isBefore((org.joda.time.ReadablePartial) partial76);
        int[] intArray80 = partial71.getValues();
        boolean boolean81 = partial66.isEqual((org.joda.time.ReadablePartial) partial71);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        org.joda.time.Partial partial84 = partial66.withPeriodAdded(readablePeriod82, (int) (short) 100);
        boolean boolean85 = partial61.isEqual((org.joda.time.ReadablePartial) partial66);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = null;
        org.joda.time.Partial partial87 = partial66.without(dateTimeFieldType86);
        org.joda.time.Chronology chronology88 = partial87.getChronology();
        org.joda.time.Partial partial89 = new org.joda.time.Partial(dateTimeFieldTypeArray11, intArray60, chronology88);
        boolean boolean90 = partial5.equals((java.lang.Object) partial89);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(partial42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[]" + "'", str70, "[]");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        java.util.Locale locale7 = null;
        java.lang.String str8 = partial0.toString("[]", locale7);
        org.joda.time.Chronology chronology9 = partial0.getChronology();
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        boolean boolean4 = partial2.isBefore((org.joda.time.ReadablePartial) partial3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = partial3.withChronologyRetainFields(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = partial9.toDateTime(readableInstant10);
        java.lang.String str12 = partial9.toString();
        boolean boolean13 = partial3.isAfter((org.joda.time.ReadablePartial) partial9);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = partial14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime17 = partial9.toDateTime(readableInstant15);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Partial partial22 = partial19.withChronologyRetainFields(chronology21);
        boolean boolean24 = partial19.equals((java.lang.Object) 10.0f);
        int int25 = partial19.size();
        boolean boolean26 = partial9.isEqual((org.joda.time.ReadablePartial) partial19);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        java.util.Locale locale34 = null;
        java.lang.String str35 = partial19.toString("[]", locale34);
        org.joda.time.Chronology chronology36 = partial19.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial37 = new org.joda.time.Partial(dateTimeFieldType0, 100, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(partial22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial9 = partial1.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = partial11.toDateTime(readableInstant12);
        org.joda.time.DateTime dateTime14 = partial10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        java.lang.String str16 = partial9.toStringList();
        java.lang.String str17 = partial9.toStringList();
        org.joda.time.DurationFieldType durationFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial20 = partial9.withFieldAddWrapped(durationFieldType18, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        java.lang.String str5 = partial1.toString();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.Partial partial8 = partial1.withPeriodAdded(readablePeriod6, (int) (short) 10);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        boolean boolean11 = partial9.isBefore((org.joda.time.ReadablePartial) partial10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial10.withChronologyRetainFields(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial10.plus(readablePeriod14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        java.lang.String str19 = partial16.toString();
        boolean boolean20 = partial10.isAfter((org.joda.time.ReadablePartial) partial16);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial21.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = partial22.withChronologyRetainFields(chronology24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial27 = partial22.plus(readablePeriod26);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        java.lang.String str31 = partial28.toString();
        boolean boolean32 = partial22.isAfter((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = partial33.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = partial33.toString(dateTimeFormatter35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (int) (byte) 100);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial40.isBefore((org.joda.time.ReadablePartial) partial41);
        boolean boolean43 = partial33.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial44.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Partial partial48 = partial45.withChronologyRetainFields(chronology47);
        boolean boolean50 = partial45.equals((java.lang.Object) 10.0f);
        boolean boolean51 = partial33.isMatch((org.joda.time.ReadablePartial) partial45);
        org.joda.time.Chronology chronology52 = partial33.getChronology();
        boolean boolean53 = partial22.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean54 = partial16.isEqual((org.joda.time.ReadablePartial) partial33);
        boolean boolean55 = partial8.isAfter((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial33.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial58 = partial33.plus(readablePeriod57);
        java.lang.String str59 = partial58.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        boolean boolean61 = partial58.isSupported(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(dateTimeFormatter34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(partial48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Partial partial23 = partial20.withChronologyRetainFields(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Partial partial25 = partial20.plus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Partial partial28 = partial20.withPeriodAdded(readablePeriod26, (int) (byte) 10);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.Partial partial37 = partial28.withPeriodAdded(readablePeriod35, (int) ' ');
        org.joda.time.Chronology chronology38 = partial37.getChronology();
        org.joda.time.Partial partial39 = partial0.withChronologyRetainFields(chronology38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial39.getFieldTypes();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial41.isBefore((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Partial partial45 = partial42.withChronologyRetainFields(chronology44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.Partial partial47 = partial42.plus(readablePeriod46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial42.withPeriodAdded(readablePeriod48, (int) (byte) 10);
        boolean boolean51 = partial39.isMatch((org.joda.time.ReadablePartial) partial50);
        java.lang.String str53 = partial39.toString("[]");
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial54.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Partial partial58 = partial55.withChronologyRetainFields(chronology57);
        boolean boolean60 = partial55.equals((java.lang.Object) 10.0f);
        int int61 = partial55.size();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray63 = new int[] {};
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray62, intArray63, chronology64);
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = partial67.toDateTime(readableInstant68);
        org.joda.time.DateTime dateTime70 = partial66.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        int[] intArray71 = partial66.getValues();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Partial partial73 = new org.joda.time.Partial(dateTimeFieldTypeArray62, intArray71, chronology72);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial74.isBefore((org.joda.time.ReadablePartial) partial75);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Partial partial78 = partial75.withChronologyRetainFields(chronology77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Partial partial80 = partial75.plus(readablePeriod79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.Partial partial83 = partial75.withPeriodAdded(readablePeriod81, (int) (byte) 10);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.Partial partial85 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = partial85.toDateTime(readableInstant86);
        org.joda.time.DateTime dateTime88 = partial84.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime dateTime89 = partial83.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.Partial partial92 = partial83.withPeriodAdded(readablePeriod90, (int) ' ');
        boolean boolean93 = partial73.isAfter((org.joda.time.ReadablePartial) partial83);
        int int94 = partial55.compareTo((org.joda.time.ReadablePartial) partial73);
        boolean boolean95 = partial39.isAfter((org.joda.time.ReadablePartial) partial73);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(partial23);
        org.junit.Assert.assertNotNull(partial25);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(partial45);
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(partial58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[]");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(partial78);
        org.junit.Assert.assertNotNull(partial80);
        org.junit.Assert.assertNotNull(partial83);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(partial92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = partial1.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial6 = partial1.with(dateTimeFieldType4, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = partial3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime6 = partial2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        boolean boolean9 = partial7.isBefore((org.joda.time.ReadablePartial) partial8);
        boolean boolean10 = partial2.isBefore((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        boolean boolean13 = partial11.isBefore((org.joda.time.ReadablePartial) partial12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Partial partial15 = partial12.withChronologyRetainFields(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial17 = partial12.plus(readablePeriod16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Partial partial20 = partial12.withPeriodAdded(readablePeriod18, (int) (byte) 10);
        int int21 = partial7.compareTo((org.joda.time.ReadablePartial) partial20);
        java.lang.String str22 = partial7.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray24 = new int[] {};
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Partial partial26 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray24, chronology25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = partial28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime31 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        int[] intArray32 = partial27.getValues();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray32, chronology33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial35.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Partial partial39 = partial36.withChronologyRetainFields(chronology38);
        java.lang.String str40 = partial36.toString();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = partial42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime45 = partial41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial46.isBefore((org.joda.time.ReadablePartial) partial47);
        boolean boolean49 = partial41.isBefore((org.joda.time.ReadablePartial) partial46);
        int[] intArray50 = partial41.getValues();
        boolean boolean51 = partial36.isEqual((org.joda.time.ReadablePartial) partial41);
        int[] intArray52 = partial41.getValues();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = partial53.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = partial53.toString(dateTimeFormatter55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.Partial partial59 = partial53.withPeriodAdded(readablePeriod57, (int) (byte) 100);
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        boolean boolean62 = partial60.isBefore((org.joda.time.ReadablePartial) partial61);
        boolean boolean63 = partial53.isBefore((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial64.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Partial partial68 = partial65.withChronologyRetainFields(chronology67);
        boolean boolean70 = partial65.equals((java.lang.Object) 10.0f);
        boolean boolean71 = partial53.isMatch((org.joda.time.ReadablePartial) partial65);
        org.joda.time.Chronology chronology72 = partial53.getChronology();
        org.joda.time.Partial partial73 = new org.joda.time.Partial(dateTimeFieldTypeArray23, intArray52, chronology72);
        org.joda.time.Partial partial74 = partial7.withChronologyRetainFields(chronology72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial75 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) -1, chronology72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[]" + "'", str56, "[]");
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(partial74);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = partial0.getFormatter();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Partial partial7 = partial0.withChronologyRetainFields(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = partial7.getValue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(partial7);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray8 = new int[] {};
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray8, chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial10.withPeriodAdded(readablePeriod11, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray15 = new int[] {};
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Partial partial17 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray15, chronology16);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = partial19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime22 = partial18.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        int[] intArray23 = partial18.getValues();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray23, chronology24);
        boolean boolean26 = partial13.isMatch((org.joda.time.ReadablePartial) partial25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Partial partial28 = partial13.plus(readablePeriod27);
        org.joda.time.Chronology chronology29 = partial28.getChronology();
        org.joda.time.Partial partial30 = partial6.withChronologyRetainFields(chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = partial6.getFormatter();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = partial32.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = partial32.toString(dateTimeFormatter34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.Partial partial38 = partial32.withPeriodAdded(readablePeriod36, (int) (byte) 100);
        boolean boolean39 = partial6.isBefore((org.joda.time.ReadablePartial) partial38);
        java.lang.String str41 = partial6.toString("[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(dateTimeFormatter33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[]" + "'", str41, "[]");
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = partial0.toString(dateTimeFormatter2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Partial partial5 = partial0.withChronologyRetainFields(chronology4);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial0.isMatch((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = partial8.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = partial8.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Partial partial13 = partial8.withChronologyRetainFields(chronology12);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial8.isMatch((org.joda.time.ReadablePartial) partial14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = partial14.toString(dateTimeFormatter16);
        boolean boolean18 = partial0.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = partial20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime23 = partial19.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        boolean boolean27 = partial19.isBefore((org.joda.time.ReadablePartial) partial24);
        int[] intArray28 = partial24.getValues();
        org.joda.time.Chronology chronology29 = partial24.getChronology();
        boolean boolean30 = partial0.isEqual((org.joda.time.ReadablePartial) partial24);
        java.util.Locale locale32 = null;
        java.lang.String str33 = partial0.toString("[]", locale32);
        org.junit.Assert.assertNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(partial5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = partial12.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = partial12.toString(dateTimeFormatter14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Partial partial18 = partial12.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial19.isBefore((org.joda.time.ReadablePartial) partial20);
        boolean boolean22 = partial12.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        boolean boolean29 = partial24.equals((java.lang.Object) 10.0f);
        boolean boolean30 = partial12.isMatch((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology31 = partial12.getChronology();
        boolean boolean32 = partial1.isEqual((org.joda.time.ReadablePartial) partial12);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Partial partial34 = partial12.minus(readablePeriod33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = partial35.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = partial35.toString(dateTimeFormatter37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.Partial partial41 = partial35.withPeriodAdded(readablePeriod39, (int) (byte) 100);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial42.isBefore((org.joda.time.ReadablePartial) partial43);
        boolean boolean45 = partial35.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = partial47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime50 = partial46.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        boolean boolean54 = partial46.isBefore((org.joda.time.ReadablePartial) partial51);
        java.lang.String str55 = partial46.toStringList();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = partial57.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime60 = partial56.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean61 = partial46.isMatch((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = partial35.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Partial partial64 = partial35.withChronologyRetainFields(chronology63);
        int int65 = partial34.compareTo((org.joda.time.ReadablePartial) partial35);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimeFormatter13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(partial34);
        org.junit.Assert.assertNull(dateTimeFormatter36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(partial41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        boolean boolean2 = partial0.isBefore((org.joda.time.ReadablePartial) partial1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = partial1.withChronologyRetainFields(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.Partial partial6 = partial1.plus(readablePeriod5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = partial7.toDateTime(readableInstant8);
        java.lang.String str10 = partial7.toString();
        boolean boolean11 = partial1.isAfter((org.joda.time.ReadablePartial) partial7);
        java.lang.String str12 = partial7.toStringList();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Partial partial14 = partial7.minus(readablePeriod13);
        org.joda.time.DurationFieldType durationFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial17 = partial14.withFieldAddWrapped(durationFieldType15, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(partial14);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Partial partial9 = partial6.withChronologyRetainFields(chronology8);
        boolean boolean10 = partial0.isMatch((org.joda.time.ReadablePartial) partial9);
        boolean boolean12 = partial9.equals((java.lang.Object) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = partial9.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(partial9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray1 = new int[] {};
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray1, chronology2);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.Partial partial6 = partial3.withPeriodAdded(readablePeriod4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.Partial partial8 = partial3.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        int int10 = partial8.indexOf(dateTimeFieldType9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.Partial partial13 = partial8.withPeriodAdded(readablePeriod11, (int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.Partial partial15 = partial13.plus(readablePeriod14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = partial15.isSupported(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertNotNull(partial6);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(partial15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.DateTime dateTime3 = partial1.toDateTime(readableInstant2);
        org.joda.time.DateTime dateTime4 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        boolean boolean7 = partial5.isBefore((org.joda.time.ReadablePartial) partial6);
        boolean boolean8 = partial0.isBefore((org.joda.time.ReadablePartial) partial5);
        int[] intArray9 = partial0.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = partial0.getFormatter();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = partial11.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = partial11.toString(dateTimeFormatter13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Partial partial16 = partial11.withChronologyRetainFields(chronology15);
        java.util.Locale locale18 = null;
        java.lang.String str19 = partial11.toString("[]", locale18);
        boolean boolean20 = partial0.isAfter((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = partial0.isSupported(dateTimeFieldType21);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Partial partial27 = partial24.withChronologyRetainFields(chronology26);
        java.lang.String str28 = partial24.toString();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = partial30.toDateTime(readableInstant31);
        org.joda.time.DateTime dateTime33 = partial29.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        boolean boolean37 = partial29.isBefore((org.joda.time.ReadablePartial) partial34);
        int[] intArray38 = partial29.getValues();
        boolean boolean39 = partial24.isEqual((org.joda.time.ReadablePartial) partial29);
        java.lang.String str40 = partial24.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = partial24.isSupported(dateTimeFieldType41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = null;
        org.joda.time.Partial partial44 = partial24.without(dateTimeFieldType43);
        int int45 = partial0.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.DurationFieldType durationFieldType46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial48 = partial44.withFieldAdded(durationFieldType46, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(partial44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray2 = new int[] {};
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Partial partial4 = new org.joda.time.Partial(dateTimeFieldTypeArray1, intArray2, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Partial partial6 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray2, chronology5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = partial7.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = partial7.toString(dateTimeFormatter9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Partial partial12 = partial7.withChronologyRetainFields(chronology11);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        boolean boolean14 = partial7.isMatch((org.joda.time.ReadablePartial) partial13);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = partial16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime19 = partial15.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        boolean boolean23 = partial15.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial24.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Partial partial28 = partial25.withChronologyRetainFields(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Partial partial30 = partial25.plus(readablePeriod29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Partial partial33 = partial25.withPeriodAdded(readablePeriod31, (int) (byte) 10);
        int int34 = partial20.compareTo((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = partial33.isSupported(dateTimeFieldType35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Partial partial39 = partial33.withPeriodAdded(readablePeriod37, (-1));
        boolean boolean40 = partial13.isMatch((org.joda.time.ReadablePartial) partial39);
        int[] intArray41 = partial39.getValues();
        org.joda.time.Partial partial42 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = partial44.getFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = partial44.toString(dateTimeFormatter46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.Partial partial50 = partial44.withPeriodAdded(readablePeriod48, (int) (byte) 100);
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial51.isBefore((org.joda.time.ReadablePartial) partial52);
        boolean boolean54 = partial44.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.Partial partial57 = partial44.withPeriodAdded(readablePeriod55, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = partial44.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = new org.joda.time.DateTimeFieldType[] {};
        int[] intArray60 = new int[] {};
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray59, intArray60, chronology61);
        org.joda.time.Partial partial63 = new org.joda.time.Partial(dateTimeFieldTypeArray58, intArray60);
        org.joda.time.Partial partial64 = new org.joda.time.Partial(dateTimeFieldTypeArray43, intArray60);
        org.joda.time.Partial partial65 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray60);
        org.joda.time.Partial partial66 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial65);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]");
        org.junit.Assert.assertNull(dateTimeFormatter8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(partial28);
        org.junit.Assert.assertNotNull(partial30);
        org.junit.Assert.assertNotNull(partial33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(partial39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(partial57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
    }
}


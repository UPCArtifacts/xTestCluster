import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        java.lang.Class<?> wildcardClass6 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        java.lang.Class<?> wildcardClass11 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        frequency1.addValue('a');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Integer) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long1 = frequency0.getSumFreq();
        long long3 = frequency0.getCumFreq((long) 1);
        java.lang.Object obj4 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long5 = frequency0.getCount(obj4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        double double11 = frequency1.getCumPct((long) '4');
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCount((java.lang.Object) 100.0f);
        frequency13.addValue((java.lang.Integer) (-1));
        double double21 = frequency13.getPct(' ');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        double double11 = frequency1.getPct((-1L));
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        long long17 = frequency1.getCount((java.lang.Object) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        frequency1.addValue((int) (byte) 1);
        double double13 = frequency1.getPct((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.3333333333333333d + "'", double13 == 0.3333333333333333d);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCount(0L);
        java.lang.Class<?> wildcardClass10 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        frequency1.addValue(' ');
        java.util.Comparator comparator11 = null;
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency(comparator11);
        double double14 = frequency12.getCumPct((long) 10);
        long long16 = frequency12.getCumFreq((java.lang.Object) 1.0d);
        long long18 = frequency12.getCumFreq((long) 'a');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        frequency1.addValue((int) '4');
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCumFreq((java.lang.Object) 1.0d);
        long long15 = frequency9.getCumFreq((long) 'a');
        double double17 = frequency9.getPct((java.lang.Object) (byte) 100);
        long long18 = frequency1.getCumFreq((java.lang.Object) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCount((java.lang.Object) 100.0f);
        frequency9.addValue((java.lang.Integer) (-1));
        frequency9.addValue((java.lang.Integer) 10);
        long long18 = frequency9.getSumFreq();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency9);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        frequency1.addValue((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((-1));
        java.lang.Class<?> wildcardClass10 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        long long20 = frequency1.getCount((long) (byte) 0);
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        long long26 = frequency22.getCount((java.lang.Object) 100.0f);
        frequency22.addValue((java.lang.Integer) (-1));
        frequency22.addValue((java.lang.Integer) 10);
        long long32 = frequency22.getCumFreq((int) (byte) 10);
        long long34 = frequency22.getCumFreq('#');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        frequency1.addValue('4');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Integer) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        frequency1.addValue('a');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        double double11 = frequency7.getPct('#');
        double double13 = frequency7.getCumPct((int) '#');
        long long15 = frequency7.getCount(0L);
        java.lang.String str16 = frequency7.toString();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) str16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        java.lang.Class<?> wildcardClass8 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        double double11 = frequency1.getCumPct((long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCount(0L);
        double double11 = frequency1.getPct((int) (short) 100);
        double double13 = frequency1.getPct((int) '4');
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        long long19 = frequency15.getCumFreq((java.lang.Object) 1.0d);
        double double21 = frequency15.getCumPct((int) '4');
        long long22 = frequency15.getSumFreq();
        long long24 = frequency15.getCount((long) (-1));
        long long25 = frequency1.getCount((java.lang.Object) long24);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount((java.lang.Object) 10.0f);
        frequency1.addValue('a');
        frequency1.addValue('#');
        java.lang.Object obj19 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double20 = frequency1.getCumPct(obj19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        double double9 = frequency1.getCumPct((int) (short) -1);
        java.lang.Object obj10 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long11 = frequency1.getCount(obj10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        java.util.Iterator iterator4 = frequency1.valuesIterator();
        java.util.Comparator comparator5 = null;
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency(comparator5);
        double double8 = frequency6.getCumPct((long) 10);
        long long10 = frequency6.getCumFreq((java.lang.Object) 1.0d);
        double double12 = frequency6.getCumPct((int) '4');
        long long13 = frequency6.getSumFreq();
        long long15 = frequency6.getCount((long) (-1));
        long long17 = frequency6.getCount('4');
        long long19 = frequency6.getCount(1);
        double double21 = frequency6.getCumPct((java.lang.Object) (short) 10);
        double double22 = frequency1.getCumPct((java.lang.Object) frequency6);
        long long23 = frequency1.getSumFreq();
        java.util.Iterator iterator24 = frequency1.valuesIterator();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(iterator24);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        java.util.Comparator comparator11 = null;
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency(comparator11);
        double double14 = frequency12.getCumPct((long) 10);
        long long16 = frequency12.getCumFreq((java.lang.Object) 1.0d);
        long long18 = frequency12.getCumFreq((java.lang.Object) (short) 10);
        double double20 = frequency12.getCumPct((int) (byte) 0);
        double double22 = frequency12.getPct((long) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.util.Comparator comparator81 = null;
        org.apache.commons.math.stat.Frequency frequency82 = new org.apache.commons.math.stat.Frequency(comparator81);
        double double84 = frequency82.getCumPct((long) 10);
        long long86 = frequency82.getCumFreq((java.lang.Object) 1.0d);
        long long88 = frequency82.getCumFreq((long) 'a');
        double double90 = frequency82.getPct((java.lang.Object) (byte) 100);
        double double92 = frequency82.getCumPct((long) (-1));
        frequency82.addValue((long) (short) 0);
        double double95 = frequency1.getPct((java.lang.Object) frequency82);
        long long97 = frequency1.getCumFreq((int) (byte) 1);
        long long99 = frequency1.getCumFreq(0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        long long82 = frequency1.getCount((long) ' ');
        frequency1.addValue((long) 10);
        java.lang.Class<?> wildcardClass85 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) 'a');
        long long12 = frequency1.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2L + "'", long12 == 2L);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) 'a');
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCount((java.lang.Object) 100.0f);
        frequency13.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Object) (-1));
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        frequency1.addValue((int) (byte) 1);
        double double13 = frequency1.getPct((int) (byte) 1);
        double double15 = frequency1.getPct(100L);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.3333333333333333d + "'", double13 == 0.3333333333333333d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getPct((long) '#');
        long long9 = frequency1.getCumFreq((long) 'a');
        long long11 = frequency1.getCount((java.lang.Object) (short) -1);
        long long13 = frequency1.getCumFreq(100L);
        java.lang.Class<?> wildcardClass14 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        java.lang.Class<?> wildcardClass31 = frequency23.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCount((int) (byte) 10);
        double double15 = frequency9.getCumPct((-1));
        double double17 = frequency9.getPct('a');
        double double19 = frequency9.getPct('4');
        double double20 = frequency1.getPct((java.lang.Object) frequency9);
        java.lang.Class<?> wildcardClass21 = frequency9.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        frequency1.clear();
        java.util.Comparator comparator7 = null;
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency(comparator7);
        double double10 = frequency8.getCumPct((long) 10);
        double double12 = frequency8.getPct('#');
        frequency8.addValue((int) '4');
        java.util.Comparator comparator15 = null;
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency(comparator15);
        double double18 = frequency16.getCumPct((long) 10);
        long long20 = frequency16.getCumFreq((java.lang.Object) 1.0d);
        long long22 = frequency16.getCumFreq((long) 'a');
        double double24 = frequency16.getPct((java.lang.Object) (byte) 100);
        long long25 = frequency8.getCumFreq((java.lang.Object) (byte) 100);
        java.util.Comparator comparator26 = null;
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency(comparator26);
        double double29 = frequency27.getCumPct((long) 10);
        double double31 = frequency27.getPct('#');
        double double33 = frequency27.getCumPct((int) '#');
        frequency27.addValue(1);
        java.util.Comparator comparator36 = null;
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency(comparator36);
        double double39 = frequency37.getCumPct((long) 10);
        double double41 = frequency37.getPct('#');
        double double43 = frequency37.getCumPct((int) '#');
        long long44 = frequency27.getCumFreq((java.lang.Object) double43);
        java.util.Comparator comparator45 = null;
        org.apache.commons.math.stat.Frequency frequency46 = new org.apache.commons.math.stat.Frequency(comparator45);
        double double48 = frequency46.getCumPct((long) 10);
        long long50 = frequency46.getCount((java.lang.Object) 100.0f);
        frequency46.addValue((java.lang.Integer) (-1));
        frequency46.addValue((java.lang.Integer) 10);
        double double56 = frequency46.getCumPct((long) (byte) 10);
        long long57 = frequency27.getCumFreq((java.lang.Object) frequency46);
        long long58 = frequency8.getCumFreq((java.lang.Object) long57);
        double double59 = frequency1.getPct((java.lang.Object) long58);
        long long60 = frequency1.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        frequency1.addValue((int) '4');
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCumFreq((java.lang.Object) 1.0d);
        long long15 = frequency9.getCumFreq((long) 'a');
        double double17 = frequency9.getPct((java.lang.Object) (byte) 100);
        long long18 = frequency1.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str19 = frequency1.toString();
        long long21 = frequency1.getCumFreq((int) (short) 0);
        frequency1.addValue((int) '#');
        java.lang.Class<?> wildcardClass24 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str19, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        long long11 = frequency1.getCumFreq(' ');
        java.lang.Object obj12 = null;
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue(obj12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        long long24 = frequency20.getCount((java.lang.Object) 100.0f);
        frequency20.addValue((java.lang.Integer) (-1));
        frequency20.addValue((java.lang.Integer) 10);
        double double30 = frequency20.getCumPct((long) (byte) 10);
        long long31 = frequency1.getCumFreq((java.lang.Object) frequency20);
        long long33 = frequency1.getCumFreq(' ');
        java.lang.Class<?> wildcardClass34 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        java.lang.Class<?> wildcardClass31 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        long long14 = frequency1.getCount('4');
        frequency1.addValue((long) 0);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) 'a');
        double double13 = frequency1.getCumPct((long) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        java.util.Comparator comparator23 = null;
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency(comparator23);
        double double26 = frequency24.getCumPct((long) 10);
        long long28 = frequency24.getCumFreq((java.lang.Object) 1.0d);
        double double30 = frequency24.getCumPct((int) '4');
        long long32 = frequency24.getCumFreq((int) (byte) 10);
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        double double36 = frequency34.getCumPct((long) 10);
        long long38 = frequency34.getCount((java.lang.Object) 100.0f);
        frequency34.addValue((java.lang.Integer) (-1));
        frequency34.addValue((java.lang.Integer) 10);
        double double44 = frequency34.getCumPct((long) '4');
        double double45 = frequency24.getCumPct((java.lang.Object) '4');
        frequency19.addValue((java.lang.Object) '4');
        // The following exception was thrown during execution in test generation
        try {
            frequency19.addValue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        double double26 = frequency19.getCumPct(1);
        double double28 = frequency19.getPct('a');
        double double30 = frequency19.getPct(' ');
        java.lang.Object obj31 = null;
        // The following exception was thrown during execution in test generation
        try {
            frequency19.addValue(obj31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.Object obj12 = null;
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue(obj12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount((java.lang.Object) 10.0f);
        frequency1.addValue((-1L));
        long long18 = frequency1.getCount('a');
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        double double24 = frequency20.getPct('#');
        frequency20.addValue((int) '4');
        java.util.Comparator comparator27 = null;
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency(comparator27);
        double double30 = frequency28.getCumPct((long) 10);
        long long32 = frequency28.getCumFreq((java.lang.Object) 1.0d);
        long long34 = frequency28.getCumFreq((long) 'a');
        double double36 = frequency28.getPct((java.lang.Object) (byte) 100);
        long long37 = frequency20.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str38 = frequency20.toString();
        long long40 = frequency20.getCumFreq((int) (short) 0);
        frequency20.addValue((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str38, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        double double9 = frequency1.getPct((java.lang.Object) (byte) 100);
        long long11 = frequency1.getCount('#');
        frequency1.addValue((int) (byte) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.lang.Object obj81 = null;
        double double82 = frequency1.getCumPct(obj81);
        java.util.Iterator iterator83 = frequency1.valuesIterator();
        java.lang.Class<?> wildcardClass84 = iterator83.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(iterator83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        org.apache.commons.math.stat.Frequency frequency2 = new org.apache.commons.math.stat.Frequency();
        long long3 = frequency2.getSumFreq();
        double double4 = frequency1.getCumPct((java.lang.Object) frequency2);
        frequency1.addValue('a');
        java.lang.String str7 = frequency1.toString();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) 0.5d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n" + "'", str7, "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        org.apache.commons.math.stat.Frequency frequency2 = new org.apache.commons.math.stat.Frequency();
        long long3 = frequency2.getSumFreq();
        double double4 = frequency1.getCumPct((java.lang.Object) frequency2);
        java.util.Comparator comparator5 = null;
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency(comparator5);
        double double8 = frequency6.getCumPct((long) 10);
        long long10 = frequency6.getCumFreq((java.lang.Object) 1.0d);
        double double12 = frequency6.getCumPct((int) '4');
        long long13 = frequency6.getSumFreq();
        long long15 = frequency6.getCount((long) (-1));
        long long17 = frequency6.getCount('4');
        long long19 = frequency6.getCount(1);
        double double21 = frequency6.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        double double29 = frequency23.getPct(1L);
        long long31 = frequency23.getCumFreq((long) 0);
        double double33 = frequency23.getPct('a');
        double double35 = frequency23.getPct(1);
        java.util.Comparator comparator36 = null;
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency(comparator36);
        double double39 = frequency37.getCumPct((long) 10);
        double double41 = frequency37.getPct('#');
        double double43 = frequency37.getCumPct((int) '#');
        frequency37.addValue(1);
        java.util.Comparator comparator46 = null;
        org.apache.commons.math.stat.Frequency frequency47 = new org.apache.commons.math.stat.Frequency(comparator46);
        double double49 = frequency47.getCumPct((long) 10);
        double double51 = frequency47.getPct('#');
        double double53 = frequency47.getCumPct((int) '#');
        long long54 = frequency37.getCumFreq((java.lang.Object) double53);
        double double56 = frequency37.getCumPct((long) (short) 0);
        long long57 = frequency23.getCumFreq((java.lang.Object) double56);
        java.util.Comparator comparator58 = null;
        org.apache.commons.math.stat.Frequency frequency59 = new org.apache.commons.math.stat.Frequency(comparator58);
        double double61 = frequency59.getCumPct((long) 10);
        double double63 = frequency59.getPct('#');
        java.util.Comparator comparator64 = null;
        org.apache.commons.math.stat.Frequency frequency65 = new org.apache.commons.math.stat.Frequency(comparator64);
        double double67 = frequency65.getCumPct((long) 10);
        long long69 = frequency65.getCumFreq((java.lang.Object) 1.0d);
        double double71 = frequency65.getCumPct((int) '4');
        long long72 = frequency65.getSumFreq();
        double double73 = frequency59.getCumPct((java.lang.Object) long72);
        double double75 = frequency59.getCumPct('#');
        java.util.Comparator comparator76 = null;
        org.apache.commons.math.stat.Frequency frequency77 = new org.apache.commons.math.stat.Frequency(comparator76);
        long long79 = frequency77.getCumFreq((java.lang.Object) (short) 10);
        double double80 = frequency59.getPct((java.lang.Object) frequency77);
        long long82 = frequency59.getCumFreq(10);
        long long83 = frequency59.getSumFreq();
        double double84 = frequency23.getCumPct((java.lang.Object) long83);
        long long85 = frequency6.getCumFreq((java.lang.Object) double84);
        java.lang.Object obj86 = null;
        double double87 = frequency6.getCumPct(obj86);
        java.util.Iterator iterator88 = frequency6.valuesIterator();
        long long89 = frequency2.getCount((java.lang.Object) iterator88);
        java.lang.Class<?> wildcardClass90 = iterator88.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(iterator88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getCumPct((-1));
        double double9 = frequency1.getPct('4');
        long long11 = frequency1.getCount((long) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        frequency1.addValue(' ');
        double double12 = frequency1.getPct('#');
        java.lang.Object obj13 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double14 = frequency1.getCumPct(obj13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCount(0L);
        java.lang.String str10 = frequency1.toString();
        long long12 = frequency1.getCount('a');
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((int) (byte) 10);
        double double20 = frequency14.getPct((long) '#');
        long long22 = frequency14.getCumFreq((long) 'a');
        long long24 = frequency14.getCount((java.lang.Object) (short) -1);
        long long26 = frequency14.getCumFreq(100L);
        frequency1.addValue((java.lang.Object) long26);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        double double10 = frequency1.getCumPct(' ');
        double double12 = frequency1.getCumPct((int) ' ');
        java.lang.Object obj13 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = frequency1.getCount(obj13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        org.apache.commons.math.stat.Frequency frequency2 = new org.apache.commons.math.stat.Frequency();
        long long3 = frequency2.getSumFreq();
        double double4 = frequency1.getCumPct((java.lang.Object) frequency2);
        java.util.Comparator comparator5 = null;
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency(comparator5);
        double double8 = frequency6.getCumPct((long) 10);
        long long10 = frequency6.getCumFreq((java.lang.Object) 1.0d);
        double double12 = frequency6.getCumPct((int) '4');
        long long13 = frequency6.getSumFreq();
        long long15 = frequency6.getCount((long) (-1));
        long long17 = frequency6.getCount('4');
        long long19 = frequency6.getCount(1);
        double double21 = frequency6.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        double double29 = frequency23.getPct(1L);
        long long31 = frequency23.getCumFreq((long) 0);
        double double33 = frequency23.getPct('a');
        double double35 = frequency23.getPct(1);
        java.util.Comparator comparator36 = null;
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency(comparator36);
        double double39 = frequency37.getCumPct((long) 10);
        double double41 = frequency37.getPct('#');
        double double43 = frequency37.getCumPct((int) '#');
        frequency37.addValue(1);
        java.util.Comparator comparator46 = null;
        org.apache.commons.math.stat.Frequency frequency47 = new org.apache.commons.math.stat.Frequency(comparator46);
        double double49 = frequency47.getCumPct((long) 10);
        double double51 = frequency47.getPct('#');
        double double53 = frequency47.getCumPct((int) '#');
        long long54 = frequency37.getCumFreq((java.lang.Object) double53);
        double double56 = frequency37.getCumPct((long) (short) 0);
        long long57 = frequency23.getCumFreq((java.lang.Object) double56);
        java.util.Comparator comparator58 = null;
        org.apache.commons.math.stat.Frequency frequency59 = new org.apache.commons.math.stat.Frequency(comparator58);
        double double61 = frequency59.getCumPct((long) 10);
        double double63 = frequency59.getPct('#');
        java.util.Comparator comparator64 = null;
        org.apache.commons.math.stat.Frequency frequency65 = new org.apache.commons.math.stat.Frequency(comparator64);
        double double67 = frequency65.getCumPct((long) 10);
        long long69 = frequency65.getCumFreq((java.lang.Object) 1.0d);
        double double71 = frequency65.getCumPct((int) '4');
        long long72 = frequency65.getSumFreq();
        double double73 = frequency59.getCumPct((java.lang.Object) long72);
        double double75 = frequency59.getCumPct('#');
        java.util.Comparator comparator76 = null;
        org.apache.commons.math.stat.Frequency frequency77 = new org.apache.commons.math.stat.Frequency(comparator76);
        long long79 = frequency77.getCumFreq((java.lang.Object) (short) 10);
        double double80 = frequency59.getPct((java.lang.Object) frequency77);
        long long82 = frequency59.getCumFreq(10);
        long long83 = frequency59.getSumFreq();
        double double84 = frequency23.getCumPct((java.lang.Object) long83);
        long long85 = frequency6.getCumFreq((java.lang.Object) double84);
        java.lang.Object obj86 = null;
        double double87 = frequency6.getCumPct(obj86);
        java.util.Iterator iterator88 = frequency6.valuesIterator();
        long long89 = frequency2.getCount((java.lang.Object) iterator88);
        double double91 = frequency2.getCumPct('#');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(iterator88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        frequency1.addValue((long) (byte) 0);
        long long11 = frequency1.getSumFreq();
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCumFreq((java.lang.Object) 1.0d);
        double double19 = frequency13.getCumPct((int) '4');
        long long20 = frequency13.getSumFreq();
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        double double26 = frequency22.getPct('#');
        double double28 = frequency22.getCumPct((int) '#');
        frequency22.addValue(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        long long39 = frequency22.getCumFreq((java.lang.Object) double38);
        double double41 = frequency22.getCumPct((long) (short) 0);
        java.util.Comparator comparator42 = null;
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency(comparator42);
        double double45 = frequency43.getCumPct((long) 10);
        long long47 = frequency43.getCount((java.lang.Object) 100.0f);
        frequency43.addValue((java.lang.Integer) (-1));
        frequency43.addValue((java.lang.Integer) 10);
        long long53 = frequency43.getCumFreq((int) 'a');
        java.util.Comparator comparator54 = null;
        org.apache.commons.math.stat.Frequency frequency55 = new org.apache.commons.math.stat.Frequency(comparator54);
        double double57 = frequency55.getCumPct((long) 10);
        long long59 = frequency55.getCount((java.lang.Object) 100.0f);
        frequency55.addValue((java.lang.Integer) (-1));
        frequency43.addValue((java.lang.Object) (-1));
        long long63 = frequency22.getCount((java.lang.Object) frequency43);
        long long65 = frequency43.getCumFreq('a');
        double double66 = frequency13.getPct((java.lang.Object) 'a');
        double double67 = frequency1.getCumPct((java.lang.Object) frequency13);
        java.util.Comparator comparator68 = null;
        org.apache.commons.math.stat.Frequency frequency69 = new org.apache.commons.math.stat.Frequency(comparator68);
        double double71 = frequency69.getCumPct((long) 10);
        long long73 = frequency69.getCumFreq((java.lang.Object) 1.0d);
        double double75 = frequency69.getCumPct((int) '4');
        long long76 = frequency69.getSumFreq();
        double double78 = frequency69.getPct('a');
        double double79 = frequency1.getCumPct((java.lang.Object) double78);
        java.util.Comparator comparator80 = null;
        org.apache.commons.math.stat.Frequency frequency81 = new org.apache.commons.math.stat.Frequency(comparator80);
        double double83 = frequency81.getCumPct((long) 10);
        double double85 = frequency81.getPct('#');
        java.util.Iterator iterator86 = frequency81.valuesIterator();
        double double88 = frequency81.getPct('#');
        double double89 = frequency1.getCumPct((java.lang.Object) double88);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2L + "'", long53 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(iterator86);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        double double9 = frequency1.getCumPct((int) (short) -1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        long long15 = frequency11.getCount((int) (byte) 10);
        frequency11.addValue('4');
        double double19 = frequency11.getCumPct((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        double double9 = frequency1.getPct((java.lang.Object) (byte) 100);
        long long11 = frequency1.getCumFreq((long) ' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCount(0L);
        double double11 = frequency1.getPct((int) (short) 100);
        java.lang.Class<?> wildcardClass12 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        java.util.Iterator iterator4 = frequency1.valuesIterator();
        java.util.Comparator comparator5 = null;
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency(comparator5);
        double double8 = frequency6.getCumPct((long) 10);
        long long10 = frequency6.getCumFreq((java.lang.Object) 1.0d);
        double double12 = frequency6.getCumPct((int) '4');
        long long13 = frequency6.getSumFreq();
        long long15 = frequency6.getCount((long) (-1));
        long long17 = frequency6.getCount('4');
        long long19 = frequency6.getCount(1);
        double double21 = frequency6.getCumPct((java.lang.Object) (short) 10);
        double double22 = frequency1.getCumPct((java.lang.Object) frequency6);
        long long23 = frequency1.getSumFreq();
        java.lang.Class<?> wildcardClass24 = frequency1.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        double double11 = frequency1.getPct((-1L));
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        frequency13.addValue((java.lang.Integer) 1);
        frequency1.addValue((java.lang.Object) 1);
        long long20 = frequency1.getCumFreq(0);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq((long) 0);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        double double18 = frequency14.getPct('#');
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        long long24 = frequency20.getCumFreq((java.lang.Object) 1.0d);
        double double26 = frequency20.getCumPct((int) '4');
        long long27 = frequency20.getSumFreq();
        double double28 = frequency14.getCumPct((java.lang.Object) long27);
        double double30 = frequency14.getCumPct('#');
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        long long34 = frequency32.getCumFreq((java.lang.Object) (short) 10);
        double double35 = frequency14.getPct((java.lang.Object) frequency32);
        long long37 = frequency32.getCount(0);
        frequency32.addValue((long) ' ');
        double double41 = frequency32.getCumPct(0);
        java.util.Comparator comparator42 = null;
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency(comparator42);
        double double45 = frequency43.getCumPct((long) 10);
        long long47 = frequency43.getCount((java.lang.Object) 100.0f);
        double double49 = frequency43.getPct(1L);
        long long51 = frequency43.getCumFreq((long) 0);
        double double53 = frequency43.getPct('a');
        double double55 = frequency43.getPct(1);
        double double57 = frequency43.getCumPct((long) (byte) 0);
        long long58 = frequency32.getCumFreq((java.lang.Object) frequency43);
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        double double64 = frequency60.getPct('#');
        frequency60.addValue((int) '4');
        java.util.Comparator comparator67 = null;
        org.apache.commons.math.stat.Frequency frequency68 = new org.apache.commons.math.stat.Frequency(comparator67);
        double double70 = frequency68.getCumPct((long) 10);
        long long72 = frequency68.getCumFreq((java.lang.Object) 1.0d);
        long long74 = frequency68.getCumFreq((long) 'a');
        double double76 = frequency68.getPct((java.lang.Object) (byte) 100);
        long long77 = frequency60.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str78 = frequency60.toString();
        long long80 = frequency60.getCumFreq((int) (short) 0);
        frequency60.addValue((int) '#');
        frequency43.addValue((java.lang.Object) '#');
        frequency1.addValue((java.lang.Object) '#');
        java.lang.Class<?> wildcardClass85 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str78, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.lang.Object obj81 = null;
        double double82 = frequency1.getCumPct(obj81);
        long long84 = frequency1.getCount((long) (short) 100);
        java.lang.Class<?> wildcardClass85 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        double double13 = frequency9.getPct('#');
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        long long19 = frequency15.getCumFreq((java.lang.Object) 1.0d);
        double double21 = frequency15.getCumPct((int) '4');
        long long22 = frequency15.getSumFreq();
        double double23 = frequency9.getCumPct((java.lang.Object) long22);
        double double25 = frequency9.getCumPct('#');
        java.util.Comparator comparator26 = null;
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency(comparator26);
        long long29 = frequency27.getCumFreq((java.lang.Object) (short) 10);
        double double30 = frequency9.getPct((java.lang.Object) frequency27);
        long long32 = frequency27.getCount(0);
        frequency27.addValue((long) ' ');
        double double35 = frequency1.getCumPct((java.lang.Object) frequency27);
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency();
        long long37 = frequency36.getSumFreq();
        long long39 = frequency36.getCumFreq((long) 1);
        double double41 = frequency36.getPct((-1));
        long long42 = frequency1.getCount((java.lang.Object) (-1));
        java.util.Iterator iterator43 = frequency1.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(iterator43);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.lang.Object obj81 = null;
        double double82 = frequency1.getCumPct(obj81);
        long long84 = frequency1.getCount((long) (short) 100);
        long long86 = frequency1.getCumFreq((int) (byte) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        frequency1.addValue((java.lang.Object) '4');
        double double34 = frequency1.getCumPct('#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        double double12 = frequency1.getPct(1L);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        double double18 = frequency14.getPct('#');
        frequency14.clear();
        double double20 = frequency1.getPct((java.lang.Object) frequency14);
        double double22 = frequency14.getCumPct((long) (short) -1);
        java.util.Comparator comparator23 = null;
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency(comparator23);
        double double26 = frequency24.getCumPct((long) 10);
        double double28 = frequency24.getPct('#');
        frequency24.addValue((int) '4');
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        java.util.Iterator iterator37 = frequency32.valuesIterator();
        double double39 = frequency32.getPct('#');
        long long41 = frequency32.getCumFreq((java.lang.Object) 100L);
        frequency24.addValue((java.lang.Object) long41);
        long long44 = frequency24.getCount('#');
        long long45 = frequency14.getCount((java.lang.Object) frequency24);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(iterator37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long23 = frequency19.getSumFreq();
        double double25 = frequency19.getPct((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        java.lang.Class<?> wildcardClass26 = frequency19.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        long long10 = frequency1.getCumFreq((java.lang.Object) 100L);
        double double12 = frequency1.getPct('4');
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        long long16 = frequency14.getCount('#');
        java.util.Iterator iterator17 = frequency14.valuesIterator();
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        double double21 = frequency19.getCumPct((long) 10);
        long long23 = frequency19.getCumFreq((java.lang.Object) 1.0d);
        double double25 = frequency19.getCumPct((int) '4');
        long long26 = frequency19.getSumFreq();
        long long28 = frequency19.getCount((long) (-1));
        long long30 = frequency19.getCount('4');
        long long32 = frequency19.getCount(1);
        double double34 = frequency19.getCumPct((java.lang.Object) (short) 10);
        double double35 = frequency14.getCumPct((java.lang.Object) frequency19);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        frequency1.addValue(' ');
        double double12 = frequency1.getPct('#');
        double double14 = frequency1.getCumPct((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.lang.Object obj81 = null;
        double double82 = frequency1.getCumPct(obj81);
        java.util.Iterator iterator83 = frequency1.valuesIterator();
        java.util.Iterator iterator84 = frequency1.valuesIterator();
        java.lang.Class<?> wildcardClass85 = iterator84.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(iterator83);
        org.junit.Assert.assertNotNull(iterator84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        frequency1.addValue((int) (byte) 1);
        java.lang.Object obj12 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long13 = frequency1.getCumFreq(obj12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long1 = frequency0.getSumFreq();
        long long3 = frequency0.getCumFreq((long) 1);
        double double5 = frequency0.getPct((-1));
        long long7 = frequency0.getCumFreq((int) (short) -1);
        java.lang.Class<?> wildcardClass8 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        double double9 = frequency1.getPct((java.lang.Object) (byte) 100);
        long long11 = frequency1.getCumFreq('a');
        double double13 = frequency1.getPct(0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        long long51 = frequency32.getCount('#');
        frequency1.addValue((java.lang.Object) '#');
        java.util.Iterator iterator53 = frequency1.valuesIterator();
        double double55 = frequency1.getCumPct((long) ' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(iterator53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        long long14 = frequency1.getCount(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getPct((long) '#');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount('a');
        frequency1.addValue((int) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCount((java.lang.Object) 100.0f);
        double double15 = frequency9.getPct(1L);
        frequency9.clear();
        long long18 = frequency9.getCumFreq((long) (byte) 1);
        long long20 = frequency9.getCumFreq(2L);
        long long21 = frequency1.getCumFreq((java.lang.Object) 2L);
        long long23 = frequency1.getCount((int) (byte) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        long long82 = frequency1.getCount((long) ' ');
        long long83 = frequency1.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        long long32 = frequency23.getCumFreq(100);
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        double double36 = frequency34.getCumPct((long) 10);
        long long38 = frequency34.getCount((java.lang.Object) 100.0f);
        long long40 = frequency34.getCumFreq(' ');
        java.lang.String str41 = frequency34.toString();
        java.util.Iterator iterator42 = frequency34.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            frequency23.addValue((java.lang.Object) frequency34);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str41, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(iterator42);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        org.apache.commons.math.stat.Frequency frequency2 = new org.apache.commons.math.stat.Frequency();
        long long3 = frequency2.getSumFreq();
        double double4 = frequency1.getCumPct((java.lang.Object) frequency2);
        frequency1.addValue('a');
        java.lang.String str7 = frequency1.toString();
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCount((int) (byte) 10);
        double double15 = frequency9.getCumPct((long) (-1));
        frequency9.addValue(0);
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        double double21 = frequency19.getCumPct((long) 10);
        double double23 = frequency19.getPct('#');
        double double25 = frequency19.getCumPct((int) '#');
        frequency19.addValue(1);
        java.util.Comparator comparator28 = null;
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency(comparator28);
        double double31 = frequency29.getCumPct((long) 10);
        double double33 = frequency29.getPct('#');
        double double35 = frequency29.getCumPct((int) '#');
        long long36 = frequency19.getCumFreq((java.lang.Object) double35);
        double double38 = frequency19.getCumPct((long) (short) 0);
        java.util.Comparator comparator39 = null;
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency(comparator39);
        long long42 = frequency40.getCount('#');
        java.util.Iterator iterator43 = frequency40.valuesIterator();
        java.util.Comparator comparator44 = null;
        org.apache.commons.math.stat.Frequency frequency45 = new org.apache.commons.math.stat.Frequency(comparator44);
        double double47 = frequency45.getCumPct((long) 10);
        long long49 = frequency45.getCumFreq((java.lang.Object) 1.0d);
        double double51 = frequency45.getCumPct((int) '4');
        long long52 = frequency45.getSumFreq();
        long long54 = frequency45.getCount((long) (-1));
        long long56 = frequency45.getCount('4');
        long long58 = frequency45.getCount(1);
        double double60 = frequency45.getCumPct((java.lang.Object) (short) 10);
        double double61 = frequency40.getCumPct((java.lang.Object) frequency45);
        long long62 = frequency19.getCumFreq((java.lang.Object) frequency45);
        double double63 = frequency9.getPct((java.lang.Object) frequency19);
        long long65 = frequency19.getCumFreq((int) (short) 10);
        java.lang.Class<?> wildcardClass66 = frequency19.getClass();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) wildcardClass66);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n" + "'", str7, "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(iterator43);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        double double12 = frequency1.getPct(1L);
        frequency1.addValue((int) (short) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        long long82 = frequency1.getCount((long) ' ');
        frequency1.addValue(' ');
        double double86 = frequency1.getPct('#');
        frequency1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getCumPct((long) (-1));
        double double9 = frequency1.getCumPct((-1));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCount(0L);
        double double11 = frequency1.getPct((int) (short) 100);
        double double13 = frequency1.getPct((int) '4');
        double double15 = frequency1.getCumPct((long) (short) -1);
        frequency1.addValue((java.lang.Integer) 10);
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        double double21 = frequency19.getCumPct((long) 10);
        long long23 = frequency19.getCount((java.lang.Object) 100.0f);
        frequency19.addValue((java.lang.Integer) (-1));
        frequency19.addValue((java.lang.Integer) 10);
        frequency19.addValue((int) (byte) 1);
        long long30 = frequency1.getCumFreq((java.lang.Object) frequency19);
        double double32 = frequency1.getCumPct(' ');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        double double11 = frequency1.getPct('a');
        double double13 = frequency1.getPct(1);
        frequency1.addValue('a');
        java.lang.Object obj16 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double17 = frequency1.getPct(obj16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCount((int) (byte) 0);
        long long11 = frequency1.getCumFreq(1L);
        java.lang.Class<?> wildcardClass12 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        double double12 = frequency1.getCumPct((int) (byte) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        long long7 = frequency1.getCumFreq((int) (short) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct('4');
        java.lang.String str8 = frequency1.toString();
        frequency1.addValue(100L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount((java.lang.Object) 10.0f);
        frequency1.addValue((-1L));
        long long18 = frequency1.getCount('a');
        double double20 = frequency1.getPct(' ');
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        double double26 = frequency22.getPct('#');
        double double28 = frequency22.getCumPct((int) '#');
        java.lang.String str29 = frequency22.toString();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) str29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str29, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getCumPct((long) (-1));
        long long9 = frequency1.getCount(100L);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        frequency11.addValue(1);
        java.util.Comparator comparator20 = null;
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency(comparator20);
        double double23 = frequency21.getCumPct((long) 10);
        double double25 = frequency21.getPct('#');
        double double27 = frequency21.getCumPct((int) '#');
        long long28 = frequency11.getCumFreq((java.lang.Object) double27);
        double double30 = frequency11.getCumPct((long) (short) 0);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        long long36 = frequency32.getCount((java.lang.Object) 100.0f);
        frequency32.addValue((java.lang.Integer) (-1));
        frequency32.addValue((java.lang.Integer) 10);
        long long42 = frequency32.getCumFreq((int) 'a');
        java.util.Comparator comparator43 = null;
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency(comparator43);
        double double46 = frequency44.getCumPct((long) 10);
        long long48 = frequency44.getCount((java.lang.Object) 100.0f);
        frequency44.addValue((java.lang.Integer) (-1));
        frequency32.addValue((java.lang.Object) (-1));
        long long52 = frequency11.getCount((java.lang.Object) frequency32);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency32);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2L + "'", long42 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCount((java.lang.Object) 100.0f);
        double double15 = frequency9.getPct(1L);
        frequency9.clear();
        long long18 = frequency9.getCumFreq((long) (byte) 1);
        long long20 = frequency9.getCumFreq(2L);
        long long21 = frequency1.getCumFreq((java.lang.Object) 2L);
        long long23 = frequency1.getCount(0L);
        double double25 = frequency1.getPct('#');
        double double27 = frequency1.getPct((int) (short) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long1 = frequency0.getSumFreq();
        long long3 = frequency0.getCumFreq((long) 1);
        long long5 = frequency0.getCount((int) (byte) -1);
        long long6 = frequency0.getSumFreq();
        java.util.Comparator comparator7 = null;
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency(comparator7);
        double double10 = frequency8.getCumPct((long) 10);
        double double12 = frequency8.getPct('#');
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCumFreq((java.lang.Object) 1.0d);
        double double20 = frequency14.getCumPct((int) '4');
        long long21 = frequency14.getSumFreq();
        double double22 = frequency8.getCumPct((java.lang.Object) long21);
        double double24 = frequency8.getCumPct('#');
        java.util.Comparator comparator25 = null;
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency(comparator25);
        long long28 = frequency26.getCumFreq((java.lang.Object) (short) 10);
        double double29 = frequency8.getPct((java.lang.Object) frequency26);
        long long31 = frequency26.getCount(0);
        frequency26.addValue((long) ' ');
        double double35 = frequency26.getCumPct(0);
        java.util.Comparator comparator36 = null;
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency(comparator36);
        double double39 = frequency37.getCumPct((long) 10);
        long long41 = frequency37.getCount((java.lang.Object) 100.0f);
        double double43 = frequency37.getPct(1L);
        long long45 = frequency37.getCumFreq((long) 0);
        double double47 = frequency37.getPct('a');
        double double49 = frequency37.getPct(1);
        double double51 = frequency37.getCumPct((long) (byte) 0);
        long long52 = frequency26.getCumFreq((java.lang.Object) frequency37);
        double double53 = frequency0.getPct((java.lang.Object) frequency26);
        java.lang.Class<?> wildcardClass54 = frequency26.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct((long) (short) 0);
        frequency1.addValue(0L);
        frequency1.addValue((java.lang.Integer) (-1));
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((int) (byte) 10);
        double double29 = frequency23.getPct((long) '#');
        long long30 = frequency23.getSumFreq();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency23);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        long long51 = frequency32.getCount('#');
        frequency1.addValue((java.lang.Object) '#');
        java.util.Iterator iterator53 = frequency1.valuesIterator();
        long long55 = frequency1.getCumFreq(0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(iterator53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.addValue('4');
        double double11 = frequency1.getPct((-1));
        java.util.Iterator iterator12 = frequency1.valuesIterator();
        java.lang.Class<?> wildcardClass13 = iterator12.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        long long26 = frequency22.getCount((java.lang.Object) 100.0f);
        frequency22.addValue((java.lang.Integer) (-1));
        frequency22.addValue((java.lang.Integer) 10);
        long long32 = frequency22.getCumFreq((int) 'a');
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        double double36 = frequency34.getCumPct((long) 10);
        long long38 = frequency34.getCount((java.lang.Object) 100.0f);
        frequency34.addValue((java.lang.Integer) (-1));
        frequency22.addValue((java.lang.Object) (-1));
        long long42 = frequency1.getCount((java.lang.Object) frequency22);
        double double44 = frequency22.getPct(' ');
        java.lang.Object obj45 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long46 = frequency22.getCumFreq(obj45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        java.util.Iterator iterator4 = frequency1.valuesIterator();
        java.util.Comparator comparator5 = null;
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency(comparator5);
        double double8 = frequency6.getCumPct((long) 10);
        long long10 = frequency6.getCumFreq((java.lang.Object) 1.0d);
        double double12 = frequency6.getCumPct((int) '4');
        long long13 = frequency6.getSumFreq();
        long long15 = frequency6.getCount((long) (-1));
        long long17 = frequency6.getCount('4');
        long long19 = frequency6.getCount(1);
        double double21 = frequency6.getCumPct((java.lang.Object) (short) 10);
        double double22 = frequency1.getCumPct((java.lang.Object) frequency6);
        double double24 = frequency6.getPct((long) 10);
        double double26 = frequency6.getCumPct(100);
        double double28 = frequency6.getCumPct((long) (short) 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        java.util.Comparator comparator2 = null;
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency(comparator2);
        double double5 = frequency3.getCumPct((long) 10);
        long long7 = frequency3.getCount((java.lang.Object) 100.0f);
        double double9 = frequency3.getPct(1L);
        double double11 = frequency3.getCumPct((int) (short) -1);
        double double12 = frequency1.getCumPct((java.lang.Object) frequency3);
        java.lang.Class<?> wildcardClass13 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        long long10 = frequency1.getSumFreq();
        double double12 = frequency1.getPct(1);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((int) (byte) 10);
        double double20 = frequency14.getCumPct((long) (-1));
        frequency14.addValue(0);
        java.util.Comparator comparator23 = null;
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency(comparator23);
        double double26 = frequency24.getCumPct((long) 10);
        double double28 = frequency24.getPct('#');
        double double30 = frequency24.getCumPct((int) '#');
        frequency24.addValue(1);
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        double double36 = frequency34.getCumPct((long) 10);
        double double38 = frequency34.getPct('#');
        double double40 = frequency34.getCumPct((int) '#');
        long long41 = frequency24.getCumFreq((java.lang.Object) double40);
        double double43 = frequency24.getCumPct((long) (short) 0);
        java.util.Comparator comparator44 = null;
        org.apache.commons.math.stat.Frequency frequency45 = new org.apache.commons.math.stat.Frequency(comparator44);
        long long47 = frequency45.getCount('#');
        java.util.Iterator iterator48 = frequency45.valuesIterator();
        java.util.Comparator comparator49 = null;
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency(comparator49);
        double double52 = frequency50.getCumPct((long) 10);
        long long54 = frequency50.getCumFreq((java.lang.Object) 1.0d);
        double double56 = frequency50.getCumPct((int) '4');
        long long57 = frequency50.getSumFreq();
        long long59 = frequency50.getCount((long) (-1));
        long long61 = frequency50.getCount('4');
        long long63 = frequency50.getCount(1);
        double double65 = frequency50.getCumPct((java.lang.Object) (short) 10);
        double double66 = frequency45.getCumPct((java.lang.Object) frequency50);
        long long67 = frequency24.getCumFreq((java.lang.Object) frequency50);
        double double68 = frequency14.getPct((java.lang.Object) frequency24);
        long long70 = frequency24.getCumFreq((int) (short) 10);
        java.lang.Class<?> wildcardClass71 = frequency24.getClass();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) wildcardClass71);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(iterator48);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        frequency1.addValue((java.lang.Integer) 1);
        java.lang.Class<?> wildcardClass17 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        double double10 = frequency1.getCumPct(' ');
        double double12 = frequency1.getCumPct((int) ' ');
        frequency1.addValue((java.lang.Integer) 100);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        frequency1.addValue((java.lang.Integer) 1);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        double double22 = frequency18.getPct('#');
        double double24 = frequency18.getCumPct((int) '#');
        long long26 = frequency18.getCount(0L);
        double double28 = frequency18.getPct((int) (short) 100);
        double double30 = frequency18.getPct((int) '4');
        double double32 = frequency18.getCumPct((long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long1 = frequency0.getSumFreq();
        long long3 = frequency0.getCumFreq((long) 1);
        long long5 = frequency0.getCount((int) (byte) -1);
        long long7 = frequency0.getCumFreq((int) (short) -1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        double double9 = frequency1.getPct((java.lang.Object) (byte) 100);
        double double11 = frequency1.getCumPct((long) (-1));
        frequency1.addValue((long) (short) 0);
        double double15 = frequency1.getCumPct(0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        double double9 = frequency1.getCumPct((int) (short) -1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        java.lang.String str18 = frequency11.toString();
        long long20 = frequency11.getCumFreq((long) '4');
        frequency1.addValue((java.lang.Object) '4');
        double double23 = frequency1.getPct((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((java.lang.Object) 100.0f);
        double double20 = frequency14.getPct(1L);
        frequency14.clear();
        long long22 = frequency1.getCount((java.lang.Object) frequency14);
        double double24 = frequency14.getPct((java.lang.Object) 1.0d);
        long long26 = frequency14.getCount((long) 100);
        java.util.Comparator comparator27 = null;
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency(comparator27);
        long long30 = frequency28.getCount('#');
        java.util.Iterator iterator31 = frequency28.valuesIterator();
        double double32 = frequency14.getPct((java.lang.Object) frequency28);
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        double double36 = frequency34.getCumPct((long) 10);
        long long38 = frequency34.getCumFreq((java.lang.Object) 1.0d);
        long long40 = frequency34.getCumFreq((long) 'a');
        double double42 = frequency34.getPct((java.lang.Object) (byte) 100);
        long long44 = frequency34.getCount('#');
        long long45 = frequency14.getCumFreq((java.lang.Object) frequency34);
        java.util.Comparator comparator46 = null;
        org.apache.commons.math.stat.Frequency frequency47 = new org.apache.commons.math.stat.Frequency(comparator46);
        double double49 = frequency47.getCumPct((long) 10);
        double double51 = frequency47.getPct('#');
        java.util.Comparator comparator52 = null;
        org.apache.commons.math.stat.Frequency frequency53 = new org.apache.commons.math.stat.Frequency(comparator52);
        double double55 = frequency53.getCumPct((long) 10);
        long long57 = frequency53.getCumFreq((java.lang.Object) 1.0d);
        double double59 = frequency53.getCumPct((int) '4');
        long long60 = frequency53.getSumFreq();
        double double61 = frequency47.getCumPct((java.lang.Object) long60);
        double double63 = frequency47.getCumPct('#');
        java.util.Comparator comparator64 = null;
        org.apache.commons.math.stat.Frequency frequency65 = new org.apache.commons.math.stat.Frequency(comparator64);
        long long67 = frequency65.getCumFreq((java.lang.Object) (short) 10);
        double double68 = frequency47.getPct((java.lang.Object) frequency65);
        long long70 = frequency47.getCumFreq(10);
        long long71 = frequency47.getSumFreq();
        frequency47.addValue((long) 'a');
        long long75 = frequency47.getCumFreq('#');
        java.util.Iterator iterator76 = frequency47.valuesIterator();
        long long77 = frequency14.getCount((java.lang.Object) frequency47);
        double double79 = frequency14.getPct((long) (byte) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(iterator76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        java.util.Comparator comparator2 = null;
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency(comparator2);
        double double5 = frequency3.getCumPct((long) 10);
        long long7 = frequency3.getCount((java.lang.Object) 100.0f);
        double double9 = frequency3.getPct(1L);
        double double11 = frequency3.getCumPct((int) (short) -1);
        double double12 = frequency1.getCumPct((java.lang.Object) frequency3);
        long long14 = frequency1.getCount(100);
        java.lang.Class<?> wildcardClass15 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        java.util.Iterator iterator21 = frequency1.valuesIterator();
        java.lang.String str22 = frequency1.toString();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        frequency1.clear();
        java.util.Comparator comparator7 = null;
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency(comparator7);
        double double10 = frequency8.getCumPct((long) 10);
        double double12 = frequency8.getPct('#');
        frequency8.addValue((int) '4');
        java.util.Comparator comparator15 = null;
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency(comparator15);
        double double18 = frequency16.getCumPct((long) 10);
        long long20 = frequency16.getCumFreq((java.lang.Object) 1.0d);
        long long22 = frequency16.getCumFreq((long) 'a');
        double double24 = frequency16.getPct((java.lang.Object) (byte) 100);
        long long25 = frequency8.getCumFreq((java.lang.Object) (byte) 100);
        java.util.Comparator comparator26 = null;
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency(comparator26);
        double double29 = frequency27.getCumPct((long) 10);
        double double31 = frequency27.getPct('#');
        double double33 = frequency27.getCumPct((int) '#');
        frequency27.addValue(1);
        java.util.Comparator comparator36 = null;
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency(comparator36);
        double double39 = frequency37.getCumPct((long) 10);
        double double41 = frequency37.getPct('#');
        double double43 = frequency37.getCumPct((int) '#');
        long long44 = frequency27.getCumFreq((java.lang.Object) double43);
        java.util.Comparator comparator45 = null;
        org.apache.commons.math.stat.Frequency frequency46 = new org.apache.commons.math.stat.Frequency(comparator45);
        double double48 = frequency46.getCumPct((long) 10);
        long long50 = frequency46.getCount((java.lang.Object) 100.0f);
        frequency46.addValue((java.lang.Integer) (-1));
        frequency46.addValue((java.lang.Integer) 10);
        double double56 = frequency46.getCumPct((long) (byte) 10);
        long long57 = frequency27.getCumFreq((java.lang.Object) frequency46);
        long long58 = frequency8.getCumFreq((java.lang.Object) long57);
        double double59 = frequency1.getPct((java.lang.Object) long58);
        double double61 = frequency1.getCumPct('a');
        frequency1.addValue((java.lang.Integer) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long1 = frequency0.getSumFreq();
        long long3 = frequency0.getCumFreq((long) 1);
        frequency0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.util.Comparator comparator81 = null;
        org.apache.commons.math.stat.Frequency frequency82 = new org.apache.commons.math.stat.Frequency(comparator81);
        double double84 = frequency82.getCumPct((long) 10);
        long long86 = frequency82.getCumFreq((java.lang.Object) 1.0d);
        long long88 = frequency82.getCumFreq((long) 'a');
        double double90 = frequency82.getPct((java.lang.Object) (byte) 100);
        double double92 = frequency82.getCumPct((long) (-1));
        frequency82.addValue((long) (short) 0);
        double double95 = frequency1.getPct((java.lang.Object) frequency82);
        java.util.Iterator iterator96 = frequency82.valuesIterator();
        double double98 = frequency82.getCumPct((long) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertNotNull(iterator96);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1.0d + "'", double98 == 1.0d);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCumFreq((int) (byte) 10);
        long long26 = frequency19.getCount('a');
        java.util.Iterator iterator27 = frequency19.valuesIterator();
        java.lang.Class<?> wildcardClass28 = frequency19.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(iterator27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.lang.String str8 = frequency1.toString();
        frequency1.addValue((int) (byte) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        long long7 = frequency1.getCumFreq(' ');
        java.lang.String str8 = frequency1.toString();
        double double10 = frequency1.getCumPct(0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getPct((long) '#');
        long long9 = frequency1.getCumFreq((long) 'a');
        java.lang.Object obj10 = null;
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue(obj10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        double double11 = frequency1.getPct((-1L));
        frequency1.addValue((int) '#');
        long long15 = frequency1.getCumFreq((long) ' ');
        frequency1.addValue((int) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq((long) 0);
        double double14 = frequency1.getPct('a');
        long long16 = frequency1.getCumFreq((long) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        long long26 = frequency22.getCount((java.lang.Object) 100.0f);
        frequency22.addValue((java.lang.Integer) (-1));
        frequency22.addValue((java.lang.Integer) 10);
        long long32 = frequency22.getCumFreq((int) 'a');
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        double double36 = frequency34.getCumPct((long) 10);
        long long38 = frequency34.getCount((java.lang.Object) 100.0f);
        frequency34.addValue((java.lang.Integer) (-1));
        frequency22.addValue((java.lang.Object) (-1));
        long long42 = frequency1.getCount((java.lang.Object) frequency22);
        // The following exception was thrown during execution in test generation
        try {
            frequency22.addValue('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        java.util.Iterator iterator4 = frequency1.valuesIterator();
        java.util.Comparator comparator5 = null;
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency(comparator5);
        double double8 = frequency6.getCumPct((long) 10);
        long long10 = frequency6.getCumFreq((java.lang.Object) 1.0d);
        double double12 = frequency6.getCumPct((int) '4');
        long long13 = frequency6.getSumFreq();
        long long15 = frequency6.getCount((long) (-1));
        long long17 = frequency6.getCount('4');
        long long19 = frequency6.getCount(1);
        double double21 = frequency6.getCumPct((java.lang.Object) (short) 10);
        double double22 = frequency1.getCumPct((java.lang.Object) frequency6);
        frequency6.addValue((long) 100);
        long long26 = frequency6.getCumFreq('a');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        frequency1.addValue((java.lang.Object) '4');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq((long) 0);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        double double18 = frequency14.getPct('#');
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        long long24 = frequency20.getCumFreq((java.lang.Object) 1.0d);
        double double26 = frequency20.getCumPct((int) '4');
        long long27 = frequency20.getSumFreq();
        double double28 = frequency14.getCumPct((java.lang.Object) long27);
        double double30 = frequency14.getCumPct('#');
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        long long34 = frequency32.getCumFreq((java.lang.Object) (short) 10);
        double double35 = frequency14.getPct((java.lang.Object) frequency32);
        long long37 = frequency32.getCount(0);
        frequency32.addValue((long) ' ');
        double double41 = frequency32.getCumPct(0);
        java.util.Comparator comparator42 = null;
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency(comparator42);
        double double45 = frequency43.getCumPct((long) 10);
        long long47 = frequency43.getCount((java.lang.Object) 100.0f);
        double double49 = frequency43.getPct(1L);
        long long51 = frequency43.getCumFreq((long) 0);
        double double53 = frequency43.getPct('a');
        double double55 = frequency43.getPct(1);
        double double57 = frequency43.getCumPct((long) (byte) 0);
        long long58 = frequency32.getCumFreq((java.lang.Object) frequency43);
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        double double64 = frequency60.getPct('#');
        frequency60.addValue((int) '4');
        java.util.Comparator comparator67 = null;
        org.apache.commons.math.stat.Frequency frequency68 = new org.apache.commons.math.stat.Frequency(comparator67);
        double double70 = frequency68.getCumPct((long) 10);
        long long72 = frequency68.getCumFreq((java.lang.Object) 1.0d);
        long long74 = frequency68.getCumFreq((long) 'a');
        double double76 = frequency68.getPct((java.lang.Object) (byte) 100);
        long long77 = frequency60.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str78 = frequency60.toString();
        long long80 = frequency60.getCumFreq((int) (short) 0);
        frequency60.addValue((int) '#');
        frequency43.addValue((java.lang.Object) '#');
        frequency1.addValue((java.lang.Object) '#');
        frequency1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str78, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.util.Comparator comparator81 = null;
        org.apache.commons.math.stat.Frequency frequency82 = new org.apache.commons.math.stat.Frequency(comparator81);
        double double84 = frequency82.getCumPct((long) 10);
        long long86 = frequency82.getCumFreq((java.lang.Object) 1.0d);
        long long88 = frequency82.getCumFreq((long) 'a');
        double double90 = frequency82.getPct((java.lang.Object) (byte) 100);
        double double92 = frequency82.getCumPct((long) (-1));
        frequency82.addValue((long) (short) 0);
        double double95 = frequency1.getPct((java.lang.Object) frequency82);
        long long97 = frequency1.getCumFreq((long) (byte) 0);
        long long99 = frequency1.getCumFreq(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        long long10 = frequency1.getCumFreq((java.lang.Object) 100L);
        java.lang.String str11 = frequency1.toString();
        double double13 = frequency1.getPct((long) (short) 10);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        long long19 = frequency15.getCount((java.lang.Object) 100.0f);
        double double21 = frequency15.getPct(1L);
        frequency1.addValue((java.lang.Object) double21);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency1.getCumFreq(10);
        frequency1.addValue((java.lang.Object) 1.0f);
        java.lang.Class<?> wildcardClass27 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        long long26 = frequency22.getCount((java.lang.Object) 100.0f);
        frequency22.addValue((java.lang.Integer) (-1));
        frequency22.addValue((java.lang.Integer) 10);
        long long32 = frequency22.getCumFreq((int) 'a');
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        double double36 = frequency34.getCumPct((long) 10);
        long long38 = frequency34.getCount((java.lang.Object) 100.0f);
        frequency34.addValue((java.lang.Integer) (-1));
        frequency22.addValue((java.lang.Object) (-1));
        long long42 = frequency1.getCount((java.lang.Object) frequency22);
        java.lang.Class<?> wildcardClass43 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        frequency1.addValue('4');
        double double11 = frequency1.getCumPct(1);
        long long13 = frequency1.getCount('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        double double18 = frequency1.getPct(' ');
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        double double24 = frequency20.getPct('#');
        double double26 = frequency20.getCumPct((int) '#');
        frequency20.addValue(1);
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        double double34 = frequency30.getPct('#');
        double double36 = frequency30.getCumPct((int) '#');
        long long37 = frequency20.getCumFreq((java.lang.Object) double36);
        double double39 = frequency20.getCumPct((long) (short) 0);
        double double40 = frequency1.getPct((java.lang.Object) frequency20);
        double double42 = frequency1.getPct(0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq(2L);
        double double14 = frequency1.getCumPct(' ');
        java.util.Comparator comparator15 = null;
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency(comparator15);
        double double18 = frequency16.getCumPct((long) 10);
        double double20 = frequency16.getPct('#');
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        long long26 = frequency22.getCumFreq((java.lang.Object) 1.0d);
        double double28 = frequency22.getCumPct((int) '4');
        long long29 = frequency22.getSumFreq();
        double double30 = frequency16.getCumPct((java.lang.Object) long29);
        double double32 = frequency16.getCumPct('#');
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        long long36 = frequency34.getCumFreq((java.lang.Object) (short) 10);
        double double37 = frequency16.getPct((java.lang.Object) frequency34);
        long long39 = frequency34.getCount(0);
        double double41 = frequency34.getCumPct(1);
        double double43 = frequency34.getPct('a');
        double double45 = frequency34.getPct(' ');
        java.util.Comparator comparator46 = null;
        org.apache.commons.math.stat.Frequency frequency47 = new org.apache.commons.math.stat.Frequency(comparator46);
        double double49 = frequency47.getCumPct((long) 10);
        long long51 = frequency47.getCount((java.lang.Object) 100.0f);
        double double53 = frequency47.getPct(1L);
        frequency47.clear();
        long long56 = frequency47.getCumFreq((long) (byte) 1);
        double double58 = frequency47.getPct((long) '#');
        long long59 = frequency34.getCumFreq((java.lang.Object) frequency47);
        double double61 = frequency47.getPct((long) 'a');
        double double62 = frequency1.getCumPct((java.lang.Object) double61);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((int) (short) 1);
        double double9 = frequency1.getCumPct(' ');
        frequency1.addValue((long) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        double double26 = frequency19.getCumPct(1);
        double double28 = frequency19.getPct('a');
        double double30 = frequency19.getPct((long) (byte) 100);
        double double32 = frequency19.getCumPct((long) (byte) -1);
        java.lang.String str33 = frequency19.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str33, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        long long51 = frequency32.getCount('#');
        frequency1.addValue((java.lang.Object) '#');
        java.util.Iterator iterator53 = frequency1.valuesIterator();
        double double55 = frequency1.getPct((int) '4');
        java.util.Comparator comparator56 = null;
        org.apache.commons.math.stat.Frequency frequency57 = new org.apache.commons.math.stat.Frequency(comparator56);
        double double59 = frequency57.getCumPct((long) 10);
        double double61 = frequency57.getPct('#');
        java.util.Comparator comparator62 = null;
        org.apache.commons.math.stat.Frequency frequency63 = new org.apache.commons.math.stat.Frequency(comparator62);
        double double65 = frequency63.getCumPct((long) 10);
        long long67 = frequency63.getCumFreq((java.lang.Object) 1.0d);
        double double69 = frequency63.getCumPct((int) '4');
        long long70 = frequency63.getSumFreq();
        double double71 = frequency57.getCumPct((java.lang.Object) long70);
        double double72 = frequency1.getPct((java.lang.Object) long70);
        frequency1.addValue('4');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(iterator53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        long long32 = frequency1.getCount('a');
        long long34 = frequency1.getCount((int) (short) 1);
        frequency1.addValue(2L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        double double12 = frequency1.getCumPct((int) (short) 100);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((int) (byte) 10);
        double double20 = frequency14.getPct((long) '#');
        java.lang.String str21 = frequency14.toString();
        long long22 = frequency1.getCount((java.lang.Object) frequency14);
        java.lang.String str23 = frequency1.toString();
        frequency1.addValue((int) ' ');
        java.util.Comparator comparator26 = null;
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency(comparator26);
        double double29 = frequency27.getCumPct((long) 10);
        long long31 = frequency27.getCumFreq((java.lang.Object) 1.0d);
        double double33 = frequency27.getCumPct((int) '4');
        long long35 = frequency27.getCumFreq((int) (byte) 10);
        java.util.Comparator comparator36 = null;
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency(comparator36);
        double double39 = frequency37.getCumPct((long) 10);
        long long41 = frequency37.getCount((java.lang.Object) 100.0f);
        frequency37.addValue((java.lang.Integer) (-1));
        frequency37.addValue((java.lang.Integer) 10);
        double double47 = frequency37.getCumPct((long) '4');
        double double48 = frequency27.getCumPct((java.lang.Object) '4');
        long long50 = frequency27.getCount('a');
        long long51 = frequency1.getCumFreq((java.lang.Object) long50);
        long long53 = frequency1.getCount('a');
        long long55 = frequency1.getCumFreq('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((long) (short) 10);
        long long10 = frequency1.getSumFreq();
        long long12 = frequency1.getCumFreq((long) (byte) 100);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCumFreq((java.lang.Object) 1.0d);
        long long20 = frequency14.getCumFreq((long) 'a');
        frequency14.addValue((long) 100);
        java.util.Iterator iterator23 = frequency14.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) iterator23);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2L + "'", long10 == 2L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2L + "'", long12 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(iterator23);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long23 = frequency19.getSumFreq();
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        long long29 = frequency25.getCumFreq((java.lang.Object) 1.0d);
        double double31 = frequency25.getCumPct((int) '4');
        long long32 = frequency25.getSumFreq();
        double double34 = frequency25.getPct('a');
        frequency25.addValue(0L);
        double double37 = frequency19.getPct((java.lang.Object) frequency25);
        long long38 = frequency19.getSumFreq();
        java.util.Comparator comparator39 = null;
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency(comparator39);
        double double42 = frequency40.getCumPct((long) 10);
        double double44 = frequency40.getPct('#');
        java.util.Comparator comparator45 = null;
        org.apache.commons.math.stat.Frequency frequency46 = new org.apache.commons.math.stat.Frequency(comparator45);
        double double48 = frequency46.getCumPct((long) 10);
        long long50 = frequency46.getCumFreq((java.lang.Object) 1.0d);
        double double52 = frequency46.getCumPct((int) '4');
        long long53 = frequency46.getSumFreq();
        double double54 = frequency40.getCumPct((java.lang.Object) long53);
        double double56 = frequency40.getCumPct('#');
        java.util.Comparator comparator57 = null;
        org.apache.commons.math.stat.Frequency frequency58 = new org.apache.commons.math.stat.Frequency(comparator57);
        long long60 = frequency58.getCumFreq((java.lang.Object) (short) 10);
        double double61 = frequency40.getPct((java.lang.Object) frequency58);
        java.util.Comparator comparator62 = null;
        org.apache.commons.math.stat.Frequency frequency63 = new org.apache.commons.math.stat.Frequency(comparator62);
        double double65 = frequency63.getCumPct((long) 10);
        long long67 = frequency63.getCumFreq((java.lang.Object) 1.0d);
        double double69 = frequency63.getCumPct((int) '4');
        long long71 = frequency63.getCumFreq((int) (byte) 10);
        java.util.Comparator comparator72 = null;
        org.apache.commons.math.stat.Frequency frequency73 = new org.apache.commons.math.stat.Frequency(comparator72);
        double double75 = frequency73.getCumPct((long) 10);
        long long77 = frequency73.getCount((java.lang.Object) 100.0f);
        frequency73.addValue((java.lang.Integer) (-1));
        frequency73.addValue((java.lang.Integer) 10);
        double double83 = frequency73.getCumPct((long) '4');
        double double84 = frequency63.getCumPct((java.lang.Object) '4');
        frequency58.addValue((java.lang.Object) '4');
        java.util.Comparator comparator86 = null;
        org.apache.commons.math.stat.Frequency frequency87 = new org.apache.commons.math.stat.Frequency(comparator86);
        double double89 = frequency87.getCumPct((long) 10);
        long long91 = frequency87.getCount((java.lang.Object) 100.0f);
        frequency87.addValue((java.lang.Integer) (-1));
        double double94 = frequency58.getCumPct((java.lang.Object) frequency87);
        double double95 = frequency19.getPct((java.lang.Object) frequency87);
        java.lang.Object obj96 = new java.lang.Object();
        long long97 = frequency19.getCount(obj96);
        long long99 = frequency19.getCount('4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        frequency1.addValue((int) '4');
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCumFreq((java.lang.Object) 1.0d);
        long long15 = frequency9.getCumFreq((long) 'a');
        double double17 = frequency9.getPct((java.lang.Object) (byte) 100);
        long long18 = frequency1.getCumFreq((java.lang.Object) (byte) 100);
        long long20 = frequency1.getCount((int) (short) 1);
        long long22 = frequency1.getCount('a');
        frequency1.addValue((long) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        java.util.Comparator comparator2 = null;
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency(comparator2);
        double double5 = frequency3.getCumPct((long) 10);
        long long7 = frequency3.getCount((java.lang.Object) 100.0f);
        double double9 = frequency3.getPct(1L);
        double double11 = frequency3.getCumPct((int) (short) -1);
        double double12 = frequency1.getCumPct((java.lang.Object) frequency3);
        double double14 = frequency1.getCumPct(10);
        long long15 = frequency1.getSumFreq();
        double double17 = frequency1.getPct((int) 'a');
        long long19 = frequency1.getCumFreq(10L);
        long long21 = frequency1.getCount((int) (short) 0);
        frequency1.addValue(100L);
        java.lang.Class<?> wildcardClass24 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        java.util.Iterator iterator4 = frequency1.valuesIterator();
        frequency1.addValue('a');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(iterator4);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long1 = frequency0.getSumFreq();
        long long3 = frequency0.getCumFreq((long) 1);
        double double5 = frequency0.getPct('#');
        double double7 = frequency0.getPct((long) '4');
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        double double11 = frequency1.getPct('a');
        double double13 = frequency1.getPct(1);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        double double19 = frequency15.getPct('#');
        double double21 = frequency15.getCumPct((int) '#');
        frequency15.addValue(1);
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        double double29 = frequency25.getPct('#');
        double double31 = frequency25.getCumPct((int) '#');
        long long32 = frequency15.getCumFreq((java.lang.Object) double31);
        double double34 = frequency15.getCumPct((long) (short) 0);
        long long35 = frequency1.getCumFreq((java.lang.Object) double34);
        long long36 = frequency1.getSumFreq();
        long long38 = frequency1.getCount('4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        long long9 = frequency1.getCount((long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        java.util.Comparator comparator2 = null;
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency(comparator2);
        double double5 = frequency3.getCumPct((long) 10);
        long long7 = frequency3.getCount((java.lang.Object) 100.0f);
        double double9 = frequency3.getPct(1L);
        double double11 = frequency3.getCumPct((int) (short) -1);
        double double12 = frequency1.getCumPct((java.lang.Object) frequency3);
        frequency3.addValue((int) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        double double13 = frequency9.getPct('#');
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        long long19 = frequency15.getCumFreq((java.lang.Object) 1.0d);
        double double21 = frequency15.getCumPct((int) '4');
        long long22 = frequency15.getSumFreq();
        double double23 = frequency9.getCumPct((java.lang.Object) long22);
        double double25 = frequency9.getCumPct('#');
        java.util.Comparator comparator26 = null;
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency(comparator26);
        long long29 = frequency27.getCumFreq((java.lang.Object) (short) 10);
        double double30 = frequency9.getPct((java.lang.Object) frequency27);
        long long32 = frequency27.getCount(0);
        frequency27.addValue((long) ' ');
        double double35 = frequency1.getCumPct((java.lang.Object) frequency27);
        java.util.Comparator comparator36 = null;
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency(comparator36);
        double double39 = frequency37.getCumPct((long) 10);
        long long41 = frequency37.getCount((java.lang.Object) 100.0f);
        double double43 = frequency37.getPct(1L);
        frequency37.clear();
        long long46 = frequency37.getCumFreq((long) (byte) 1);
        long long48 = frequency37.getCumFreq(2L);
        double double50 = frequency37.getCumPct(' ');
        double double52 = frequency37.getPct((java.lang.Object) 10.0d);
        double double53 = frequency1.getCumPct((java.lang.Object) double52);
        frequency1.addValue('#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        frequency0.addValue((long) (short) 100);
        frequency0.addValue((java.lang.Integer) (-1));
        long long6 = frequency0.getCount((int) '#');
        double double8 = frequency0.getPct((long) (byte) 10);
        double double10 = frequency0.getPct('4');
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        long long82 = frequency1.getCount((int) (byte) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCumFreq((int) (byte) 10);
        long long26 = frequency19.getCount('a');
        frequency19.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getPct((long) '#');
        long long9 = frequency1.getCumFreq((long) 'a');
        long long11 = frequency1.getCount((java.lang.Object) (short) -1);
        frequency1.addValue((java.lang.Integer) 0);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        double double19 = frequency15.getPct('#');
        double double21 = frequency15.getCumPct((int) '#');
        java.lang.String str22 = frequency15.toString();
        long long24 = frequency15.getCumFreq((long) '4');
        java.lang.String str25 = frequency15.toString();
        java.lang.String str26 = frequency15.toString();
        double double28 = frequency15.getCumPct('#');
        long long29 = frequency1.getCount((java.lang.Object) frequency15);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str25, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str26, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        frequency1.addValue(' ');
        frequency1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        frequency1.addValue((long) (-1));
        java.lang.Class<?> wildcardClass33 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency1.getCumFreq(10);
        frequency1.addValue((java.lang.Object) 1.0f);
        java.util.Comparator comparator27 = null;
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency(comparator27);
        double double30 = frequency28.getCumPct((long) 10);
        long long32 = frequency28.getCount((java.lang.Object) 100.0f);
        frequency28.addValue((java.lang.Integer) (-1));
        frequency28.addValue((java.lang.Integer) 10);
        double double38 = frequency28.getCumPct((long) '4');
        java.util.Comparator comparator39 = null;
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency(comparator39);
        double double42 = frequency40.getCumPct((long) 10);
        long long44 = frequency40.getCount((java.lang.Object) 100.0f);
        double double46 = frequency40.getPct(1L);
        frequency40.clear();
        long long49 = frequency40.getCumFreq((long) (byte) 1);
        long long51 = frequency40.getCumFreq(2L);
        frequency40.clear();
        long long53 = frequency28.getCumFreq((java.lang.Object) frequency40);
        double double54 = frequency1.getCumPct((java.lang.Object) long53);
        long long56 = frequency1.getCount('4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.util.Comparator comparator81 = null;
        org.apache.commons.math.stat.Frequency frequency82 = new org.apache.commons.math.stat.Frequency(comparator81);
        double double84 = frequency82.getCumPct((long) 10);
        long long86 = frequency82.getCumFreq((java.lang.Object) 1.0d);
        long long88 = frequency82.getCumFreq((long) 'a');
        double double90 = frequency82.getPct((java.lang.Object) (byte) 100);
        double double92 = frequency82.getCumPct((long) (-1));
        frequency82.addValue((long) (short) 0);
        double double95 = frequency1.getPct((java.lang.Object) frequency82);
        frequency1.addValue(0L);
        long long99 = frequency1.getCount((long) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        long long14 = frequency1.getCount((int) (short) -1);
        double double16 = frequency1.getCumPct(0);
        long long18 = frequency1.getCount((long) (byte) 100);
        double double20 = frequency1.getPct('#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq(2L);
        frequency1.clear();
        double double15 = frequency1.getCumPct((int) (byte) 1);
        java.lang.Object obj16 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = frequency1.getCount(obj16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        long long32 = frequency1.getCount('a');
        long long34 = frequency1.getCount((int) (short) 1);
        double double36 = frequency1.getCumPct('4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq('#');
        long long14 = frequency1.getCount('#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCount((java.lang.Object) 100.0f);
        double double15 = frequency9.getPct(1L);
        frequency9.clear();
        long long18 = frequency9.getCumFreq((long) (byte) 1);
        long long20 = frequency9.getCumFreq(2L);
        long long21 = frequency1.getCumFreq((java.lang.Object) 2L);
        long long23 = frequency1.getCount(0L);
        double double25 = frequency1.getCumPct((int) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long1 = frequency0.getSumFreq();
        double double3 = frequency0.getCumPct('a');
        java.lang.String str4 = frequency0.toString();
        frequency0.addValue((int) (short) 100);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str4, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        frequency1.addValue((long) 100);
        java.util.Iterator iterator10 = frequency1.valuesIterator();
        long long12 = frequency1.getCount((int) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCount((java.lang.Object) 100.0f);
        double double15 = frequency9.getPct(1L);
        frequency9.clear();
        long long18 = frequency9.getCumFreq((long) (byte) 1);
        long long20 = frequency9.getCumFreq(2L);
        long long21 = frequency1.getCumFreq((java.lang.Object) 2L);
        long long23 = frequency1.getCount(0L);
        double double25 = frequency1.getPct('#');
        frequency1.addValue('4');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long23 = frequency19.getSumFreq();
        java.lang.String str24 = frequency19.toString();
        double double26 = frequency19.getCumPct(100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str24, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        java.lang.Class<?> wildcardClass8 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        long long24 = frequency22.getCount('#');
        java.util.Iterator iterator25 = frequency22.valuesIterator();
        java.util.Comparator comparator26 = null;
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency(comparator26);
        double double29 = frequency27.getCumPct((long) 10);
        long long31 = frequency27.getCumFreq((java.lang.Object) 1.0d);
        double double33 = frequency27.getCumPct((int) '4');
        long long34 = frequency27.getSumFreq();
        long long36 = frequency27.getCount((long) (-1));
        long long38 = frequency27.getCount('4');
        long long40 = frequency27.getCount(1);
        double double42 = frequency27.getCumPct((java.lang.Object) (short) 10);
        double double43 = frequency22.getCumPct((java.lang.Object) frequency27);
        long long44 = frequency1.getCumFreq((java.lang.Object) frequency27);
        double double46 = frequency27.getCumPct(' ');
        java.lang.String str47 = frequency27.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str47, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCount((java.lang.Object) 100.0f);
        double double15 = frequency9.getPct(1L);
        frequency9.clear();
        long long18 = frequency9.getCumFreq((long) (byte) 1);
        long long20 = frequency9.getCumFreq(2L);
        long long21 = frequency1.getCumFreq((java.lang.Object) 2L);
        long long23 = frequency1.getCount(0L);
        frequency1.addValue((java.lang.Integer) 0);
        java.util.Comparator comparator26 = null;
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency(comparator26);
        double double29 = frequency27.getCumPct((long) 10);
        double double31 = frequency27.getPct('#');
        double double33 = frequency27.getCumPct((int) '#');
        java.lang.String str34 = frequency27.toString();
        long long36 = frequency27.getCumFreq((long) '4');
        java.lang.String str37 = frequency27.toString();
        java.lang.String str38 = frequency27.toString();
        long long40 = frequency27.getCount('4');
        long long42 = frequency27.getCumFreq(' ');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str34, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str37, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str38, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCount((int) (byte) 0);
        double double11 = frequency1.getCumPct((long) 1);
        frequency1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        frequency1.addValue((int) (short) 10);
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCumFreq((java.lang.Object) 1.0d);
        double double19 = frequency13.getCumPct((int) '4');
        long long20 = frequency13.getSumFreq();
        long long22 = frequency13.getCount((long) (-1));
        long long24 = frequency13.getCount('4');
        long long26 = frequency13.getCount(1);
        double double28 = frequency13.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        long long34 = frequency30.getCount((java.lang.Object) 100.0f);
        double double36 = frequency30.getPct(1L);
        long long38 = frequency30.getCumFreq((long) 0);
        double double40 = frequency30.getPct('a');
        double double42 = frequency30.getPct(1);
        java.util.Comparator comparator43 = null;
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency(comparator43);
        double double46 = frequency44.getCumPct((long) 10);
        double double48 = frequency44.getPct('#');
        double double50 = frequency44.getCumPct((int) '#');
        frequency44.addValue(1);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        double double60 = frequency54.getCumPct((int) '#');
        long long61 = frequency44.getCumFreq((java.lang.Object) double60);
        double double63 = frequency44.getCumPct((long) (short) 0);
        long long64 = frequency30.getCumFreq((java.lang.Object) double63);
        java.util.Comparator comparator65 = null;
        org.apache.commons.math.stat.Frequency frequency66 = new org.apache.commons.math.stat.Frequency(comparator65);
        double double68 = frequency66.getCumPct((long) 10);
        double double70 = frequency66.getPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        double double74 = frequency72.getCumPct((long) 10);
        long long76 = frequency72.getCumFreq((java.lang.Object) 1.0d);
        double double78 = frequency72.getCumPct((int) '4');
        long long79 = frequency72.getSumFreq();
        double double80 = frequency66.getCumPct((java.lang.Object) long79);
        double double82 = frequency66.getCumPct('#');
        java.util.Comparator comparator83 = null;
        org.apache.commons.math.stat.Frequency frequency84 = new org.apache.commons.math.stat.Frequency(comparator83);
        long long86 = frequency84.getCumFreq((java.lang.Object) (short) 10);
        double double87 = frequency66.getPct((java.lang.Object) frequency84);
        long long89 = frequency66.getCumFreq(10);
        long long90 = frequency66.getSumFreq();
        double double91 = frequency30.getCumPct((java.lang.Object) long90);
        long long92 = frequency13.getCumFreq((java.lang.Object) double91);
        java.lang.Object obj93 = null;
        double double94 = frequency13.getCumPct(obj93);
        java.util.Iterator iterator95 = frequency13.valuesIterator();
        long long96 = frequency1.getCumFreq((java.lang.Object) iterator95);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertNotNull(iterator95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        long long7 = frequency1.getCount(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long9 = frequency1.getCumFreq((int) (byte) 10);
        long long11 = frequency1.getCount(3L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        frequency1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct((long) (short) 0);
        frequency1.addValue((java.lang.Integer) (-1));
        long long20 = frequency1.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        frequency1.addValue((long) (byte) 0);
        long long12 = frequency1.getCount(10L);
        java.lang.Class<?> wildcardClass13 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        frequency1.addValue((int) '4');
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        double double13 = frequency9.getPct('#');
        java.util.Iterator iterator14 = frequency9.valuesIterator();
        double double16 = frequency9.getPct('#');
        long long18 = frequency9.getCumFreq((java.lang.Object) 100L);
        frequency1.addValue((java.lang.Object) long18);
        long long21 = frequency1.getCount('#');
        double double23 = frequency1.getPct('#');
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        double double29 = frequency25.getPct('#');
        double double31 = frequency25.getCumPct((int) '#');
        frequency25.addValue(1);
        java.util.Comparator comparator34 = null;
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency(comparator34);
        double double37 = frequency35.getCumPct((long) 10);
        double double39 = frequency35.getPct('#');
        double double41 = frequency35.getCumPct((int) '#');
        long long42 = frequency25.getCumFreq((java.lang.Object) double41);
        java.util.Comparator comparator43 = null;
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency(comparator43);
        double double46 = frequency44.getCumPct((long) 10);
        long long48 = frequency44.getCount((java.lang.Object) 100.0f);
        frequency44.addValue((java.lang.Integer) (-1));
        frequency44.addValue((java.lang.Integer) 10);
        double double54 = frequency44.getCumPct((long) (byte) 10);
        long long55 = frequency25.getCumFreq((java.lang.Object) frequency44);
        java.util.Comparator comparator56 = null;
        org.apache.commons.math.stat.Frequency frequency57 = new org.apache.commons.math.stat.Frequency(comparator56);
        double double59 = frequency57.getCumPct((long) 10);
        long long61 = frequency57.getCount((java.lang.Object) 100.0f);
        frequency57.addValue((java.lang.Integer) (-1));
        frequency57.addValue((java.lang.Integer) 10);
        frequency57.addValue((int) (byte) 1);
        double double68 = frequency44.getPct((java.lang.Object) (byte) 1);
        long long70 = frequency44.getCumFreq('4');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        double double74 = frequency72.getCumPct((long) 10);
        double double76 = frequency72.getPct('#');
        double double78 = frequency72.getCumPct((int) '#');
        frequency72.addValue(1);
        java.util.Comparator comparator81 = null;
        org.apache.commons.math.stat.Frequency frequency82 = new org.apache.commons.math.stat.Frequency(comparator81);
        double double84 = frequency82.getCumPct((long) 10);
        double double86 = frequency82.getPct('#');
        double double88 = frequency82.getCumPct((int) '#');
        long long89 = frequency72.getCumFreq((java.lang.Object) double88);
        double double91 = frequency72.getCumPct((long) (short) 0);
        java.util.Iterator iterator92 = frequency72.valuesIterator();
        long long93 = frequency44.getCumFreq((java.lang.Object) frequency72);
        long long95 = frequency44.getCumFreq(' ');
        double double97 = frequency44.getPct((int) (byte) 100);
        double double98 = frequency1.getPct((java.lang.Object) frequency44);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(iterator92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        double double12 = frequency1.getCumPct((int) (short) 100);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((int) (byte) 10);
        double double20 = frequency14.getPct((long) '#');
        java.lang.String str21 = frequency14.toString();
        long long22 = frequency1.getCount((java.lang.Object) frequency14);
        long long24 = frequency1.getCount((long) 1);
        long long26 = frequency1.getCumFreq('a');
        long long27 = frequency1.getSumFreq();
        java.lang.Object obj28 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long29 = frequency1.getCount(obj28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((java.lang.Object) 100.0f);
        double double20 = frequency14.getPct(1L);
        frequency14.clear();
        long long22 = frequency1.getCount((java.lang.Object) frequency14);
        double double24 = frequency14.getPct((java.lang.Object) 1.0d);
        long long26 = frequency14.getCount((long) 100);
        java.util.Comparator comparator27 = null;
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency(comparator27);
        long long30 = frequency28.getCount('#');
        java.util.Iterator iterator31 = frequency28.valuesIterator();
        double double32 = frequency14.getPct((java.lang.Object) frequency28);
        double double34 = frequency14.getPct((int) (byte) 0);
        java.util.Comparator comparator35 = null;
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency(comparator35);
        double double38 = frequency36.getCumPct((long) 10);
        long long40 = frequency36.getCount((int) (byte) 10);
        double double42 = frequency36.getCumPct((-1));
        long long44 = frequency36.getCount('#');
        double double46 = frequency36.getPct('4');
        double double47 = frequency14.getCumPct((java.lang.Object) double46);
        java.util.Comparator comparator48 = null;
        org.apache.commons.math.stat.Frequency frequency49 = new org.apache.commons.math.stat.Frequency(comparator48);
        double double51 = frequency49.getCumPct((long) 10);
        long long53 = frequency49.getCumFreq((java.lang.Object) 1.0d);
        double double55 = frequency49.getCumPct((int) '4');
        long long56 = frequency49.getSumFreq();
        long long58 = frequency49.getCount((long) (-1));
        long long60 = frequency49.getCount('4');
        long long62 = frequency49.getCount(1);
        frequency49.addValue((java.lang.Integer) 1);
        double double65 = frequency14.getCumPct((java.lang.Object) frequency49);
        frequency49.addValue(10L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        long long10 = frequency1.getCumFreq((java.lang.Object) 100L);
        java.lang.String str11 = frequency1.toString();
        double double13 = frequency1.getPct((long) (short) 10);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        long long19 = frequency15.getCumFreq((java.lang.Object) 1.0d);
        double double21 = frequency15.getCumPct((int) '4');
        long long22 = frequency15.getSumFreq();
        double double24 = frequency15.getPct('a');
        frequency15.addValue(0L);
        long long27 = frequency1.getCount((java.lang.Object) 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount((java.lang.Object) 10.0f);
        java.util.Comparator comparator15 = null;
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency(comparator15);
        double double18 = frequency16.getCumPct((long) 10);
        double double20 = frequency16.getPct('#');
        java.util.Iterator iterator21 = frequency16.valuesIterator();
        double double23 = frequency16.getPct('#');
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        long long29 = frequency25.getCount((java.lang.Object) 100.0f);
        double double31 = frequency25.getPct(1L);
        long long33 = frequency25.getCumFreq((long) 0);
        double double35 = frequency25.getPct('a');
        double double36 = frequency16.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator37 = null;
        org.apache.commons.math.stat.Frequency frequency38 = new org.apache.commons.math.stat.Frequency(comparator37);
        double double40 = frequency38.getCumPct((long) 10);
        long long42 = frequency38.getCount((java.lang.Object) 100.0f);
        long long44 = frequency38.getCumFreq((long) 0);
        double double45 = frequency16.getCumPct((java.lang.Object) frequency38);
        java.util.Comparator comparator46 = null;
        org.apache.commons.math.stat.Frequency frequency47 = new org.apache.commons.math.stat.Frequency(comparator46);
        double double49 = frequency47.getCumPct((long) 10);
        double double51 = frequency47.getPct('#');
        double double53 = frequency47.getCumPct((int) '#');
        frequency47.addValue(1);
        java.util.Comparator comparator56 = null;
        org.apache.commons.math.stat.Frequency frequency57 = new org.apache.commons.math.stat.Frequency(comparator56);
        double double59 = frequency57.getCumPct((long) 10);
        double double61 = frequency57.getPct('#');
        double double63 = frequency57.getCumPct((int) '#');
        long long64 = frequency47.getCumFreq((java.lang.Object) double63);
        long long66 = frequency47.getCount('#');
        frequency16.addValue((java.lang.Object) '#');
        java.util.Iterator iterator68 = frequency16.valuesIterator();
        double double70 = frequency16.getPct((int) '4');
        long long71 = frequency1.getCumFreq((java.lang.Object) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(iterator68);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getPct((long) '#');
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        frequency9.addValue((int) '4');
        frequency9.addValue(0);
        frequency1.addValue((java.lang.Object) 0);
        java.lang.Class<?> wildcardClass15 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        frequency19.addValue((long) ' ');
        double double28 = frequency19.getCumPct(0);
        java.lang.Object obj29 = null;
        // The following exception was thrown during execution in test generation
        try {
            frequency19.addValue(obj29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) (byte) 10);
        double double13 = frequency1.getCumPct('a');
        double double15 = frequency1.getPct(0L);
        long long17 = frequency1.getCount('4');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        double double21 = frequency19.getCumPct((long) 10);
        long long23 = frequency19.getCount((java.lang.Object) 100.0f);
        frequency19.addValue((java.lang.Integer) (-1));
        frequency19.addValue((java.lang.Integer) 10);
        double double29 = frequency19.getCumPct((long) (byte) 10);
        frequency19.addValue((-1L));
        frequency1.addValue((java.lang.Object) (-1L));
        frequency1.addValue((int) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getPct((long) '#');
        long long9 = frequency1.getCumFreq((long) 'a');
        long long11 = frequency1.getCount((java.lang.Object) (short) -1);
        long long13 = frequency1.getCount('a');
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        long long19 = frequency15.getCumFreq((java.lang.Object) 1.0d);
        double double21 = frequency15.getCumPct((int) '4');
        long long22 = frequency15.getSumFreq();
        long long24 = frequency15.getCount((long) (-1));
        long long26 = frequency15.getCount('4');
        long long28 = frequency15.getCount(1);
        double double30 = frequency15.getCumPct((java.lang.Object) (short) 10);
        double double32 = frequency15.getPct(' ');
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        double double36 = frequency34.getCumPct((long) 10);
        double double38 = frequency34.getPct('#');
        double double40 = frequency34.getCumPct((int) '#');
        frequency34.addValue(1);
        java.util.Comparator comparator43 = null;
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency(comparator43);
        double double46 = frequency44.getCumPct((long) 10);
        double double48 = frequency44.getPct('#');
        double double50 = frequency44.getCumPct((int) '#');
        long long51 = frequency34.getCumFreq((java.lang.Object) double50);
        double double53 = frequency34.getCumPct((long) (short) 0);
        double double54 = frequency15.getPct((java.lang.Object) frequency34);
        long long56 = frequency15.getCount(0);
        java.util.Comparator comparator57 = null;
        org.apache.commons.math.stat.Frequency frequency58 = new org.apache.commons.math.stat.Frequency(comparator57);
        double double60 = frequency58.getCumPct((long) 10);
        double double62 = frequency58.getPct('#');
        java.util.Comparator comparator63 = null;
        org.apache.commons.math.stat.Frequency frequency64 = new org.apache.commons.math.stat.Frequency(comparator63);
        double double66 = frequency64.getCumPct((long) 10);
        long long68 = frequency64.getCumFreq((java.lang.Object) 1.0d);
        double double70 = frequency64.getCumPct((int) '4');
        long long71 = frequency64.getSumFreq();
        double double72 = frequency58.getCumPct((java.lang.Object) long71);
        double double74 = frequency58.getCumPct((long) (short) 0);
        frequency58.addValue(0L);
        frequency58.addValue((java.lang.Integer) (-1));
        frequency15.addValue((java.lang.Object) (-1));
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        frequency1.addValue((int) '4');
        java.lang.String str4 = frequency1.toString();
        long long5 = frequency1.getSumFreq();
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCount((java.lang.Object) 100.0f);
        double double13 = frequency7.getPct(1L);
        long long15 = frequency7.getCumFreq((long) 0);
        double double17 = frequency7.getPct('a');
        double double19 = frequency7.getPct(1);
        frequency7.addValue('a');
        long long22 = frequency1.getCumFreq((java.lang.Object) 'a');
        frequency1.addValue((long) 10);
        long long26 = frequency1.getCount('a');
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str4, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        long long10 = frequency1.getCumFreq((java.lang.Object) 100L);
        double double12 = frequency1.getPct('4');
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((int) (byte) 10);
        double double20 = frequency14.getPct((long) '#');
        long long22 = frequency14.getCumFreq((long) 'a');
        long long23 = frequency1.getCount((java.lang.Object) long22);
        long long25 = frequency1.getCumFreq((long) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct((long) (short) 0);
        frequency1.clear();
        java.lang.Class<?> wildcardClass19 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount((java.lang.Object) 10.0f);
        double double16 = frequency1.getCumPct((long) (byte) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        long long24 = frequency22.getCount('#');
        java.util.Iterator iterator25 = frequency22.valuesIterator();
        java.util.Comparator comparator26 = null;
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency(comparator26);
        double double29 = frequency27.getCumPct((long) 10);
        long long31 = frequency27.getCumFreq((java.lang.Object) 1.0d);
        double double33 = frequency27.getCumPct((int) '4');
        long long34 = frequency27.getSumFreq();
        long long36 = frequency27.getCount((long) (-1));
        long long38 = frequency27.getCount('4');
        long long40 = frequency27.getCount(1);
        double double42 = frequency27.getCumPct((java.lang.Object) (short) 10);
        double double43 = frequency22.getCumPct((java.lang.Object) frequency27);
        long long44 = frequency1.getCumFreq((java.lang.Object) frequency27);
        double double46 = frequency1.getPct((long) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        frequency1.addValue((int) '4');
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        frequency11.addValue((java.lang.Integer) (-1));
        long long20 = frequency1.getCumFreq((java.lang.Object) (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount((java.lang.Object) 10.0f);
        frequency1.addValue((-1L));
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCumFreq((java.lang.Object) 1.0d);
        long long24 = frequency18.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator25 = null;
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency(comparator25);
        double double28 = frequency26.getCumPct((long) 10);
        double double30 = frequency26.getPct('#');
        double double32 = frequency26.getCumPct((int) '#');
        java.lang.String str33 = frequency26.toString();
        frequency26.addValue(' ');
        double double37 = frequency26.getPct('#');
        double double38 = frequency18.getCumPct((java.lang.Object) '#');
        java.util.Iterator iterator39 = frequency18.valuesIterator();
        long long40 = frequency1.getCumFreq((java.lang.Object) iterator39);
        long long42 = frequency1.getCount('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str33, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        double double12 = frequency1.getCumPct((int) (short) 100);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((int) (byte) 10);
        double double20 = frequency14.getPct((long) '#');
        java.lang.String str21 = frequency14.toString();
        long long22 = frequency1.getCount((java.lang.Object) frequency14);
        java.lang.String str23 = frequency1.toString();
        frequency1.addValue((int) ' ');
        java.util.Comparator comparator26 = null;
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency(comparator26);
        double double29 = frequency27.getCumPct((long) 10);
        long long31 = frequency27.getCumFreq((java.lang.Object) 1.0d);
        double double33 = frequency27.getCumPct((int) '4');
        long long35 = frequency27.getCumFreq((int) (byte) 10);
        java.util.Comparator comparator36 = null;
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency(comparator36);
        double double39 = frequency37.getCumPct((long) 10);
        long long41 = frequency37.getCount((java.lang.Object) 100.0f);
        frequency37.addValue((java.lang.Integer) (-1));
        frequency37.addValue((java.lang.Integer) 10);
        double double47 = frequency37.getCumPct((long) '4');
        double double48 = frequency27.getCumPct((java.lang.Object) '4');
        long long50 = frequency27.getCount('a');
        long long51 = frequency1.getCumFreq((java.lang.Object) long50);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        double double9 = frequency1.getCumPct((int) (short) -1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCount((java.lang.Object) 100.0f);
        double double19 = frequency13.getPct(1L);
        double double21 = frequency13.getCumPct((int) (short) -1);
        double double22 = frequency11.getCumPct((java.lang.Object) frequency13);
        long long23 = frequency1.getCumFreq((java.lang.Object) frequency11);
        double double25 = frequency11.getCumPct((long) ' ');
        java.util.Comparator comparator26 = null;
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency(comparator26);
        double double29 = frequency27.getCumPct((long) 10);
        double double31 = frequency27.getPct('#');
        frequency27.clear();
        long long33 = frequency11.getCount((java.lang.Object) frequency27);
        java.util.Comparator comparator34 = null;
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency(comparator34);
        double double37 = frequency35.getCumPct((long) 10);
        long long39 = frequency35.getCumFreq((java.lang.Object) 1.0d);
        double double41 = frequency35.getCumPct((int) '4');
        long long42 = frequency35.getSumFreq();
        double double44 = frequency35.getPct('a');
        frequency35.addValue(0L);
        frequency35.clear();
        long long48 = frequency35.getSumFreq();
        // The following exception was thrown during execution in test generation
        try {
            frequency27.addValue((java.lang.Object) frequency35);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        frequency1.addValue((int) '4');
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        double double13 = frequency9.getPct('#');
        java.util.Iterator iterator14 = frequency9.valuesIterator();
        double double16 = frequency9.getPct('#');
        long long18 = frequency9.getCumFreq((java.lang.Object) 100L);
        frequency1.addValue((java.lang.Object) long18);
        long long21 = frequency1.getCount('#');
        double double23 = frequency1.getPct('#');
        frequency1.addValue((long) ' ');
        long long26 = frequency1.getSumFreq();
        java.lang.Class<?> wildcardClass27 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3L + "'", long26 == 3L);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        long long32 = frequency1.getCount('a');
        long long34 = frequency1.getCount((int) (short) 1);
        double double36 = frequency1.getCumPct((int) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        long long10 = frequency1.getSumFreq();
        double double12 = frequency1.getPct(1);
        long long14 = frequency1.getCumFreq((int) (byte) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCount(0L);
        java.lang.String str10 = frequency1.toString();
        long long12 = frequency1.getCount('a');
        double double14 = frequency1.getCumPct((int) (byte) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        java.util.Comparator comparator23 = null;
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency(comparator23);
        double double26 = frequency24.getCumPct((long) 10);
        long long28 = frequency24.getCumFreq((java.lang.Object) 1.0d);
        double double30 = frequency24.getCumPct((int) '4');
        long long32 = frequency24.getCumFreq((int) (byte) 10);
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        double double36 = frequency34.getCumPct((long) 10);
        long long38 = frequency34.getCount((java.lang.Object) 100.0f);
        frequency34.addValue((java.lang.Integer) (-1));
        frequency34.addValue((java.lang.Integer) 10);
        double double44 = frequency34.getCumPct((long) '4');
        double double45 = frequency24.getCumPct((java.lang.Object) '4');
        frequency19.addValue((java.lang.Object) '4');
        java.util.Comparator comparator47 = null;
        org.apache.commons.math.stat.Frequency frequency48 = new org.apache.commons.math.stat.Frequency(comparator47);
        double double50 = frequency48.getCumPct((long) 10);
        long long52 = frequency48.getCount((java.lang.Object) 100.0f);
        frequency48.addValue((java.lang.Integer) (-1));
        double double55 = frequency19.getCumPct((java.lang.Object) frequency48);
        java.util.Comparator comparator56 = null;
        org.apache.commons.math.stat.Frequency frequency57 = new org.apache.commons.math.stat.Frequency(comparator56);
        double double59 = frequency57.getCumPct((long) 10);
        long long61 = frequency57.getCount((java.lang.Object) 100.0f);
        double double63 = frequency57.getPct(1L);
        long long65 = frequency57.getCumFreq((long) 0);
        long long66 = frequency57.getSumFreq();
        frequency57.clear();
        long long68 = frequency19.getCount((java.lang.Object) frequency57);
        long long69 = frequency19.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        double double26 = frequency19.getCumPct(1);
        double double28 = frequency19.getPct('a');
        double double30 = frequency19.getPct((long) (byte) 100);
        frequency19.addValue('4');
        double double34 = frequency19.getCumPct((long) (short) 1);
        java.lang.String str35 = frequency19.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n" + "'", str35, "Value \t Freq. \t Pct. \t Cum Pct. \n4\t1\t100%\t100%\n");
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long23 = frequency19.getSumFreq();
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        long long29 = frequency25.getCumFreq((java.lang.Object) 1.0d);
        double double31 = frequency25.getCumPct((int) '4');
        long long32 = frequency25.getSumFreq();
        double double34 = frequency25.getPct('a');
        frequency25.addValue(0L);
        double double37 = frequency19.getPct((java.lang.Object) frequency25);
        frequency19.addValue('a');
        java.lang.String str40 = frequency19.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n" + "'", str40, "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        double double10 = frequency1.getPct('a');
        java.util.Comparator comparator11 = null;
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency(comparator11);
        double double14 = frequency12.getCumPct((long) 10);
        long long16 = frequency12.getCumFreq((java.lang.Object) 1.0d);
        long long18 = frequency12.getCumFreq((long) 'a');
        frequency12.addValue((long) 100);
        java.util.Iterator iterator21 = frequency12.valuesIterator();
        double double22 = frequency1.getPct((java.lang.Object) iterator21);
        double double24 = frequency1.getPct((long) 0);
        java.util.Iterator iterator25 = frequency1.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(iterator25);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        double double12 = frequency1.getCumPct((int) (short) 100);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((int) (byte) 10);
        double double20 = frequency14.getPct((long) '#');
        java.lang.String str21 = frequency14.toString();
        long long22 = frequency1.getCount((java.lang.Object) frequency14);
        long long24 = frequency1.getCount((long) 1);
        long long26 = frequency1.getCumFreq('a');
        java.lang.String str27 = frequency1.toString();
        double double29 = frequency1.getCumPct((int) (short) -1);
        java.util.Comparator comparator30 = null;
        org.apache.commons.math.stat.Frequency frequency31 = new org.apache.commons.math.stat.Frequency(comparator30);
        double double33 = frequency31.getCumPct((long) 10);
        double double35 = frequency31.getPct('#');
        frequency31.addValue((int) '4');
        java.util.Comparator comparator38 = null;
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency(comparator38);
        double double41 = frequency39.getCumPct((long) 10);
        long long43 = frequency39.getCumFreq((java.lang.Object) 1.0d);
        long long45 = frequency39.getCumFreq((long) 'a');
        double double47 = frequency39.getPct((java.lang.Object) (byte) 100);
        long long48 = frequency31.getCumFreq((java.lang.Object) (byte) 100);
        long long50 = frequency31.getCount((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency31);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str27, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount((java.lang.Object) 10.0f);
        frequency1.addValue((-1L));
        long long18 = frequency1.getCount('a');
        long long20 = frequency1.getCumFreq('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        frequency1.addValue((int) '4');
        double double5 = frequency1.getCumPct(0L);
        double double7 = frequency1.getCumPct(' ');
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        long long14 = frequency1.getCount('4');
        long long16 = frequency1.getCumFreq(' ');
        frequency1.addValue((long) (byte) 1);
        double double20 = frequency1.getPct((int) (short) 0);
        java.lang.Object obj21 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long22 = frequency1.getCount(obj21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        long long14 = frequency1.getCount('4');
        frequency1.addValue((long) 0);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((int) (byte) 10);
        double double24 = frequency18.getPct((long) '#');
        java.util.Comparator comparator25 = null;
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency(comparator25);
        frequency26.addValue((int) '4');
        frequency26.addValue(0);
        frequency18.addValue((java.lang.Object) 0);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency18);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long23 = frequency19.getSumFreq();
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        long long29 = frequency25.getCumFreq((java.lang.Object) 1.0d);
        double double31 = frequency25.getCumPct((int) '4');
        long long32 = frequency25.getSumFreq();
        double double34 = frequency25.getPct('a');
        frequency25.addValue(0L);
        double double37 = frequency19.getPct((java.lang.Object) frequency25);
        long long38 = frequency19.getSumFreq();
        double double40 = frequency19.getPct((int) (byte) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCount((int) (byte) 0);
        long long11 = frequency1.getCumFreq(1L);
        long long13 = frequency1.getCumFreq((int) (byte) 10);
        long long15 = frequency1.getCumFreq((long) 0);
        java.util.Comparator comparator16 = null;
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency(comparator16);
        double double19 = frequency17.getCumPct((long) 10);
        long long21 = frequency17.getCumFreq((java.lang.Object) 1.0d);
        long long23 = frequency17.getCumFreq((java.lang.Object) (short) 10);
        double double25 = frequency17.getCumPct((int) (byte) 0);
        java.util.Comparator comparator26 = null;
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency(comparator26);
        double double29 = frequency27.getCumPct((long) 10);
        double double31 = frequency27.getPct('#');
        frequency27.addValue((int) '4');
        java.util.Comparator comparator34 = null;
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency(comparator34);
        double double37 = frequency35.getCumPct((long) 10);
        long long39 = frequency35.getCumFreq((java.lang.Object) 1.0d);
        long long41 = frequency35.getCumFreq((long) 'a');
        double double43 = frequency35.getPct((java.lang.Object) (byte) 100);
        long long44 = frequency27.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str45 = frequency27.toString();
        long long47 = frequency27.getCumFreq((int) (short) 0);
        frequency27.addValue((int) '#');
        long long51 = frequency27.getCumFreq(' ');
        long long52 = frequency17.getCount((java.lang.Object) ' ');
        long long53 = frequency1.getCount((java.lang.Object) long52);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str45, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        frequency1.addValue((int) '4');
        long long9 = frequency1.getCumFreq((long) 100);
        double double11 = frequency1.getPct('4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        long long14 = frequency1.getCount('4');
        double double16 = frequency1.getCumPct(100L);
        frequency1.addValue((-1));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        double double9 = frequency1.getCumPct((long) (short) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        frequency19.addValue((long) ' ');
        double double28 = frequency19.getCumPct(0);
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        double double34 = frequency30.getPct('#');
        java.util.Iterator iterator35 = frequency30.valuesIterator();
        double double37 = frequency30.getPct('#');
        java.util.Comparator comparator38 = null;
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency(comparator38);
        double double41 = frequency39.getCumPct((long) 10);
        long long43 = frequency39.getCount((java.lang.Object) 100.0f);
        double double45 = frequency39.getPct(1L);
        long long47 = frequency39.getCumFreq((long) 0);
        double double49 = frequency39.getPct('a');
        double double50 = frequency30.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator51 = null;
        org.apache.commons.math.stat.Frequency frequency52 = new org.apache.commons.math.stat.Frequency(comparator51);
        double double54 = frequency52.getCumPct((long) 10);
        long long56 = frequency52.getCount((java.lang.Object) 100.0f);
        long long58 = frequency52.getCumFreq((long) 0);
        double double59 = frequency30.getCumPct((java.lang.Object) frequency52);
        frequency30.addValue((int) (short) -1);
        long long62 = frequency19.getCount((java.lang.Object) frequency30);
        long long64 = frequency30.getCount(3L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(iterator35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.util.Comparator comparator81 = null;
        org.apache.commons.math.stat.Frequency frequency82 = new org.apache.commons.math.stat.Frequency(comparator81);
        double double84 = frequency82.getCumPct((long) 10);
        long long86 = frequency82.getCumFreq((java.lang.Object) 1.0d);
        long long88 = frequency82.getCumFreq((long) 'a');
        double double90 = frequency82.getPct((java.lang.Object) (byte) 100);
        double double92 = frequency82.getCumPct((long) (-1));
        frequency82.addValue((long) (short) 0);
        double double95 = frequency1.getPct((java.lang.Object) frequency82);
        long long97 = frequency1.getCumFreq((long) (byte) 0);
        frequency1.addValue(0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        long long11 = frequency1.getCount('4');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        double double10 = frequency1.getPct('a');
        long long12 = frequency1.getCumFreq('a');
        long long14 = frequency1.getCount(' ');
        java.util.Comparator comparator15 = null;
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency(comparator15);
        double double18 = frequency16.getCumPct((long) 10);
        double double20 = frequency16.getPct('#');
        double double22 = frequency16.getCumPct((int) '#');
        java.lang.String str23 = frequency16.toString();
        long long25 = frequency16.getCumFreq((long) '4');
        java.lang.String str26 = frequency16.toString();
        java.lang.String str27 = frequency16.toString();
        java.util.Comparator comparator28 = null;
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency(comparator28);
        double double31 = frequency29.getCumPct((long) 10);
        long long33 = frequency29.getCount((java.lang.Object) 100.0f);
        double double35 = frequency29.getPct(1L);
        frequency29.clear();
        long long37 = frequency16.getCount((java.lang.Object) frequency29);
        frequency29.addValue((int) (short) -1);
        double double40 = frequency1.getPct((java.lang.Object) (short) -1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        frequency42.addValue((int) '4');
        java.util.Comparator comparator49 = null;
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency(comparator49);
        double double52 = frequency50.getCumPct((long) 10);
        long long54 = frequency50.getCumFreq((java.lang.Object) 1.0d);
        long long56 = frequency50.getCumFreq((long) 'a');
        double double58 = frequency50.getPct((java.lang.Object) (byte) 100);
        long long59 = frequency42.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str60 = frequency42.toString();
        long long62 = frequency42.getCumFreq((int) (short) 0);
        frequency42.addValue((long) (byte) 100);
        frequency42.addValue((-1L));
        long long67 = frequency1.getCount((java.lang.Object) (-1L));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str23, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str26, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str27, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str60, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.util.Comparator comparator81 = null;
        org.apache.commons.math.stat.Frequency frequency82 = new org.apache.commons.math.stat.Frequency(comparator81);
        double double84 = frequency82.getCumPct((long) 10);
        long long86 = frequency82.getCumFreq((java.lang.Object) 1.0d);
        long long88 = frequency82.getCumFreq((long) 'a');
        double double90 = frequency82.getPct((java.lang.Object) (byte) 100);
        double double92 = frequency82.getCumPct((long) (-1));
        frequency82.addValue((long) (short) 0);
        double double95 = frequency1.getPct((java.lang.Object) frequency82);
        java.util.Iterator iterator96 = frequency82.valuesIterator();
        double double98 = frequency82.getCumPct((int) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertNotNull(iterator96);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1.0d + "'", double98 == 1.0d);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long9 = frequency1.getCumFreq((int) (byte) 10);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        long long15 = frequency11.getCount((java.lang.Object) 100.0f);
        frequency11.addValue((java.lang.Integer) (-1));
        frequency11.addValue((java.lang.Integer) 10);
        double double21 = frequency11.getCumPct((long) '4');
        double double22 = frequency1.getCumPct((java.lang.Object) '4');
        long long24 = frequency1.getCount('a');
        double double26 = frequency1.getPct('#');
        java.util.Comparator comparator27 = null;
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency(comparator27);
        double double30 = frequency28.getCumPct((long) 10);
        double double32 = frequency28.getPct('#');
        double double34 = frequency28.getCumPct((int) '#');
        java.lang.String str35 = frequency28.toString();
        long long37 = frequency28.getCumFreq((long) '4');
        java.lang.String str38 = frequency28.toString();
        java.lang.String str39 = frequency28.toString();
        long long41 = frequency28.getCount((int) (short) -1);
        double double43 = frequency28.getCumPct(0);
        double double44 = frequency1.getCumPct((java.lang.Object) double43);
        java.util.Comparator comparator45 = null;
        org.apache.commons.math.stat.Frequency frequency46 = new org.apache.commons.math.stat.Frequency(comparator45);
        double double48 = frequency46.getCumPct((long) 10);
        long long50 = frequency46.getCount((java.lang.Object) 100.0f);
        double double52 = frequency46.getPct(1L);
        frequency46.clear();
        long long55 = frequency46.getCumFreq((long) (byte) 1);
        long long57 = frequency46.getCumFreq((long) 0);
        long long59 = frequency46.getCount((long) (byte) 1);
        java.lang.Class<?> wildcardClass60 = frequency46.getClass();
        double double61 = frequency1.getCumPct((java.lang.Object) frequency46);
        double double63 = frequency46.getCumPct((long) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str35, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str38, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str39, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) 'a');
        double double13 = frequency1.getPct(10L);
        frequency1.addValue(1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.5d + "'", double13 == 0.5d);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        long long15 = frequency11.getCount((int) (byte) 10);
        double double17 = frequency11.getPct((long) '#');
        double double18 = frequency1.getPct((java.lang.Object) double17);
        long long19 = frequency1.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getPct((long) '#');
        java.lang.String str8 = frequency1.toString();
        double double10 = frequency1.getPct(0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long23 = frequency19.getSumFreq();
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        long long29 = frequency25.getCumFreq((java.lang.Object) 1.0d);
        double double31 = frequency25.getCumPct((int) '4');
        long long32 = frequency25.getSumFreq();
        double double34 = frequency25.getPct('a');
        frequency25.addValue(0L);
        double double37 = frequency19.getPct((java.lang.Object) frequency25);
        long long38 = frequency19.getSumFreq();
        java.util.Comparator comparator39 = null;
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency(comparator39);
        double double42 = frequency40.getCumPct((long) 10);
        double double44 = frequency40.getPct('#');
        java.util.Comparator comparator45 = null;
        org.apache.commons.math.stat.Frequency frequency46 = new org.apache.commons.math.stat.Frequency(comparator45);
        double double48 = frequency46.getCumPct((long) 10);
        long long50 = frequency46.getCumFreq((java.lang.Object) 1.0d);
        double double52 = frequency46.getCumPct((int) '4');
        long long53 = frequency46.getSumFreq();
        double double54 = frequency40.getCumPct((java.lang.Object) long53);
        double double56 = frequency40.getCumPct('#');
        java.util.Comparator comparator57 = null;
        org.apache.commons.math.stat.Frequency frequency58 = new org.apache.commons.math.stat.Frequency(comparator57);
        long long60 = frequency58.getCumFreq((java.lang.Object) (short) 10);
        double double61 = frequency40.getPct((java.lang.Object) frequency58);
        java.util.Comparator comparator62 = null;
        org.apache.commons.math.stat.Frequency frequency63 = new org.apache.commons.math.stat.Frequency(comparator62);
        double double65 = frequency63.getCumPct((long) 10);
        long long67 = frequency63.getCumFreq((java.lang.Object) 1.0d);
        double double69 = frequency63.getCumPct((int) '4');
        long long71 = frequency63.getCumFreq((int) (byte) 10);
        java.util.Comparator comparator72 = null;
        org.apache.commons.math.stat.Frequency frequency73 = new org.apache.commons.math.stat.Frequency(comparator72);
        double double75 = frequency73.getCumPct((long) 10);
        long long77 = frequency73.getCount((java.lang.Object) 100.0f);
        frequency73.addValue((java.lang.Integer) (-1));
        frequency73.addValue((java.lang.Integer) 10);
        double double83 = frequency73.getCumPct((long) '4');
        double double84 = frequency63.getCumPct((java.lang.Object) '4');
        frequency58.addValue((java.lang.Object) '4');
        java.util.Comparator comparator86 = null;
        org.apache.commons.math.stat.Frequency frequency87 = new org.apache.commons.math.stat.Frequency(comparator86);
        double double89 = frequency87.getCumPct((long) 10);
        long long91 = frequency87.getCount((java.lang.Object) 100.0f);
        frequency87.addValue((java.lang.Integer) (-1));
        double double94 = frequency58.getCumPct((java.lang.Object) frequency87);
        double double95 = frequency19.getPct((java.lang.Object) frequency87);
        double double97 = frequency87.getCumPct((int) (short) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 1.0d + "'", double97 == 1.0d);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) (byte) 10);
        double double13 = frequency1.getCumPct('a');
        double double15 = frequency1.getPct(0L);
        long long17 = frequency1.getCount('4');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        double double21 = frequency19.getCumPct((long) 10);
        long long23 = frequency19.getCount((java.lang.Object) 100.0f);
        frequency19.addValue((java.lang.Integer) (-1));
        frequency19.addValue((java.lang.Integer) 10);
        double double29 = frequency19.getCumPct((long) (byte) 10);
        frequency19.addValue((-1L));
        frequency1.addValue((java.lang.Object) (-1L));
        long long34 = frequency1.getCount((long) (byte) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        frequency1.addValue((long) (byte) 1);
        long long16 = frequency1.getCount((int) (byte) 100);
        long long18 = frequency1.getCumFreq((long) (byte) 0);
        long long20 = frequency1.getCount((long) '4');
        java.util.Iterator iterator21 = frequency1.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(iterator21);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        frequency1.addValue((int) '4');
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCumFreq((java.lang.Object) 1.0d);
        long long15 = frequency9.getCumFreq((long) 'a');
        double double17 = frequency9.getPct((java.lang.Object) (byte) 100);
        long long18 = frequency1.getCumFreq((java.lang.Object) (byte) 100);
        long long20 = frequency1.getCount((int) ' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        double double11 = frequency1.getPct((-1L));
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        frequency13.addValue((java.lang.Integer) 1);
        frequency1.addValue((java.lang.Object) 1);
        double double20 = frequency1.getCumPct((long) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        frequency1.addValue((java.lang.Integer) 1);
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCount((java.lang.Object) 100.0f);
        frequency7.addValue((java.lang.Integer) (-1));
        double double14 = frequency1.getPct((java.lang.Object) (-1));
        java.lang.String str15 = frequency1.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        frequency1.clear();
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCount((java.lang.Object) 100.0f);
        double double19 = frequency13.getPct(1L);
        frequency13.clear();
        frequency13.addValue((long) (byte) 0);
        long long23 = frequency13.getSumFreq();
        double double24 = frequency1.getPct((java.lang.Object) long23);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        double double12 = frequency1.getCumPct((int) (short) 100);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((int) (byte) 10);
        double double20 = frequency14.getPct((long) '#');
        java.lang.String str21 = frequency14.toString();
        long long22 = frequency1.getCount((java.lang.Object) frequency14);
        long long24 = frequency14.getCount((long) '4');
        long long26 = frequency14.getCount((int) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        java.util.Comparator comparator2 = null;
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency(comparator2);
        double double5 = frequency3.getCumPct((long) 10);
        long long7 = frequency3.getCount((java.lang.Object) 100.0f);
        double double9 = frequency3.getPct(1L);
        double double11 = frequency3.getCumPct((int) (short) -1);
        double double12 = frequency1.getCumPct((java.lang.Object) frequency3);
        long long14 = frequency3.getCumFreq((long) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq((long) 0);
        java.util.Iterator iterator13 = frequency1.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(iterator13);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        java.util.Iterator iterator4 = frequency1.valuesIterator();
        java.util.Comparator comparator5 = null;
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency(comparator5);
        double double8 = frequency6.getCumPct((long) 10);
        long long10 = frequency6.getCumFreq((java.lang.Object) 1.0d);
        double double12 = frequency6.getCumPct((int) '4');
        long long13 = frequency6.getSumFreq();
        long long15 = frequency6.getCount((long) (-1));
        long long17 = frequency6.getCount('4');
        long long19 = frequency6.getCount(1);
        double double21 = frequency6.getCumPct((java.lang.Object) (short) 10);
        double double22 = frequency1.getCumPct((java.lang.Object) frequency6);
        double double24 = frequency6.getPct((long) 10);
        double double26 = frequency6.getCumPct(100);
        long long28 = frequency6.getCount(10L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct((long) (short) 0);
        frequency1.addValue(0L);
        java.util.Comparator comparator20 = null;
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency(comparator20);
        double double23 = frequency21.getCumPct((long) 10);
        long long25 = frequency21.getCount((java.lang.Object) 100.0f);
        double double27 = frequency21.getCumPct((long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency21);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        double double11 = frequency1.getPct('a');
        double double13 = frequency1.getPct(1);
        double double15 = frequency1.getCumPct((long) (byte) 0);
        frequency1.addValue((java.lang.Integer) (-1));
        long long19 = frequency1.getCount('#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        long long11 = frequency1.getCumFreq(' ');
        long long12 = frequency1.getSumFreq();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency1.getCumFreq(10);
        long long25 = frequency1.getSumFreq();
        frequency1.addValue((long) 'a');
        long long29 = frequency1.getCumFreq('#');
        java.util.Iterator iterator30 = frequency1.valuesIterator();
        frequency1.addValue((java.lang.Integer) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(iterator30);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        frequency1.addValue('4');
        double double11 = frequency1.getCumPct(1);
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        long long19 = frequency15.getCount((java.lang.Object) 100.0f);
        double double21 = frequency15.getPct(1L);
        double double23 = frequency15.getCumPct((int) (short) -1);
        double double24 = frequency13.getCumPct((java.lang.Object) frequency15);
        frequency15.addValue((int) (short) 10);
        java.util.Comparator comparator27 = null;
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency(comparator27);
        double double30 = frequency28.getCumPct((long) 10);
        long long32 = frequency28.getCumFreq((java.lang.Object) 1.0d);
        double double34 = frequency28.getCumPct((int) '4');
        long long35 = frequency28.getSumFreq();
        long long37 = frequency28.getCount((long) (-1));
        frequency28.addValue(1);
        long long40 = frequency28.getSumFreq();
        frequency28.addValue((java.lang.Integer) 1);
        double double43 = frequency15.getPct((java.lang.Object) frequency28);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        long long32 = frequency1.getCount('a');
        double double34 = frequency1.getPct('a');
        java.lang.String str35 = frequency1.toString();
        java.lang.String str36 = frequency1.toString();
        frequency1.addValue((java.lang.Integer) 100);
        java.util.Comparator comparator39 = null;
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency(comparator39);
        double double42 = frequency40.getCumPct((long) 10);
        double double44 = frequency40.getPct('#');
        double double46 = frequency40.getCumPct((int) '#');
        java.lang.String str47 = frequency40.toString();
        long long49 = frequency40.getCumFreq((long) '4');
        java.lang.String str50 = frequency40.toString();
        java.lang.String str51 = frequency40.toString();
        java.util.Comparator comparator52 = null;
        org.apache.commons.math.stat.Frequency frequency53 = new org.apache.commons.math.stat.Frequency(comparator52);
        double double55 = frequency53.getCumPct((long) 10);
        long long57 = frequency53.getCount((java.lang.Object) 100.0f);
        double double59 = frequency53.getPct(1L);
        frequency53.clear();
        long long61 = frequency40.getCount((java.lang.Object) frequency53);
        double double63 = frequency53.getPct((java.lang.Object) 1.0d);
        long long65 = frequency53.getCount((long) 100);
        java.util.Comparator comparator66 = null;
        org.apache.commons.math.stat.Frequency frequency67 = new org.apache.commons.math.stat.Frequency(comparator66);
        long long69 = frequency67.getCount('#');
        java.util.Iterator iterator70 = frequency67.valuesIterator();
        double double71 = frequency53.getPct((java.lang.Object) frequency67);
        double double73 = frequency53.getPct((int) (byte) 0);
        java.util.Comparator comparator74 = null;
        org.apache.commons.math.stat.Frequency frequency75 = new org.apache.commons.math.stat.Frequency(comparator74);
        double double77 = frequency75.getCumPct((long) 10);
        long long79 = frequency75.getCount((int) (byte) 10);
        double double81 = frequency75.getCumPct((-1));
        long long83 = frequency75.getCount('#');
        double double85 = frequency75.getPct('4');
        double double86 = frequency53.getCumPct((java.lang.Object) double85);
        double double87 = frequency1.getCumPct((java.lang.Object) double85);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str35, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str36, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str47, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str50, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str51, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(iterator70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        frequency19.addValue((long) ' ');
        double double28 = frequency19.getCumPct(0);
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        long long34 = frequency30.getCount((java.lang.Object) 100.0f);
        double double36 = frequency30.getPct(1L);
        long long38 = frequency30.getCumFreq((long) 0);
        double double40 = frequency30.getPct('a');
        double double42 = frequency30.getPct(1);
        double double44 = frequency30.getCumPct((long) (byte) 0);
        long long45 = frequency19.getCumFreq((java.lang.Object) frequency30);
        long long47 = frequency30.getCumFreq((long) (byte) 100);
        java.lang.Object obj48 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long49 = frequency30.getCount(obj48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        frequency1.addValue((int) '4');
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        double double13 = frequency9.getPct('#');
        java.util.Iterator iterator14 = frequency9.valuesIterator();
        double double16 = frequency9.getPct('#');
        long long18 = frequency9.getCumFreq((java.lang.Object) 100L);
        frequency1.addValue((java.lang.Object) long18);
        long long21 = frequency1.getCount('#');
        double double23 = frequency1.getPct('#');
        frequency1.addValue((long) ' ');
        long long26 = frequency1.getSumFreq();
        double double28 = frequency1.getPct((int) (byte) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3L + "'", long26 == 3L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        frequency1.addValue((int) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        double double9 = frequency1.getCumPct((int) (short) -1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCount((java.lang.Object) 100.0f);
        double double19 = frequency13.getPct(1L);
        double double21 = frequency13.getCumPct((int) (short) -1);
        double double22 = frequency11.getCumPct((java.lang.Object) frequency13);
        long long23 = frequency1.getCumFreq((java.lang.Object) frequency11);
        double double25 = frequency11.getCumPct((long) ' ');
        java.util.Comparator comparator26 = null;
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency(comparator26);
        double double29 = frequency27.getCumPct((long) 10);
        double double31 = frequency27.getPct('#');
        frequency27.clear();
        long long33 = frequency11.getCount((java.lang.Object) frequency27);
        double double35 = frequency27.getCumPct((-1));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long9 = frequency1.getCumFreq((int) (byte) 10);
        long long11 = frequency1.getCount(' ');
        frequency1.addValue((int) (short) -1);
        java.lang.String str14 = frequency1.toString();
        double double16 = frequency1.getPct((long) (byte) 1);
        double double18 = frequency1.getPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getCumPct((-1));
        long long9 = frequency1.getCount('#');
        double double11 = frequency1.getPct('4');
        double double13 = frequency1.getPct((long) '4');
        double double15 = frequency1.getPct(10L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getCumPct((java.lang.Object) false);
        long long9 = frequency1.getCount('4');
        frequency1.addValue((java.lang.Integer) 100);
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        double double17 = frequency13.getPct('#');
        frequency13.addValue((int) '4');
        java.util.Comparator comparator20 = null;
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency(comparator20);
        double double23 = frequency21.getCumPct((long) 10);
        long long25 = frequency21.getCumFreq((java.lang.Object) 1.0d);
        long long27 = frequency21.getCumFreq((long) 'a');
        double double29 = frequency21.getPct((java.lang.Object) (byte) 100);
        long long30 = frequency13.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str31 = frequency13.toString();
        long long33 = frequency13.getCumFreq((int) (short) 0);
        long long35 = frequency13.getCount(' ');
        long long37 = frequency13.getCount(0);
        double double38 = frequency1.getCumPct((java.lang.Object) 0);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str31, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        long long10 = frequency1.getCumFreq((java.lang.Object) 100L);
        java.lang.String str11 = frequency1.toString();
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        long long15 = frequency13.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator16 = null;
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency(comparator16);
        double double19 = frequency17.getCumPct((long) 10);
        long long21 = frequency17.getCount((java.lang.Object) 100.0f);
        frequency17.addValue((java.lang.Integer) (-1));
        frequency17.addValue((java.lang.Integer) 10);
        frequency17.addValue((int) (byte) 1);
        double double28 = frequency13.getCumPct((java.lang.Object) (byte) 1);
        frequency1.addValue((java.lang.Object) double28);
        long long31 = frequency1.getCumFreq(100L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        double double9 = frequency1.getPct((java.lang.Object) (byte) 100);
        double double11 = frequency1.getCumPct((long) (-1));
        frequency1.addValue((long) (short) 0);
        java.lang.Object obj14 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double15 = frequency1.getPct(obj14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        double double18 = frequency1.getPct(' ');
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        double double24 = frequency20.getPct('#');
        double double26 = frequency20.getCumPct((int) '#');
        frequency20.addValue(1);
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        double double34 = frequency30.getPct('#');
        double double36 = frequency30.getCumPct((int) '#');
        long long37 = frequency20.getCumFreq((java.lang.Object) double36);
        double double39 = frequency20.getCumPct((long) (short) 0);
        double double40 = frequency1.getPct((java.lang.Object) frequency20);
        long long42 = frequency1.getCount(0);
        java.util.Comparator comparator43 = null;
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency(comparator43);
        double double46 = frequency44.getCumPct((long) 10);
        double double48 = frequency44.getPct('#');
        java.util.Comparator comparator49 = null;
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency(comparator49);
        double double52 = frequency50.getCumPct((long) 10);
        long long54 = frequency50.getCumFreq((java.lang.Object) 1.0d);
        double double56 = frequency50.getCumPct((int) '4');
        long long57 = frequency50.getSumFreq();
        double double58 = frequency44.getCumPct((java.lang.Object) long57);
        double double60 = frequency44.getCumPct((long) (short) 0);
        frequency44.addValue(0L);
        frequency44.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Object) (-1));
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCount(0L);
        double double11 = frequency1.getPct((int) (short) 100);
        double double13 = frequency1.getPct((int) '4');
        double double15 = frequency1.getCumPct((long) (short) -1);
        frequency1.addValue((java.lang.Integer) 10);
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        double double21 = frequency19.getCumPct((long) 10);
        long long23 = frequency19.getCount((java.lang.Object) 100.0f);
        frequency19.addValue((java.lang.Integer) (-1));
        frequency19.addValue((java.lang.Integer) 10);
        frequency19.addValue((int) (byte) 1);
        long long30 = frequency1.getCumFreq((java.lang.Object) frequency19);
        java.util.Iterator iterator31 = frequency1.valuesIterator();
        java.util.Comparator comparator32 = null;
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency(comparator32);
        double double35 = frequency33.getCumPct((long) 10);
        long long37 = frequency33.getCount((java.lang.Object) 100.0f);
        long long39 = frequency33.getCumFreq(' ');
        long long41 = frequency33.getCumFreq('#');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        double double11 = frequency1.getPct((-1L));
        frequency1.addValue((int) '#');
        java.lang.String str14 = frequency1.toString();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t50%\t50%\n35\t1\t50%\t100%\n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t50%\t50%\n35\t1\t50%\t100%\n");
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((java.lang.Object) 100.0f);
        double double20 = frequency14.getPct(1L);
        frequency14.clear();
        long long22 = frequency1.getCount((java.lang.Object) frequency14);
        double double24 = frequency14.getPct((java.lang.Object) 1.0d);
        long long26 = frequency14.getCount((long) 100);
        java.util.Comparator comparator27 = null;
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency(comparator27);
        long long30 = frequency28.getCount('#');
        java.util.Iterator iterator31 = frequency28.valuesIterator();
        double double32 = frequency14.getPct((java.lang.Object) frequency28);
        double double34 = frequency14.getCumPct('#');
        long long36 = frequency14.getCumFreq('4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCount(0L);
        double double11 = frequency1.getPct((int) (short) 100);
        double double13 = frequency1.getPct((int) '4');
        long long15 = frequency1.getCumFreq((java.lang.Object) (byte) 0);
        frequency1.addValue(2L);
        double double19 = frequency1.getCumPct((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        double double11 = frequency1.getPct((-1L));
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        frequency13.addValue((java.lang.Integer) 1);
        frequency1.addValue((java.lang.Object) 1);
        long long20 = frequency1.getCumFreq(0);
        double double22 = frequency1.getPct(0L);
        double double24 = frequency1.getCumPct((int) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        java.util.Iterator iterator21 = frequency1.valuesIterator();
        java.lang.String str22 = frequency1.toString();
        long long24 = frequency1.getCumFreq((int) (byte) 0);
        java.lang.Class<?> wildcardClass25 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        frequency1.addValue(' ');
        double double12 = frequency1.getPct('#');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Integer) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        double double9 = frequency1.getCumPct((int) (short) -1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        java.lang.String str18 = frequency11.toString();
        long long20 = frequency11.getCumFreq((long) '4');
        frequency1.addValue((java.lang.Object) '4');
        double double23 = frequency1.getPct((long) (short) 10);
        long long25 = frequency1.getCumFreq(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        long long14 = frequency1.getCount((int) (short) -1);
        double double16 = frequency1.getCumPct(0);
        java.lang.Class<?> wildcardClass17 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        long long14 = frequency1.getCount('4');
        long long16 = frequency1.getCumFreq(' ');
        frequency1.addValue((long) (byte) 1);
        long long20 = frequency1.getCumFreq((long) (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        frequency1.addValue('4');
        double double11 = frequency1.getPct((java.lang.Object) 100.0d);
        long long13 = frequency1.getCumFreq('4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        frequency19.addValue((long) ' ');
        double double28 = frequency19.getCumPct(0);
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        long long34 = frequency30.getCount((java.lang.Object) 100.0f);
        double double36 = frequency30.getPct(1L);
        long long38 = frequency30.getCumFreq((long) 0);
        double double40 = frequency30.getPct('a');
        double double42 = frequency30.getPct(1);
        double double44 = frequency30.getCumPct((long) (byte) 0);
        long long45 = frequency19.getCumFreq((java.lang.Object) frequency30);
        long long47 = frequency19.getCumFreq('a');
        long long48 = frequency19.getSumFreq();
        double double50 = frequency19.getPct((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            frequency19.addValue(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getCumPct((java.lang.Object) false);
        long long9 = frequency1.getCount('4');
        frequency1.addValue((java.lang.Integer) 100);
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCumFreq((java.lang.Object) 1.0d);
        double double19 = frequency13.getCumPct('4');
        java.lang.String str20 = frequency13.toString();
        long long21 = frequency1.getCumFreq((java.lang.Object) str20);
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        frequency23.addValue((int) '4');
        frequency23.addValue(0);
        long long28 = frequency1.getCount((java.lang.Object) frequency23);
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        long long34 = frequency30.getCumFreq((java.lang.Object) 1.0d);
        double double36 = frequency30.getCumPct((int) '4');
        long long37 = frequency30.getSumFreq();
        double double39 = frequency30.getPct('a');
        java.util.Comparator comparator40 = null;
        org.apache.commons.math.stat.Frequency frequency41 = new org.apache.commons.math.stat.Frequency(comparator40);
        double double43 = frequency41.getCumPct((long) 10);
        long long45 = frequency41.getCumFreq((java.lang.Object) 1.0d);
        long long47 = frequency41.getCumFreq((long) 'a');
        frequency41.addValue((long) 100);
        java.util.Iterator iterator50 = frequency41.valuesIterator();
        double double51 = frequency30.getPct((java.lang.Object) iterator50);
        double double53 = frequency30.getPct((long) 0);
        java.util.Comparator comparator54 = null;
        org.apache.commons.math.stat.Frequency frequency55 = new org.apache.commons.math.stat.Frequency(comparator54);
        double double57 = frequency55.getCumPct((long) 10);
        long long59 = frequency55.getCumFreq((java.lang.Object) 1.0d);
        double double61 = frequency55.getCumPct((int) '4');
        frequency55.addValue(1);
        java.util.Comparator comparator64 = null;
        org.apache.commons.math.stat.Frequency frequency65 = new org.apache.commons.math.stat.Frequency(comparator64);
        double double67 = frequency65.getCumPct((long) 10);
        long long69 = frequency65.getCount((int) (byte) 10);
        double double71 = frequency65.getPct((long) '#');
        double double72 = frequency55.getPct((java.lang.Object) double71);
        double double73 = frequency30.getPct((java.lang.Object) double71);
        long long74 = frequency1.getCount((java.lang.Object) frequency30);
        double double76 = frequency1.getPct((long) (short) -1);
        double double78 = frequency1.getCumPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(iterator50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        long long7 = frequency1.getCumFreq(' ');
        java.lang.String str8 = frequency1.toString();
        java.util.Iterator iterator9 = frequency1.valuesIterator();
        long long11 = frequency1.getCount(0);
        long long13 = frequency1.getCount((int) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        double double11 = frequency1.getPct('a');
        double double13 = frequency1.getPct(1);
        double double15 = frequency1.getCumPct((long) (byte) 0);
        frequency1.addValue((java.lang.Integer) (-1));
        double double19 = frequency1.getPct((int) (byte) -1);
        frequency1.clear();
        long long22 = frequency1.getCount((int) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long1 = frequency0.getSumFreq();
        long long3 = frequency0.getCumFreq((long) 1);
        java.util.Iterator iterator4 = frequency0.valuesIterator();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(iterator4);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        frequency1.addValue('4');
        double double11 = frequency1.getCumPct(1);
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency12.getSumFreq();
        double double15 = frequency12.getCumPct('a');
        long long17 = frequency12.getCount((int) (short) 100);
        double double19 = frequency12.getPct('#');
        frequency12.addValue((java.lang.Integer) 10);
        double double22 = frequency1.getCumPct((java.lang.Object) frequency12);
        java.lang.Class<?> wildcardClass23 = frequency12.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator4 = null;
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency(comparator4);
        double double7 = frequency5.getCumPct((long) 10);
        long long9 = frequency5.getCount((java.lang.Object) 100.0f);
        frequency5.addValue((java.lang.Integer) (-1));
        frequency5.addValue((java.lang.Integer) 10);
        frequency5.addValue((int) (byte) 1);
        double double16 = frequency1.getCumPct((java.lang.Object) (byte) 1);
        long long18 = frequency1.getCount((int) ' ');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        double double11 = frequency1.getCumPct((long) (byte) 10);
        long long13 = frequency1.getCount('a');
        double double15 = frequency1.getCumPct(0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        long long7 = frequency1.getCumFreq(' ');
        double double9 = frequency1.getPct(2L);
        long long11 = frequency1.getCount('a');
        frequency1.addValue((long) '#');
        long long15 = frequency1.getCumFreq(0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        double double32 = frequency23.getPct(100L);
        frequency23.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCumFreq((int) (byte) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getCumPct((java.lang.Object) false);
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCumFreq((java.lang.Object) 1.0d);
        double double15 = frequency9.getCumPct((int) '4');
        long long16 = frequency9.getSumFreq();
        long long18 = frequency9.getCount((long) (-1));
        long long20 = frequency9.getCount('4');
        long long22 = frequency9.getCount((java.lang.Object) 10.0f);
        long long23 = frequency1.getCount((java.lang.Object) 10.0f);
        long long25 = frequency1.getCumFreq((long) (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        long long82 = frequency1.getCount((long) ' ');
        frequency1.addValue((long) 10);
        long long86 = frequency1.getCount(100);
        long long88 = frequency1.getCumFreq((-1L));
        long long90 = frequency1.getCumFreq((long) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1L + "'", long90 == 1L);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        double double11 = frequency1.getCumPct((long) '4');
        long long13 = frequency1.getCount((int) '#');
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        double double19 = frequency15.getPct('#');
        java.util.Iterator iterator20 = frequency15.valuesIterator();
        double double22 = frequency15.getPct('#');
        double double24 = frequency15.getCumPct(' ');
        double double26 = frequency15.getCumPct((int) ' ');
        long long28 = frequency15.getCumFreq(' ');
        long long30 = frequency15.getCumFreq((long) (byte) 1);
        double double31 = frequency1.getPct((java.lang.Object) long30);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        long long51 = frequency32.getCount('#');
        frequency1.addValue((java.lang.Object) '#');
        java.util.Iterator iterator53 = frequency1.valuesIterator();
        double double55 = frequency1.getPct((int) '4');
        java.util.Comparator comparator56 = null;
        org.apache.commons.math.stat.Frequency frequency57 = new org.apache.commons.math.stat.Frequency(comparator56);
        double double59 = frequency57.getCumPct((long) 10);
        long long61 = frequency57.getCount((int) (byte) 10);
        double double63 = frequency57.getPct((long) '#');
        long long65 = frequency57.getCumFreq((long) 'a');
        long long67 = frequency57.getCount((java.lang.Object) (short) -1);
        long long69 = frequency57.getCount('4');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency57);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(iterator53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        java.util.Comparator comparator2 = null;
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency(comparator2);
        double double5 = frequency3.getCumPct((long) 10);
        long long7 = frequency3.getCount((java.lang.Object) 100.0f);
        double double9 = frequency3.getPct(1L);
        double double11 = frequency3.getCumPct((int) (short) -1);
        double double12 = frequency1.getCumPct((java.lang.Object) frequency3);
        double double14 = frequency1.getCumPct((int) (short) 100);
        java.lang.String str15 = frequency1.toString();
        java.lang.Object obj16 = null;
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue(obj16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str15, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        long long51 = frequency32.getCount('#');
        frequency1.addValue((java.lang.Object) '#');
        java.util.Iterator iterator53 = frequency1.valuesIterator();
        java.util.Comparator comparator54 = null;
        org.apache.commons.math.stat.Frequency frequency55 = new org.apache.commons.math.stat.Frequency(comparator54);
        double double57 = frequency55.getCumPct((long) 10);
        double double59 = frequency55.getPct('#');
        double double61 = frequency55.getCumPct((int) '#');
        java.lang.String str62 = frequency55.toString();
        long long64 = frequency55.getCumFreq((long) '4');
        double double65 = frequency1.getPct((java.lang.Object) frequency55);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(iterator53);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str62, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency1.getCumFreq(10);
        long long25 = frequency1.getSumFreq();
        frequency1.addValue((long) 'a');
        long long29 = frequency1.getCumFreq('#');
        java.util.Iterator iterator30 = frequency1.valuesIterator();
        java.lang.String str31 = frequency1.toString();
        long long33 = frequency1.getCount((long) (byte) 1);
        double double35 = frequency1.getCumPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n97\t1\t100%\t100%\n" + "'", str31, "Value \t Freq. \t Pct. \t Cum Pct. \n97\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        org.apache.commons.math.stat.Frequency frequency2 = new org.apache.commons.math.stat.Frequency();
        long long3 = frequency2.getSumFreq();
        double double4 = frequency1.getCumPct((java.lang.Object) frequency2);
        frequency1.addValue('a');
        java.util.Comparator comparator7 = null;
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency(comparator7);
        double double10 = frequency8.getCumPct((long) 10);
        long long12 = frequency8.getCumFreq((java.lang.Object) 1.0d);
        long long14 = frequency8.getCumFreq((long) 'a');
        double double16 = frequency8.getPct((java.lang.Object) (byte) 100);
        double double17 = frequency1.getPct((java.lang.Object) frequency8);
        double double19 = frequency1.getPct('4');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        double double11 = frequency1.getPct((-1L));
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        frequency13.addValue((java.lang.Integer) 1);
        frequency1.addValue((java.lang.Object) 1);
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        long long24 = frequency20.getCount((java.lang.Object) 100.0f);
        frequency20.addValue((java.lang.Integer) (-1));
        frequency20.addValue((java.lang.Integer) 10);
        frequency20.addValue(0L);
        frequency1.addValue((java.lang.Object) 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator4 = null;
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency(comparator4);
        double double7 = frequency5.getCumPct((long) 10);
        double double9 = frequency5.getPct('#');
        double double11 = frequency5.getCumPct((int) '#');
        frequency5.addValue(1);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        double double19 = frequency15.getPct('#');
        double double21 = frequency15.getCumPct((int) '#');
        long long22 = frequency5.getCumFreq((java.lang.Object) double21);
        java.lang.Class<?> wildcardClass23 = frequency5.getClass();
        double double24 = frequency1.getPct((java.lang.Object) wildcardClass23);
        long long25 = frequency1.getSumFreq();
        long long27 = frequency1.getCount('a');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        double double11 = frequency1.getCumPct((long) '4');
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        long long19 = frequency15.getCount((java.lang.Object) 100.0f);
        double double21 = frequency15.getPct(1L);
        double double23 = frequency15.getCumPct((int) (short) -1);
        double double24 = frequency13.getCumPct((java.lang.Object) frequency15);
        double double26 = frequency13.getCumPct(10);
        long long28 = frequency13.getCumFreq((long) (byte) 0);
        long long29 = frequency1.getCount((java.lang.Object) (byte) 0);
        java.util.Iterator iterator30 = frequency1.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(iterator30);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getCumPct((java.lang.Object) false);
        long long9 = frequency1.getCount('4');
        frequency1.addValue((java.lang.Integer) 100);
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCumFreq((java.lang.Object) 1.0d);
        double double19 = frequency13.getCumPct('4');
        java.lang.String str20 = frequency13.toString();
        long long21 = frequency1.getCumFreq((java.lang.Object) str20);
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCumFreq((java.lang.Object) 1.0d);
        double double29 = frequency23.getCumPct((int) '4');
        frequency23.addValue('4');
        double double33 = frequency23.getPct((java.lang.Object) 100.0d);
        double double34 = frequency1.getPct((java.lang.Object) frequency23);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq(2L);
        frequency1.clear();
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        long long19 = frequency15.getCount((java.lang.Object) 100.0f);
        double double21 = frequency15.getPct(1L);
        frequency15.clear();
        frequency15.addValue((long) (byte) 0);
        long long25 = frequency1.getCumFreq((java.lang.Object) (byte) 0);
        long long27 = frequency1.getCount((int) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getCumPct((-1));
        frequency1.addValue((int) (short) -1);
        double double11 = frequency1.getPct((long) 'a');
        java.util.Iterator iterator12 = frequency1.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        double double11 = frequency1.getPct((-1L));
        long long13 = frequency1.getCount((long) '4');
        long long15 = frequency1.getCumFreq(1L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator4 = null;
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency(comparator4);
        double double7 = frequency5.getCumPct((long) 10);
        double double9 = frequency5.getPct('#');
        double double11 = frequency5.getCumPct((int) '#');
        frequency5.addValue(1);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        double double19 = frequency15.getPct('#');
        double double21 = frequency15.getCumPct((int) '#');
        long long22 = frequency5.getCumFreq((java.lang.Object) double21);
        java.lang.Class<?> wildcardClass23 = frequency5.getClass();
        double double24 = frequency1.getPct((java.lang.Object) wildcardClass23);
        frequency1.addValue((int) (byte) 0);
        long long28 = frequency1.getCumFreq((int) 'a');
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        long long32 = frequency30.getCount('#');
        java.util.Iterator iterator33 = frequency30.valuesIterator();
        java.util.Comparator comparator34 = null;
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency(comparator34);
        double double37 = frequency35.getCumPct((long) 10);
        long long39 = frequency35.getCumFreq((java.lang.Object) 1.0d);
        double double41 = frequency35.getCumPct((int) '4');
        long long42 = frequency35.getSumFreq();
        long long44 = frequency35.getCount((long) (-1));
        long long46 = frequency35.getCount('4');
        long long48 = frequency35.getCount(1);
        double double50 = frequency35.getCumPct((java.lang.Object) (short) 10);
        double double51 = frequency30.getCumPct((java.lang.Object) frequency35);
        long long53 = frequency30.getCumFreq((-1));
        double double55 = frequency30.getPct((int) '4');
        double double57 = frequency30.getPct((int) (short) 0);
        long long58 = frequency30.getSumFreq();
        double double59 = frequency1.getPct((java.lang.Object) long58);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(iterator33);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        double double9 = frequency1.getPct((java.lang.Object) (byte) 100);
        double double11 = frequency1.getCumPct((long) (-1));
        frequency1.addValue((long) (short) 0);
        long long14 = frequency1.getSumFreq();
        long long15 = frequency1.getSumFreq();
        double double17 = frequency1.getCumPct(3L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long23 = frequency19.getSumFreq();
        double double25 = frequency19.getPct((java.lang.Object) "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        frequency19.addValue((java.lang.Integer) (-1));
        long long28 = frequency19.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        long long14 = frequency1.getCount('4');
        long long15 = frequency1.getSumFreq();
        java.lang.String str16 = frequency1.toString();
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        double double22 = frequency18.getPct('#');
        double double24 = frequency18.getCumPct((int) '#');
        frequency18.addValue(1);
        java.util.Comparator comparator27 = null;
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency(comparator27);
        double double30 = frequency28.getCumPct((long) 10);
        double double32 = frequency28.getPct('#');
        double double34 = frequency28.getCumPct((int) '#');
        long long35 = frequency18.getCumFreq((java.lang.Object) double34);
        double double37 = frequency18.getCumPct((long) (short) 0);
        java.util.Comparator comparator38 = null;
        org.apache.commons.math.stat.Frequency frequency39 = new org.apache.commons.math.stat.Frequency(comparator38);
        double double41 = frequency39.getCumPct((long) 10);
        long long43 = frequency39.getCount((java.lang.Object) 100.0f);
        frequency39.addValue((java.lang.Integer) (-1));
        frequency39.addValue((java.lang.Integer) 10);
        long long49 = frequency39.getCumFreq((int) 'a');
        java.util.Comparator comparator50 = null;
        org.apache.commons.math.stat.Frequency frequency51 = new org.apache.commons.math.stat.Frequency(comparator50);
        double double53 = frequency51.getCumPct((long) 10);
        long long55 = frequency51.getCount((java.lang.Object) 100.0f);
        frequency51.addValue((java.lang.Integer) (-1));
        frequency39.addValue((java.lang.Object) (-1));
        long long59 = frequency18.getCount((java.lang.Object) frequency39);
        long long61 = frequency39.getCumFreq(' ');
        double double62 = frequency1.getPct((java.lang.Object) frequency39);
        double double64 = frequency39.getPct((int) (short) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 2L + "'", long49 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.3333333333333333d + "'", double64 == 0.3333333333333333d);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        long long10 = frequency1.getCumFreq((java.lang.Object) 100L);
        double double12 = frequency1.getPct('4');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long14 = frequency13.getSumFreq();
        long long16 = frequency13.getCumFreq((long) 1);
        double double17 = frequency1.getCumPct((java.lang.Object) frequency13);
        frequency1.addValue((-1));
        long long21 = frequency1.getCount(0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCount(0L);
        double double11 = frequency1.getPct((int) (short) 100);
        double double13 = frequency1.getPct((int) '4');
        double double15 = frequency1.getCumPct((long) (short) -1);
        frequency1.addValue((java.lang.Integer) 10);
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        double double21 = frequency19.getCumPct((long) 10);
        long long23 = frequency19.getCount((java.lang.Object) 100.0f);
        frequency19.addValue((java.lang.Integer) (-1));
        frequency19.addValue((java.lang.Integer) 10);
        frequency19.addValue((int) (byte) 1);
        long long30 = frequency1.getCumFreq((java.lang.Object) frequency19);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        java.util.Comparator comparator37 = null;
        org.apache.commons.math.stat.Frequency frequency38 = new org.apache.commons.math.stat.Frequency(comparator37);
        double double40 = frequency38.getCumPct((long) 10);
        long long42 = frequency38.getCumFreq((java.lang.Object) 1.0d);
        double double44 = frequency38.getCumPct((int) '4');
        long long45 = frequency38.getSumFreq();
        double double46 = frequency32.getCumPct((java.lang.Object) long45);
        double double48 = frequency32.getCumPct('#');
        java.util.Comparator comparator49 = null;
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency(comparator49);
        long long52 = frequency50.getCumFreq((java.lang.Object) (short) 10);
        double double53 = frequency32.getPct((java.lang.Object) frequency50);
        long long55 = frequency50.getCount(0);
        frequency50.addValue((long) ' ');
        double double59 = frequency50.getCumPct(0);
        long long61 = frequency50.getCount((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) 'a');
        double double13 = frequency1.getPct('#');
        java.lang.String str14 = frequency1.toString();
        double double16 = frequency1.getPct((int) (byte) 100);
        double double18 = frequency1.getCumPct((long) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n10\t1\t50%\t100%\n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t50%\t50%\n10\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        java.util.Comparator comparator1 = null;
        org.apache.commons.math.stat.Frequency frequency2 = new org.apache.commons.math.stat.Frequency(comparator1);
        double double4 = frequency2.getCumPct((long) 10);
        long long6 = frequency2.getCumFreq((java.lang.Object) 1.0d);
        double double8 = frequency2.getCumPct((int) '4');
        long long9 = frequency2.getSumFreq();
        long long11 = frequency2.getCount((long) (-1));
        long long13 = frequency2.getCount('4');
        long long15 = frequency2.getCount(1);
        double double16 = frequency0.getPct((java.lang.Object) 1);
        java.lang.Object obj17 = null;
        double double18 = frequency0.getCumPct(obj17);
        double double20 = frequency0.getCumPct((long) (short) 100);
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        long long26 = frequency22.getCount((int) (byte) 10);
        double double28 = frequency22.getCumPct((-1));
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        double double34 = frequency30.getPct('#');
        java.util.Comparator comparator35 = null;
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency(comparator35);
        double double38 = frequency36.getCumPct((long) 10);
        long long40 = frequency36.getCumFreq((java.lang.Object) 1.0d);
        double double42 = frequency36.getCumPct((int) '4');
        long long43 = frequency36.getSumFreq();
        double double44 = frequency30.getCumPct((java.lang.Object) long43);
        double double46 = frequency30.getCumPct('#');
        java.util.Comparator comparator47 = null;
        org.apache.commons.math.stat.Frequency frequency48 = new org.apache.commons.math.stat.Frequency(comparator47);
        long long50 = frequency48.getCumFreq((java.lang.Object) (short) 10);
        double double51 = frequency30.getPct((java.lang.Object) frequency48);
        long long53 = frequency48.getCumFreq((int) (byte) 10);
        frequency48.addValue((long) ' ');
        long long57 = frequency48.getCumFreq(' ');
        double double58 = frequency22.getCumPct((java.lang.Object) frequency48);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency22);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        java.util.Comparator comparator23 = null;
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency(comparator23);
        double double26 = frequency24.getCumPct((long) 10);
        long long28 = frequency24.getCumFreq((java.lang.Object) 1.0d);
        double double30 = frequency24.getCumPct((int) '4');
        long long32 = frequency24.getCumFreq((int) (byte) 10);
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        double double36 = frequency34.getCumPct((long) 10);
        long long38 = frequency34.getCount((java.lang.Object) 100.0f);
        frequency34.addValue((java.lang.Integer) (-1));
        frequency34.addValue((java.lang.Integer) 10);
        double double44 = frequency34.getCumPct((long) '4');
        double double45 = frequency24.getCumPct((java.lang.Object) '4');
        frequency19.addValue((java.lang.Object) '4');
        java.util.Comparator comparator47 = null;
        org.apache.commons.math.stat.Frequency frequency48 = new org.apache.commons.math.stat.Frequency(comparator47);
        double double50 = frequency48.getCumPct((long) 10);
        long long52 = frequency48.getCount((java.lang.Object) 100.0f);
        frequency48.addValue((java.lang.Integer) (-1));
        double double55 = frequency19.getCumPct((java.lang.Object) frequency48);
        long long57 = frequency19.getCount((long) (byte) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq((long) 0);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        double double18 = frequency14.getPct('#');
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        long long24 = frequency20.getCumFreq((java.lang.Object) 1.0d);
        double double26 = frequency20.getCumPct((int) '4');
        long long27 = frequency20.getSumFreq();
        double double28 = frequency14.getCumPct((java.lang.Object) long27);
        double double30 = frequency14.getCumPct('#');
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        long long34 = frequency32.getCumFreq((java.lang.Object) (short) 10);
        double double35 = frequency14.getPct((java.lang.Object) frequency32);
        long long37 = frequency32.getCount(0);
        frequency32.addValue((long) ' ');
        double double41 = frequency32.getCumPct(0);
        java.util.Comparator comparator42 = null;
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency(comparator42);
        double double45 = frequency43.getCumPct((long) 10);
        long long47 = frequency43.getCount((java.lang.Object) 100.0f);
        double double49 = frequency43.getPct(1L);
        long long51 = frequency43.getCumFreq((long) 0);
        double double53 = frequency43.getPct('a');
        double double55 = frequency43.getPct(1);
        double double57 = frequency43.getCumPct((long) (byte) 0);
        long long58 = frequency32.getCumFreq((java.lang.Object) frequency43);
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        double double64 = frequency60.getPct('#');
        frequency60.addValue((int) '4');
        java.util.Comparator comparator67 = null;
        org.apache.commons.math.stat.Frequency frequency68 = new org.apache.commons.math.stat.Frequency(comparator67);
        double double70 = frequency68.getCumPct((long) 10);
        long long72 = frequency68.getCumFreq((java.lang.Object) 1.0d);
        long long74 = frequency68.getCumFreq((long) 'a');
        double double76 = frequency68.getPct((java.lang.Object) (byte) 100);
        long long77 = frequency60.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str78 = frequency60.toString();
        long long80 = frequency60.getCumFreq((int) (short) 0);
        frequency60.addValue((int) '#');
        frequency43.addValue((java.lang.Object) '#');
        frequency1.addValue((java.lang.Object) '#');
        org.apache.commons.math.stat.Frequency frequency85 = new org.apache.commons.math.stat.Frequency();
        long long86 = frequency85.getSumFreq();
        long long88 = frequency85.getCumFreq((long) 1);
        long long90 = frequency85.getCount((int) (byte) -1);
        double double92 = frequency85.getCumPct('a');
        double double93 = frequency1.getCumPct((java.lang.Object) frequency85);
        long long95 = frequency1.getCumFreq(1);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str78, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long23 = frequency19.getSumFreq();
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        long long29 = frequency25.getCumFreq((java.lang.Object) 1.0d);
        double double31 = frequency25.getCumPct((int) '4');
        long long32 = frequency25.getSumFreq();
        double double34 = frequency25.getPct('a');
        frequency25.addValue(0L);
        double double37 = frequency19.getPct((java.lang.Object) frequency25);
        frequency19.addValue(' ');
        long long41 = frequency19.getCount('#');
        long long43 = frequency19.getCount('a');
        long long45 = frequency19.getCount((long) 0);
        // The following exception was thrown during execution in test generation
        try {
            frequency19.addValue(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        frequency1.addValue('4');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        long long8 = frequency1.getCumFreq('4');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        frequency10.clear();
        long long19 = frequency10.getCumFreq((long) (byte) 1);
        long long21 = frequency10.getCumFreq((long) 0);
        long long23 = frequency10.getCount((long) (byte) 1);
        frequency10.addValue('#');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.lang.String str8 = frequency1.toString();
        java.lang.Class<?> wildcardClass9 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) 'a');
        frequency1.clear();
        double double14 = frequency1.getCumPct('a');
        frequency1.clear();
        long long16 = frequency1.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) (byte) 10);
        double double13 = frequency1.getCumPct('a');
        double double15 = frequency1.getPct(0L);
        double double17 = frequency1.getPct((int) '4');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        double double21 = frequency19.getCumPct((long) 10);
        long long23 = frequency19.getCount((java.lang.Object) 100.0f);
        frequency19.addValue((java.lang.Integer) (-1));
        frequency19.addValue((java.lang.Integer) 10);
        frequency19.addValue((int) (byte) 1);
        double double30 = frequency1.getCumPct((java.lang.Object) (byte) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long23 = frequency19.getSumFreq();
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        long long29 = frequency25.getCumFreq((java.lang.Object) 1.0d);
        double double31 = frequency25.getCumPct((int) '4');
        long long32 = frequency25.getSumFreq();
        double double34 = frequency25.getPct('a');
        frequency25.addValue(0L);
        double double37 = frequency19.getPct((java.lang.Object) frequency25);
        long long38 = frequency19.getSumFreq();
        java.util.Comparator comparator39 = null;
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency(comparator39);
        double double42 = frequency40.getCumPct((long) 10);
        double double44 = frequency40.getPct('#');
        java.util.Comparator comparator45 = null;
        org.apache.commons.math.stat.Frequency frequency46 = new org.apache.commons.math.stat.Frequency(comparator45);
        double double48 = frequency46.getCumPct((long) 10);
        long long50 = frequency46.getCumFreq((java.lang.Object) 1.0d);
        double double52 = frequency46.getCumPct((int) '4');
        long long53 = frequency46.getSumFreq();
        double double54 = frequency40.getCumPct((java.lang.Object) long53);
        double double56 = frequency40.getCumPct('#');
        java.util.Comparator comparator57 = null;
        org.apache.commons.math.stat.Frequency frequency58 = new org.apache.commons.math.stat.Frequency(comparator57);
        long long60 = frequency58.getCumFreq((java.lang.Object) (short) 10);
        double double61 = frequency40.getPct((java.lang.Object) frequency58);
        java.util.Comparator comparator62 = null;
        org.apache.commons.math.stat.Frequency frequency63 = new org.apache.commons.math.stat.Frequency(comparator62);
        double double65 = frequency63.getCumPct((long) 10);
        long long67 = frequency63.getCumFreq((java.lang.Object) 1.0d);
        double double69 = frequency63.getCumPct((int) '4');
        long long71 = frequency63.getCumFreq((int) (byte) 10);
        java.util.Comparator comparator72 = null;
        org.apache.commons.math.stat.Frequency frequency73 = new org.apache.commons.math.stat.Frequency(comparator72);
        double double75 = frequency73.getCumPct((long) 10);
        long long77 = frequency73.getCount((java.lang.Object) 100.0f);
        frequency73.addValue((java.lang.Integer) (-1));
        frequency73.addValue((java.lang.Integer) 10);
        double double83 = frequency73.getCumPct((long) '4');
        double double84 = frequency63.getCumPct((java.lang.Object) '4');
        frequency58.addValue((java.lang.Object) '4');
        java.util.Comparator comparator86 = null;
        org.apache.commons.math.stat.Frequency frequency87 = new org.apache.commons.math.stat.Frequency(comparator86);
        double double89 = frequency87.getCumPct((long) 10);
        long long91 = frequency87.getCount((java.lang.Object) 100.0f);
        frequency87.addValue((java.lang.Integer) (-1));
        double double94 = frequency58.getCumPct((java.lang.Object) frequency87);
        double double95 = frequency19.getPct((java.lang.Object) frequency87);
        double double97 = frequency87.getPct(' ');
        long long99 = frequency87.getCumFreq((int) (byte) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 1L + "'", long99 == 1L);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCount((int) (byte) 0);
        long long11 = frequency1.getCount((long) (byte) -1);
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        double double17 = frequency13.getPct('#');
        double double19 = frequency13.getCumPct((int) '#');
        frequency13.addValue(1);
        double double23 = frequency13.getPct((-1L));
        frequency13.addValue((int) '#');
        frequency1.addValue((java.lang.Object) '#');
        long long28 = frequency1.getCount((long) (byte) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) 'a');
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCount((java.lang.Object) 100.0f);
        frequency13.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Object) (-1));
        frequency1.addValue((java.lang.Integer) 1);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        frequency1.addValue((long) (byte) 0);
        long long11 = frequency1.getSumFreq();
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCumFreq((java.lang.Object) 1.0d);
        double double19 = frequency13.getCumPct((int) '4');
        long long20 = frequency13.getSumFreq();
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        double double26 = frequency22.getPct('#');
        double double28 = frequency22.getCumPct((int) '#');
        frequency22.addValue(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        long long39 = frequency22.getCumFreq((java.lang.Object) double38);
        double double41 = frequency22.getCumPct((long) (short) 0);
        java.util.Comparator comparator42 = null;
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency(comparator42);
        double double45 = frequency43.getCumPct((long) 10);
        long long47 = frequency43.getCount((java.lang.Object) 100.0f);
        frequency43.addValue((java.lang.Integer) (-1));
        frequency43.addValue((java.lang.Integer) 10);
        long long53 = frequency43.getCumFreq((int) 'a');
        java.util.Comparator comparator54 = null;
        org.apache.commons.math.stat.Frequency frequency55 = new org.apache.commons.math.stat.Frequency(comparator54);
        double double57 = frequency55.getCumPct((long) 10);
        long long59 = frequency55.getCount((java.lang.Object) 100.0f);
        frequency55.addValue((java.lang.Integer) (-1));
        frequency43.addValue((java.lang.Object) (-1));
        long long63 = frequency22.getCount((java.lang.Object) frequency43);
        long long65 = frequency43.getCumFreq('a');
        double double66 = frequency13.getPct((java.lang.Object) 'a');
        double double67 = frequency1.getCumPct((java.lang.Object) frequency13);
        long long68 = frequency1.getSumFreq();
        frequency1.clear();
        double double71 = frequency1.getPct(10L);
        double double73 = frequency1.getCumPct((long) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2L + "'", long53 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        long long7 = frequency1.getCumFreq(' ');
        double double9 = frequency1.getPct(2L);
        long long11 = frequency1.getCount(0);
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCumFreq((java.lang.Object) 1.0d);
        double double19 = frequency13.getCumPct((int) '4');
        long long20 = frequency13.getSumFreq();
        long long22 = frequency13.getCount((long) (-1));
        long long24 = frequency13.getCount('4');
        long long26 = frequency13.getCount(1);
        double double28 = frequency13.getCumPct((java.lang.Object) (short) 10);
        double double30 = frequency13.getCumPct((int) ' ');
        long long31 = frequency1.getCount((java.lang.Object) frequency13);
        java.util.Iterator iterator32 = frequency1.valuesIterator();
        long long34 = frequency1.getCumFreq((long) (byte) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(iterator32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        java.util.Comparator comparator1 = null;
        org.apache.commons.math.stat.Frequency frequency2 = new org.apache.commons.math.stat.Frequency(comparator1);
        double double4 = frequency2.getCumPct((long) 10);
        long long6 = frequency2.getCumFreq((java.lang.Object) 1.0d);
        double double8 = frequency2.getCumPct((int) '4');
        long long9 = frequency2.getSumFreq();
        long long11 = frequency2.getCount((long) (-1));
        long long13 = frequency2.getCount('4');
        long long15 = frequency2.getCount(1);
        double double16 = frequency0.getPct((java.lang.Object) 1);
        java.lang.Object obj17 = null;
        double double18 = frequency0.getCumPct(obj17);
        frequency0.addValue((-1));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getCumPct((-1));
        double double9 = frequency1.getPct('4');
        long long11 = frequency1.getCumFreq((int) (short) 100);
        frequency1.addValue('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        frequency1.addValue((int) (byte) 1);
        long long13 = frequency1.getCumFreq((long) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3L + "'", long13 == 3L);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) (byte) 10);
        long long13 = frequency1.getCumFreq('#');
        double double15 = frequency1.getCumPct((long) 1);
        double double17 = frequency1.getPct((long) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.5d + "'", double15 == 0.5d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        double double24 = frequency19.getCumPct((java.lang.Object) (short) 100);
        long long26 = frequency19.getCumFreq((long) (byte) 0);
        java.util.Comparator comparator27 = null;
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency(comparator27);
        double double30 = frequency28.getCumPct((long) 10);
        long long32 = frequency28.getCount((java.lang.Object) 100.0f);
        double double34 = frequency28.getPct(1L);
        long long35 = frequency19.getCumFreq((java.lang.Object) frequency28);
        double double37 = frequency19.getCumPct((int) (short) -1);
        java.lang.Class<?> wildcardClass38 = frequency19.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.lang.Class<?> wildcardClass81 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((long) (short) 10);
        long long11 = frequency1.getCumFreq((int) (byte) 10);
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        frequency13.addValue((int) '4');
        java.lang.String str16 = frequency13.toString();
        long long17 = frequency13.getSumFreq();
        frequency13.addValue((long) (-1));
        java.util.Iterator iterator20 = frequency13.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) iterator20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(iterator20);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        long long22 = frequency1.getCount((-1));
        double double24 = frequency1.getCumPct((long) ' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        java.util.Iterator iterator4 = frequency1.valuesIterator();
        java.util.Comparator comparator5 = null;
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency(comparator5);
        double double8 = frequency6.getCumPct((long) 10);
        long long10 = frequency6.getCumFreq((java.lang.Object) 1.0d);
        double double12 = frequency6.getCumPct((int) '4');
        long long13 = frequency6.getSumFreq();
        long long15 = frequency6.getCount((long) (-1));
        long long17 = frequency6.getCount('4');
        long long19 = frequency6.getCount(1);
        double double21 = frequency6.getCumPct((java.lang.Object) (short) 10);
        double double22 = frequency1.getCumPct((java.lang.Object) frequency6);
        frequency6.addValue((long) 100);
        java.lang.String str25 = frequency6.toString();
        double double27 = frequency6.getCumPct((-1));
        frequency6.clear();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n" + "'", str25, "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        frequency1.addValue((int) '4');
        java.lang.String str4 = frequency1.toString();
        java.lang.Class<?> wildcardClass5 = frequency1.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str4, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getCumPct((long) (-1));
        frequency1.addValue(0);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        frequency11.addValue(1);
        java.util.Comparator comparator20 = null;
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency(comparator20);
        double double23 = frequency21.getCumPct((long) 10);
        double double25 = frequency21.getPct('#');
        double double27 = frequency21.getCumPct((int) '#');
        long long28 = frequency11.getCumFreq((java.lang.Object) double27);
        double double30 = frequency11.getCumPct((long) (short) 0);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        long long34 = frequency32.getCount('#');
        java.util.Iterator iterator35 = frequency32.valuesIterator();
        java.util.Comparator comparator36 = null;
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency(comparator36);
        double double39 = frequency37.getCumPct((long) 10);
        long long41 = frequency37.getCumFreq((java.lang.Object) 1.0d);
        double double43 = frequency37.getCumPct((int) '4');
        long long44 = frequency37.getSumFreq();
        long long46 = frequency37.getCount((long) (-1));
        long long48 = frequency37.getCount('4');
        long long50 = frequency37.getCount(1);
        double double52 = frequency37.getCumPct((java.lang.Object) (short) 10);
        double double53 = frequency32.getCumPct((java.lang.Object) frequency37);
        long long54 = frequency11.getCumFreq((java.lang.Object) frequency37);
        double double55 = frequency1.getPct((java.lang.Object) frequency11);
        double double57 = frequency11.getPct(3L);
        frequency11.addValue((java.lang.Integer) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(iterator35);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        frequency0.addValue((long) (short) 100);
        java.util.Comparator comparator3 = null;
        org.apache.commons.math.stat.Frequency frequency4 = new org.apache.commons.math.stat.Frequency(comparator3);
        double double6 = frequency4.getCumPct((long) 10);
        long long8 = frequency4.getCount((java.lang.Object) 100.0f);
        double double10 = frequency4.getPct(1L);
        long long12 = frequency4.getCumFreq((long) 0);
        double double14 = frequency4.getPct('a');
        double double16 = frequency4.getPct(1);
        double double18 = frequency4.getCumPct((long) (byte) 0);
        long long19 = frequency0.getCumFreq((java.lang.Object) double18);
        java.util.Comparator comparator20 = null;
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency(comparator20);
        double double23 = frequency21.getCumPct((long) 10);
        double double25 = frequency21.getPct('#');
        double double27 = frequency21.getCumPct((int) '#');
        java.lang.String str28 = frequency21.toString();
        long long30 = frequency21.getCumFreq((long) '4');
        java.lang.String str31 = frequency21.toString();
        java.lang.String str32 = frequency21.toString();
        long long34 = frequency21.getCount('4');
        long long35 = frequency21.getSumFreq();
        java.lang.String str36 = frequency21.toString();
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) frequency21);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str28, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str31, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str32, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str36, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        frequency1.addValue((long) 100);
        java.util.Iterator iterator10 = frequency1.valuesIterator();
        double double12 = frequency1.getCumPct((long) 'a');
        double double14 = frequency1.getCumPct((int) (byte) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        double double11 = frequency1.getPct('a');
        double double13 = frequency1.getPct(1);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        double double19 = frequency15.getPct('#');
        double double21 = frequency15.getCumPct((int) '#');
        frequency15.addValue(1);
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        double double29 = frequency25.getPct('#');
        double double31 = frequency25.getCumPct((int) '#');
        long long32 = frequency15.getCumFreq((java.lang.Object) double31);
        double double34 = frequency15.getCumPct((long) (short) 0);
        long long35 = frequency1.getCumFreq((java.lang.Object) double34);
        java.util.Comparator comparator36 = null;
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency(comparator36);
        double double39 = frequency37.getCumPct((long) 10);
        double double41 = frequency37.getPct('#');
        java.util.Comparator comparator42 = null;
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency(comparator42);
        double double45 = frequency43.getCumPct((long) 10);
        long long47 = frequency43.getCumFreq((java.lang.Object) 1.0d);
        double double49 = frequency43.getCumPct((int) '4');
        long long50 = frequency43.getSumFreq();
        double double51 = frequency37.getCumPct((java.lang.Object) long50);
        double double53 = frequency37.getCumPct('#');
        java.util.Comparator comparator54 = null;
        org.apache.commons.math.stat.Frequency frequency55 = new org.apache.commons.math.stat.Frequency(comparator54);
        long long57 = frequency55.getCumFreq((java.lang.Object) (short) 10);
        double double58 = frequency37.getPct((java.lang.Object) frequency55);
        long long60 = frequency37.getCumFreq(10);
        long long61 = frequency37.getSumFreq();
        double double62 = frequency1.getCumPct((java.lang.Object) long61);
        double double64 = frequency1.getPct('4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        long long26 = frequency22.getCount((java.lang.Object) 100.0f);
        frequency22.addValue((java.lang.Integer) (-1));
        frequency22.addValue((java.lang.Integer) 10);
        long long32 = frequency22.getCumFreq((int) 'a');
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        double double36 = frequency34.getCumPct((long) 10);
        long long38 = frequency34.getCount((java.lang.Object) 100.0f);
        frequency34.addValue((java.lang.Integer) (-1));
        frequency22.addValue((java.lang.Object) (-1));
        long long42 = frequency1.getCount((java.lang.Object) frequency22);
        java.util.Comparator comparator43 = null;
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency(comparator43);
        double double46 = frequency44.getCumPct((long) 10);
        double double48 = frequency44.getPct('#');
        java.util.Comparator comparator49 = null;
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency(comparator49);
        double double52 = frequency50.getCumPct((long) 10);
        long long54 = frequency50.getCumFreq((java.lang.Object) 1.0d);
        double double56 = frequency50.getCumPct((int) '4');
        long long57 = frequency50.getSumFreq();
        double double58 = frequency44.getCumPct((java.lang.Object) long57);
        double double60 = frequency44.getCumPct('#');
        java.util.Comparator comparator61 = null;
        org.apache.commons.math.stat.Frequency frequency62 = new org.apache.commons.math.stat.Frequency(comparator61);
        long long64 = frequency62.getCumFreq((java.lang.Object) (short) 10);
        double double65 = frequency44.getPct((java.lang.Object) frequency62);
        long long67 = frequency62.getCount(0);
        double double69 = frequency62.getCumPct(1);
        double double71 = frequency62.getPct('a');
        double double73 = frequency62.getPct(' ');
        java.util.Comparator comparator74 = null;
        org.apache.commons.math.stat.Frequency frequency75 = new org.apache.commons.math.stat.Frequency(comparator74);
        double double77 = frequency75.getCumPct((long) 10);
        long long79 = frequency75.getCount((java.lang.Object) 100.0f);
        double double81 = frequency75.getPct(1L);
        frequency75.clear();
        long long84 = frequency75.getCumFreq((long) (byte) 1);
        double double86 = frequency75.getPct((long) '#');
        long long87 = frequency62.getCumFreq((java.lang.Object) frequency75);
        double double89 = frequency75.getPct((long) 'a');
        long long90 = frequency22.getCumFreq((java.lang.Object) frequency75);
        double double92 = frequency75.getCumPct(0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long9 = frequency1.getCumFreq((int) (byte) 10);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        long long15 = frequency11.getCount((java.lang.Object) 100.0f);
        frequency11.addValue((java.lang.Integer) (-1));
        frequency11.addValue((java.lang.Integer) 10);
        double double21 = frequency11.getCumPct((long) '4');
        double double22 = frequency1.getCumPct((java.lang.Object) '4');
        long long24 = frequency1.getCount('a');
        java.util.Comparator comparator25 = null;
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency(comparator25);
        java.util.Comparator comparator27 = null;
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency(comparator27);
        double double30 = frequency28.getCumPct((long) 10);
        long long32 = frequency28.getCount((java.lang.Object) 100.0f);
        double double34 = frequency28.getPct(1L);
        double double36 = frequency28.getCumPct((int) (short) -1);
        double double37 = frequency26.getCumPct((java.lang.Object) frequency28);
        frequency28.addValue((int) (short) 10);
        java.util.Comparator comparator40 = null;
        org.apache.commons.math.stat.Frequency frequency41 = new org.apache.commons.math.stat.Frequency(comparator40);
        double double43 = frequency41.getCumPct((long) 10);
        long long45 = frequency41.getCumFreq((java.lang.Object) 1.0d);
        double double47 = frequency41.getCumPct((int) '4');
        long long48 = frequency41.getSumFreq();
        long long50 = frequency41.getCount((long) (-1));
        frequency41.addValue(1);
        long long53 = frequency41.getSumFreq();
        frequency41.addValue((java.lang.Integer) 1);
        double double56 = frequency28.getPct((java.lang.Object) frequency41);
        long long57 = frequency1.getCount((java.lang.Object) double56);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        frequency1.addValue((int) '4');
        java.lang.String str4 = frequency1.toString();
        long long5 = frequency1.getSumFreq();
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        double double11 = frequency7.getPct('#');
        frequency7.addValue((int) '4');
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        long long19 = frequency15.getCumFreq((java.lang.Object) 1.0d);
        long long21 = frequency15.getCumFreq((long) 'a');
        double double23 = frequency15.getPct((java.lang.Object) (byte) 100);
        long long24 = frequency7.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str25 = frequency7.toString();
        long long27 = frequency7.getCumFreq((int) (short) 0);
        frequency7.addValue((int) '#');
        double double30 = frequency1.getCumPct((java.lang.Object) '#');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str4, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str25, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq((long) 0);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        double double18 = frequency14.getPct('#');
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        long long24 = frequency20.getCumFreq((java.lang.Object) 1.0d);
        double double26 = frequency20.getCumPct((int) '4');
        long long27 = frequency20.getSumFreq();
        double double28 = frequency14.getCumPct((java.lang.Object) long27);
        double double30 = frequency14.getCumPct('#');
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        long long34 = frequency32.getCumFreq((java.lang.Object) (short) 10);
        double double35 = frequency14.getPct((java.lang.Object) frequency32);
        long long37 = frequency32.getCount(0);
        frequency32.addValue((long) ' ');
        double double41 = frequency32.getCumPct(0);
        java.util.Comparator comparator42 = null;
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency(comparator42);
        double double45 = frequency43.getCumPct((long) 10);
        long long47 = frequency43.getCount((java.lang.Object) 100.0f);
        double double49 = frequency43.getPct(1L);
        long long51 = frequency43.getCumFreq((long) 0);
        double double53 = frequency43.getPct('a');
        double double55 = frequency43.getPct(1);
        double double57 = frequency43.getCumPct((long) (byte) 0);
        long long58 = frequency32.getCumFreq((java.lang.Object) frequency43);
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        double double64 = frequency60.getPct('#');
        frequency60.addValue((int) '4');
        java.util.Comparator comparator67 = null;
        org.apache.commons.math.stat.Frequency frequency68 = new org.apache.commons.math.stat.Frequency(comparator67);
        double double70 = frequency68.getCumPct((long) 10);
        long long72 = frequency68.getCumFreq((java.lang.Object) 1.0d);
        long long74 = frequency68.getCumFreq((long) 'a');
        double double76 = frequency68.getPct((java.lang.Object) (byte) 100);
        long long77 = frequency60.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str78 = frequency60.toString();
        long long80 = frequency60.getCumFreq((int) (short) 0);
        frequency60.addValue((int) '#');
        frequency43.addValue((java.lang.Object) '#');
        frequency1.addValue((java.lang.Object) '#');
        double double86 = frequency1.getCumPct('#');
        double double88 = frequency1.getPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str78, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCumFreq((java.lang.Object) 1.0d);
        long long16 = frequency10.getCumFreq((long) 'a');
        double double18 = frequency10.getPct((java.lang.Object) (byte) 100);
        long long20 = frequency10.getCumFreq((long) (short) 100);
        long long22 = frequency10.getCount((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) 'a');
        frequency1.clear();
        double double14 = frequency1.getCumPct('a');
        frequency1.clear();
        double double17 = frequency1.getPct((long) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCount(0L);
        java.lang.String str10 = frequency1.toString();
        long long12 = frequency1.getCumFreq((long) 1);
        frequency1.addValue((java.lang.Integer) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        long long51 = frequency32.getCount('#');
        frequency1.addValue((java.lang.Object) '#');
        java.util.Iterator iterator53 = frequency1.valuesIterator();
        java.util.Comparator comparator54 = null;
        org.apache.commons.math.stat.Frequency frequency55 = new org.apache.commons.math.stat.Frequency(comparator54);
        double double57 = frequency55.getCumPct((long) 10);
        double double59 = frequency55.getPct('#');
        double double61 = frequency55.getCumPct((int) '#');
        java.lang.String str62 = frequency55.toString();
        long long64 = frequency55.getCumFreq((long) '4');
        double double65 = frequency1.getPct((java.lang.Object) frequency55);
        long long67 = frequency55.getCount(100);
        double double69 = frequency55.getPct((int) (short) 1);
        long long71 = frequency55.getCount(100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(iterator53);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str62, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        long long7 = frequency1.getCumFreq(' ');
        double double9 = frequency1.getPct(2L);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        frequency11.addValue(1);
        java.util.Comparator comparator20 = null;
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency(comparator20);
        double double23 = frequency21.getCumPct((long) 10);
        double double25 = frequency21.getPct('#');
        double double27 = frequency21.getCumPct((int) '#');
        long long28 = frequency11.getCumFreq((java.lang.Object) double27);
        double double30 = frequency11.getCumPct((long) (short) 0);
        java.util.Iterator iterator31 = frequency11.valuesIterator();
        java.lang.String str32 = frequency11.toString();
        double double33 = frequency1.getPct((java.lang.Object) str32);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((int) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str32, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        long long51 = frequency32.getCount('#');
        frequency1.addValue((java.lang.Object) '#');
        java.util.Iterator iterator53 = frequency1.valuesIterator();
        double double55 = frequency1.getPct((int) '4');
        long long56 = frequency1.getSumFreq();
        long long58 = frequency1.getCumFreq((java.lang.Object) 0L);
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCount((java.lang.Object) 100.0f);
        frequency60.addValue((java.lang.Integer) (-1));
        frequency60.addValue((java.lang.Integer) 10);
        long long70 = frequency60.getCumFreq((int) 'a');
        frequency60.clear();
        double double73 = frequency60.getCumPct('a');
        double double75 = frequency60.getPct(' ');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency60);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(iterator53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 2L + "'", long70 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        double double9 = frequency1.getPct((java.lang.Object) (byte) 100);
        double double11 = frequency1.getCumPct((long) (-1));
        frequency1.addValue((long) (short) 0);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        long long19 = frequency15.getCount((java.lang.Object) 100.0f);
        double double21 = frequency15.getCumPct((java.lang.Object) false);
        long long23 = frequency15.getCount('4');
        frequency15.addValue((java.lang.Integer) 100);
        java.util.Comparator comparator26 = null;
        org.apache.commons.math.stat.Frequency frequency27 = new org.apache.commons.math.stat.Frequency(comparator26);
        double double29 = frequency27.getCumPct((long) 10);
        long long31 = frequency27.getCumFreq((java.lang.Object) 1.0d);
        double double33 = frequency27.getCumPct('4');
        java.lang.String str34 = frequency27.toString();
        long long35 = frequency15.getCumFreq((java.lang.Object) str34);
        java.util.Comparator comparator36 = null;
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency(comparator36);
        frequency37.addValue((int) '4');
        frequency37.addValue(0);
        long long42 = frequency15.getCount((java.lang.Object) frequency37);
        double double43 = frequency1.getPct((java.lang.Object) frequency37);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str34, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        double double11 = frequency1.getPct('a');
        double double13 = frequency1.getPct(1);
        double double15 = frequency1.getCumPct((long) (byte) 0);
        frequency1.addValue((java.lang.Integer) (-1));
        double double19 = frequency1.getPct((int) (byte) -1);
        frequency1.clear();
        double double22 = frequency1.getPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getCumPct((-1));
        double double9 = frequency1.getPct('a');
        double double11 = frequency1.getPct('4');
        long long13 = frequency1.getCount((long) (-1));
        double double15 = frequency1.getCumPct('#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        long long7 = frequency1.getCumFreq(' ');
        double double9 = frequency1.getPct(2L);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        frequency11.addValue(1);
        java.util.Comparator comparator20 = null;
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency(comparator20);
        double double23 = frequency21.getCumPct((long) 10);
        double double25 = frequency21.getPct('#');
        double double27 = frequency21.getCumPct((int) '#');
        long long28 = frequency11.getCumFreq((java.lang.Object) double27);
        double double30 = frequency11.getCumPct((long) (short) 0);
        java.util.Iterator iterator31 = frequency11.valuesIterator();
        java.lang.String str32 = frequency11.toString();
        double double33 = frequency1.getPct((java.lang.Object) str32);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str32, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getPct((long) '#');
        long long9 = frequency1.getCumFreq((long) 'a');
        long long11 = frequency1.getCount((java.lang.Object) (short) -1);
        frequency1.addValue((int) (byte) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        frequency1.addValue((int) (byte) 1);
        double double13 = frequency1.getPct((int) (byte) 1);
        double double15 = frequency1.getPct(100L);
        double double17 = frequency1.getCumPct(' ');
        java.lang.Class<?> wildcardClass18 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.3333333333333333d + "'", double13 == 0.3333333333333333d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        frequency1.addValue('4');
        double double11 = frequency1.getCumPct(1);
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency();
        long long13 = frequency12.getSumFreq();
        double double15 = frequency12.getCumPct('a');
        long long17 = frequency12.getCount((int) (short) 100);
        double double19 = frequency12.getPct('#');
        frequency12.addValue((java.lang.Integer) 10);
        double double22 = frequency1.getCumPct((java.lang.Object) frequency12);
        double double24 = frequency12.getPct((long) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        frequency1.addValue(' ');
        long long5 = frequency1.getCumFreq((int) ' ');
        long long6 = frequency1.getSumFreq();
        double double8 = frequency1.getPct((int) '4');
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        frequency1.addValue((int) '4');
        double double9 = frequency1.getPct(100);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        long long15 = frequency11.getCount((java.lang.Object) 100.0f);
        double double17 = frequency11.getPct(1L);
        frequency11.clear();
        long long20 = frequency11.getCumFreq((long) (byte) 1);
        long long22 = frequency11.getCumFreq((long) 0);
        java.util.Comparator comparator23 = null;
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency(comparator23);
        double double26 = frequency24.getCumPct((long) 10);
        double double28 = frequency24.getPct('#');
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        long long34 = frequency30.getCumFreq((java.lang.Object) 1.0d);
        double double36 = frequency30.getCumPct((int) '4');
        long long37 = frequency30.getSumFreq();
        double double38 = frequency24.getCumPct((java.lang.Object) long37);
        double double40 = frequency24.getCumPct('#');
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        long long44 = frequency42.getCumFreq((java.lang.Object) (short) 10);
        double double45 = frequency24.getPct((java.lang.Object) frequency42);
        long long47 = frequency42.getCount(0);
        frequency42.addValue((long) ' ');
        double double51 = frequency42.getCumPct(0);
        java.util.Comparator comparator52 = null;
        org.apache.commons.math.stat.Frequency frequency53 = new org.apache.commons.math.stat.Frequency(comparator52);
        double double55 = frequency53.getCumPct((long) 10);
        long long57 = frequency53.getCount((java.lang.Object) 100.0f);
        double double59 = frequency53.getPct(1L);
        long long61 = frequency53.getCumFreq((long) 0);
        double double63 = frequency53.getPct('a');
        double double65 = frequency53.getPct(1);
        double double67 = frequency53.getCumPct((long) (byte) 0);
        long long68 = frequency42.getCumFreq((java.lang.Object) frequency53);
        java.util.Comparator comparator69 = null;
        org.apache.commons.math.stat.Frequency frequency70 = new org.apache.commons.math.stat.Frequency(comparator69);
        double double72 = frequency70.getCumPct((long) 10);
        double double74 = frequency70.getPct('#');
        frequency70.addValue((int) '4');
        java.util.Comparator comparator77 = null;
        org.apache.commons.math.stat.Frequency frequency78 = new org.apache.commons.math.stat.Frequency(comparator77);
        double double80 = frequency78.getCumPct((long) 10);
        long long82 = frequency78.getCumFreq((java.lang.Object) 1.0d);
        long long84 = frequency78.getCumFreq((long) 'a');
        double double86 = frequency78.getPct((java.lang.Object) (byte) 100);
        long long87 = frequency70.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str88 = frequency70.toString();
        long long90 = frequency70.getCumFreq((int) (short) 0);
        frequency70.addValue((int) '#');
        frequency53.addValue((java.lang.Object) '#');
        frequency11.addValue((java.lang.Object) '#');
        java.lang.String str95 = frequency11.toString();
        long long97 = frequency11.getCount((-1));
        long long98 = frequency11.getSumFreq();
        double double99 = frequency1.getPct((java.lang.Object) frequency11);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str88, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n" + "'", str95, "Value \t Freq. \t Pct. \t Cum Pct. \n#\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1L + "'", long98 == 1L);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.0d + "'", double99 == 0.0d);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        double double11 = frequency1.getPct('a');
        double double13 = frequency1.getPct(1);
        double double15 = frequency1.getCumPct((long) (byte) 0);
        frequency1.addValue((java.lang.Integer) (-1));
        long long19 = frequency1.getCumFreq((int) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        double double10 = frequency1.getPct('a');
        long long12 = frequency1.getCumFreq('a');
        long long14 = frequency1.getCount(10);
        java.lang.Class<?> wildcardClass15 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getCumPct((-1));
        frequency1.addValue((int) (short) -1);
        double double11 = frequency1.getPct((int) (short) 1);
        long long13 = frequency1.getCumFreq((long) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        double double11 = frequency1.getPct('a');
        double double13 = frequency1.getPct(1);
        double double15 = frequency1.getCumPct((long) (byte) 0);
        long long17 = frequency1.getCount(' ');
        java.lang.String str18 = frequency1.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        frequency1.addValue((int) (byte) 1);
        double double13 = frequency1.getPct((int) (byte) 1);
        long long15 = frequency1.getCumFreq((long) (short) 1);
        double double17 = frequency1.getCumPct(100L);
        double double19 = frequency1.getCumPct(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.3333333333333333d + "'", double13 == 0.3333333333333333d);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long1 = frequency0.getSumFreq();
        java.util.Iterator iterator2 = frequency0.valuesIterator();
        frequency0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(iterator2);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getCumPct((java.lang.Object) false);
        long long9 = frequency1.getCount('4');
        frequency1.addValue((java.lang.Integer) 100);
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCumFreq((java.lang.Object) 1.0d);
        double double19 = frequency13.getCumPct('4');
        java.lang.String str20 = frequency13.toString();
        long long21 = frequency1.getCumFreq((java.lang.Object) str20);
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        frequency23.addValue((int) '4');
        frequency23.addValue(0);
        long long28 = frequency1.getCount((java.lang.Object) frequency23);
        // The following exception was thrown during execution in test generation
        try {
            frequency23.addValue(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq((long) 0);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        double double18 = frequency14.getPct('#');
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        long long24 = frequency20.getCumFreq((java.lang.Object) 1.0d);
        double double26 = frequency20.getCumPct((int) '4');
        long long27 = frequency20.getSumFreq();
        double double28 = frequency14.getCumPct((java.lang.Object) long27);
        double double30 = frequency14.getCumPct('#');
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        long long34 = frequency32.getCumFreq((java.lang.Object) (short) 10);
        double double35 = frequency14.getPct((java.lang.Object) frequency32);
        long long37 = frequency32.getCount(0);
        frequency32.addValue((long) ' ');
        double double41 = frequency32.getCumPct(0);
        java.util.Comparator comparator42 = null;
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency(comparator42);
        double double45 = frequency43.getCumPct((long) 10);
        long long47 = frequency43.getCount((java.lang.Object) 100.0f);
        double double49 = frequency43.getPct(1L);
        long long51 = frequency43.getCumFreq((long) 0);
        double double53 = frequency43.getPct('a');
        double double55 = frequency43.getPct(1);
        double double57 = frequency43.getCumPct((long) (byte) 0);
        long long58 = frequency32.getCumFreq((java.lang.Object) frequency43);
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        double double64 = frequency60.getPct('#');
        frequency60.addValue((int) '4');
        java.util.Comparator comparator67 = null;
        org.apache.commons.math.stat.Frequency frequency68 = new org.apache.commons.math.stat.Frequency(comparator67);
        double double70 = frequency68.getCumPct((long) 10);
        long long72 = frequency68.getCumFreq((java.lang.Object) 1.0d);
        long long74 = frequency68.getCumFreq((long) 'a');
        double double76 = frequency68.getPct((java.lang.Object) (byte) 100);
        long long77 = frequency60.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str78 = frequency60.toString();
        long long80 = frequency60.getCumFreq((int) (short) 0);
        frequency60.addValue((int) '#');
        frequency43.addValue((java.lang.Object) '#');
        frequency1.addValue((java.lang.Object) '#');
        long long86 = frequency1.getCumFreq((long) '#');
        java.lang.Class<?> wildcardClass87 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str78, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        long long51 = frequency32.getCount('#');
        frequency1.addValue((java.lang.Object) '#');
        java.util.Iterator iterator53 = frequency1.valuesIterator();
        java.util.Comparator comparator54 = null;
        org.apache.commons.math.stat.Frequency frequency55 = new org.apache.commons.math.stat.Frequency(comparator54);
        double double57 = frequency55.getCumPct((long) 10);
        double double59 = frequency55.getPct('#');
        double double61 = frequency55.getCumPct((int) '#');
        java.lang.String str62 = frequency55.toString();
        long long64 = frequency55.getCumFreq((long) '4');
        double double65 = frequency1.getPct((java.lang.Object) frequency55);
        long long67 = frequency55.getCount(100);
        double double69 = frequency55.getPct((int) (short) 1);
        frequency55.addValue('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(iterator53);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str62, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        long long14 = frequency1.getCount('4');
        double double16 = frequency1.getCumPct(100L);
        frequency1.addValue((java.lang.Integer) 0);
        double double20 = frequency1.getCumPct(100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long1 = frequency0.getSumFreq();
        long long3 = frequency0.getCumFreq((long) 1);
        double double5 = frequency0.getPct((-1));
        double double7 = frequency0.getPct((int) (short) 1);
        java.lang.Class<?> wildcardClass8 = frequency0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        long long8 = frequency1.getCumFreq('4');
        java.lang.Class<?> wildcardClass9 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq((long) 0);
        double double14 = frequency1.getPct((long) (short) 0);
        long long16 = frequency1.getCumFreq('4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        double double10 = frequency1.getPct('a');
        frequency1.addValue(0L);
        frequency1.clear();
        long long14 = frequency1.getSumFreq();
        frequency1.addValue((long) (byte) -1);
        long long18 = frequency1.getCumFreq(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        java.util.Iterator iterator4 = frequency1.valuesIterator();
        java.util.Comparator comparator5 = null;
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency(comparator5);
        double double8 = frequency6.getCumPct((long) 10);
        long long10 = frequency6.getCumFreq((java.lang.Object) 1.0d);
        double double12 = frequency6.getCumPct((int) '4');
        long long13 = frequency6.getSumFreq();
        long long15 = frequency6.getCount((long) (-1));
        long long17 = frequency6.getCount('4');
        long long19 = frequency6.getCount(1);
        double double21 = frequency6.getCumPct((java.lang.Object) (short) 10);
        double double22 = frequency1.getCumPct((java.lang.Object) frequency6);
        long long24 = frequency1.getCumFreq((-1));
        java.util.Comparator comparator25 = null;
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency(comparator25);
        double double28 = frequency26.getCumPct((long) 10);
        long long30 = frequency26.getCumFreq((java.lang.Object) 1.0d);
        long long32 = frequency26.getCumFreq((java.lang.Object) (short) 10);
        java.lang.String str33 = frequency26.toString();
        frequency26.addValue((int) (byte) 1);
        java.util.Iterator iterator36 = frequency26.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency26);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str33, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertNotNull(iterator36);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) 'a');
        frequency1.clear();
        double double14 = frequency1.getCumPct('a');
        double double16 = frequency1.getPct(' ');
        double double18 = frequency1.getCumPct((long) 100);
        long long19 = frequency1.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        frequency1.addValue(' ');
        long long5 = frequency1.getCumFreq((java.lang.Object) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        double double11 = frequency1.getPct((-1L));
        java.lang.String str12 = frequency1.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        long long14 = frequency1.getCount('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        java.util.Comparator comparator2 = null;
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency(comparator2);
        double double5 = frequency3.getCumPct((long) 10);
        long long7 = frequency3.getCount((java.lang.Object) 100.0f);
        double double9 = frequency3.getPct(1L);
        double double11 = frequency3.getCumPct((int) (short) -1);
        double double12 = frequency1.getCumPct((java.lang.Object) frequency3);
        long long14 = frequency1.getCount((long) (short) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.lang.String str8 = frequency1.toString();
        frequency1.addValue((int) (byte) 1);
        double double12 = frequency1.getCumPct(100);
        long long14 = frequency1.getCount('4');
        java.util.Comparator comparator15 = null;
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency(comparator15);
        double double18 = frequency16.getCumPct((long) 10);
        long long20 = frequency16.getCount((java.lang.Object) 100.0f);
        frequency16.addValue((java.lang.Integer) (-1));
        frequency16.addValue((java.lang.Integer) 10);
        double double26 = frequency16.getCumPct((long) '4');
        java.util.Iterator iterator27 = frequency16.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(iterator27);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getPct((long) '#');
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        frequency9.addValue((int) '4');
        frequency9.addValue(0);
        frequency1.addValue((java.lang.Object) 0);
        long long15 = frequency1.getSumFreq();
        long long17 = frequency1.getCumFreq((int) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        double double9 = frequency1.getCumPct((int) (short) -1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        java.lang.String str18 = frequency11.toString();
        long long20 = frequency11.getCumFreq((long) '4');
        frequency1.addValue((java.lang.Object) '4');
        double double23 = frequency1.getPct((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getCumPct((java.lang.Object) false);
        long long9 = frequency1.getCount('4');
        frequency1.addValue((java.lang.Integer) 100);
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        double double17 = frequency13.getPct('#');
        frequency13.addValue((int) '4');
        java.util.Comparator comparator20 = null;
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency(comparator20);
        double double23 = frequency21.getCumPct((long) 10);
        long long25 = frequency21.getCumFreq((java.lang.Object) 1.0d);
        long long27 = frequency21.getCumFreq((long) 'a');
        double double29 = frequency21.getPct((java.lang.Object) (byte) 100);
        long long30 = frequency13.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str31 = frequency13.toString();
        long long33 = frequency13.getCumFreq((int) (short) 0);
        long long35 = frequency13.getCount(' ');
        long long37 = frequency13.getCount(0);
        double double38 = frequency1.getCumPct((java.lang.Object) 0);
        double double40 = frequency1.getCumPct((long) '4');
        long long42 = frequency1.getCount(1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str31, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCount((java.lang.Object) 100.0f);
        double double15 = frequency9.getPct(1L);
        frequency9.clear();
        long long18 = frequency9.getCumFreq((long) (byte) 1);
        long long20 = frequency9.getCumFreq(2L);
        long long21 = frequency1.getCumFreq((java.lang.Object) 2L);
        frequency1.addValue((long) (short) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        double double9 = frequency1.getCumPct((long) (byte) 100);
        java.lang.String str10 = frequency1.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long1 = frequency0.getSumFreq();
        long long3 = frequency0.getCumFreq((long) 1);
        long long5 = frequency0.getCount((int) (byte) -1);
        long long6 = frequency0.getSumFreq();
        java.util.Comparator comparator7 = null;
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency(comparator7);
        double double10 = frequency8.getCumPct((long) 10);
        double double12 = frequency8.getPct('#');
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCumFreq((java.lang.Object) 1.0d);
        double double20 = frequency14.getCumPct((int) '4');
        long long21 = frequency14.getSumFreq();
        double double22 = frequency8.getCumPct((java.lang.Object) long21);
        double double24 = frequency8.getCumPct('#');
        java.util.Comparator comparator25 = null;
        org.apache.commons.math.stat.Frequency frequency26 = new org.apache.commons.math.stat.Frequency(comparator25);
        long long28 = frequency26.getCumFreq((java.lang.Object) (short) 10);
        double double29 = frequency8.getPct((java.lang.Object) frequency26);
        long long31 = frequency26.getCount(0);
        frequency26.addValue((long) ' ');
        double double35 = frequency26.getCumPct(0);
        java.util.Comparator comparator36 = null;
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency(comparator36);
        double double39 = frequency37.getCumPct((long) 10);
        long long41 = frequency37.getCount((java.lang.Object) 100.0f);
        double double43 = frequency37.getPct(1L);
        long long45 = frequency37.getCumFreq((long) 0);
        double double47 = frequency37.getPct('a');
        double double49 = frequency37.getPct(1);
        double double51 = frequency37.getCumPct((long) (byte) 0);
        long long52 = frequency26.getCumFreq((java.lang.Object) frequency37);
        double double53 = frequency0.getPct((java.lang.Object) frequency26);
        long long55 = frequency0.getCumFreq(' ');
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) 'a');
        frequency1.clear();
        double double14 = frequency1.getCumPct('a');
        frequency1.clear();
        java.util.Comparator comparator16 = null;
        org.apache.commons.math.stat.Frequency frequency17 = new org.apache.commons.math.stat.Frequency(comparator16);
        double double19 = frequency17.getCumPct((long) 10);
        double double21 = frequency17.getPct('#');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCumFreq((java.lang.Object) 1.0d);
        double double29 = frequency23.getCumPct((int) '4');
        long long30 = frequency23.getSumFreq();
        double double31 = frequency17.getCumPct((java.lang.Object) long30);
        double double33 = frequency17.getCumPct('#');
        java.util.Comparator comparator34 = null;
        org.apache.commons.math.stat.Frequency frequency35 = new org.apache.commons.math.stat.Frequency(comparator34);
        long long37 = frequency35.getCumFreq((java.lang.Object) (short) 10);
        double double38 = frequency17.getPct((java.lang.Object) frequency35);
        long long40 = frequency35.getCount(0);
        double double42 = frequency35.getCumPct(1);
        java.util.Comparator comparator43 = null;
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency(comparator43);
        double double46 = frequency44.getCumPct((long) 10);
        double double48 = frequency44.getPct('#');
        double double50 = frequency44.getCumPct((int) '#');
        java.lang.String str51 = frequency44.toString();
        long long53 = frequency44.getCumFreq((long) '4');
        java.lang.String str54 = frequency44.toString();
        double double55 = frequency35.getPct((java.lang.Object) str54);
        double double56 = frequency1.getCumPct((java.lang.Object) double55);
        long long58 = frequency1.getCumFreq(1);
        double double60 = frequency1.getCumPct('#');
        frequency1.addValue(10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str51, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str54, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        double double10 = frequency1.getCumPct(' ');
        double double12 = frequency1.getCumPct((int) ' ');
        frequency1.addValue((java.lang.Integer) 100);
        frequency1.addValue((java.lang.Integer) 1);
        java.util.Iterator iterator17 = frequency1.valuesIterator();
        long long19 = frequency1.getCumFreq((int) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        frequency1.addValue('4');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        frequency1.addValue((java.lang.Object) '4');
        long long34 = frequency1.getCumFreq('a');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        long long24 = frequency20.getCount((java.lang.Object) 100.0f);
        frequency20.addValue((java.lang.Integer) (-1));
        frequency20.addValue((java.lang.Integer) 10);
        double double30 = frequency20.getCumPct((long) (byte) 10);
        long long31 = frequency1.getCumFreq((java.lang.Object) frequency20);
        java.util.Comparator comparator32 = null;
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency(comparator32);
        double double35 = frequency33.getCumPct((long) 10);
        long long37 = frequency33.getCount((java.lang.Object) 100.0f);
        frequency33.addValue((java.lang.Integer) (-1));
        frequency33.addValue((java.lang.Integer) 10);
        frequency33.addValue((int) (byte) 1);
        double double44 = frequency20.getPct((java.lang.Object) (byte) 1);
        long long46 = frequency20.getCumFreq('4');
        java.util.Comparator comparator47 = null;
        org.apache.commons.math.stat.Frequency frequency48 = new org.apache.commons.math.stat.Frequency(comparator47);
        double double50 = frequency48.getCumPct((long) 10);
        double double52 = frequency48.getPct('#');
        double double54 = frequency48.getCumPct((int) '#');
        frequency48.addValue(1);
        java.util.Comparator comparator57 = null;
        org.apache.commons.math.stat.Frequency frequency58 = new org.apache.commons.math.stat.Frequency(comparator57);
        double double60 = frequency58.getCumPct((long) 10);
        double double62 = frequency58.getPct('#');
        double double64 = frequency58.getCumPct((int) '#');
        long long65 = frequency48.getCumFreq((java.lang.Object) double64);
        double double67 = frequency48.getCumPct((long) (short) 0);
        java.util.Iterator iterator68 = frequency48.valuesIterator();
        long long69 = frequency20.getCumFreq((java.lang.Object) frequency48);
        long long71 = frequency48.getCumFreq(' ');
        long long72 = frequency48.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(iterator68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        double double9 = frequency1.getPct((java.lang.Object) (byte) 100);
        double double11 = frequency1.getCumPct((long) (-1));
        frequency1.addValue((long) (short) 0);
        long long14 = frequency1.getSumFreq();
        double double16 = frequency1.getCumPct((int) (short) -1);
        java.lang.Class<?> wildcardClass17 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        double double10 = frequency1.getCumPct(' ');
        double double12 = frequency1.getCumPct((int) ' ');
        long long14 = frequency1.getCumFreq(' ');
        java.util.Comparator comparator15 = null;
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency(comparator15);
        double double18 = frequency16.getCumPct((long) 10);
        double double20 = frequency16.getPct('#');
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        long long26 = frequency22.getCumFreq((java.lang.Object) 1.0d);
        double double28 = frequency22.getCumPct((int) '4');
        long long29 = frequency22.getSumFreq();
        double double30 = frequency16.getCumPct((java.lang.Object) long29);
        double double32 = frequency16.getCumPct('#');
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        long long36 = frequency34.getCumFreq((java.lang.Object) (short) 10);
        double double37 = frequency16.getPct((java.lang.Object) frequency34);
        long long39 = frequency34.getCount(0);
        frequency34.addValue((long) ' ');
        double double43 = frequency34.getCumPct(0);
        java.util.Comparator comparator44 = null;
        org.apache.commons.math.stat.Frequency frequency45 = new org.apache.commons.math.stat.Frequency(comparator44);
        double double47 = frequency45.getCumPct((long) 10);
        long long49 = frequency45.getCount((java.lang.Object) 100.0f);
        double double51 = frequency45.getPct(1L);
        long long53 = frequency45.getCumFreq((long) 0);
        double double55 = frequency45.getPct('a');
        double double57 = frequency45.getPct(1);
        double double59 = frequency45.getCumPct((long) (byte) 0);
        long long60 = frequency34.getCumFreq((java.lang.Object) frequency45);
        long long62 = frequency34.getCumFreq('a');
        long long63 = frequency34.getSumFreq();
        double double64 = frequency1.getPct((java.lang.Object) frequency34);
        java.util.Comparator comparator65 = null;
        org.apache.commons.math.stat.Frequency frequency66 = new org.apache.commons.math.stat.Frequency(comparator65);
        java.util.Comparator comparator67 = null;
        org.apache.commons.math.stat.Frequency frequency68 = new org.apache.commons.math.stat.Frequency(comparator67);
        double double70 = frequency68.getCumPct((long) 10);
        long long72 = frequency68.getCount((java.lang.Object) 100.0f);
        double double74 = frequency68.getPct(1L);
        double double76 = frequency68.getCumPct((int) (short) -1);
        double double77 = frequency66.getCumPct((java.lang.Object) frequency68);
        double double79 = frequency66.getCumPct(10);
        frequency66.addValue((int) '#');
        long long83 = frequency66.getCumFreq((long) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            frequency34.addValue((java.lang.Object) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        frequency0.addValue((long) (short) 100);
        frequency0.addValue((java.lang.Integer) (-1));
        long long6 = frequency0.getCount((int) '#');
        double double8 = frequency0.getPct((long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getCumPct((java.lang.Object) false);
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCumFreq((java.lang.Object) 1.0d);
        double double15 = frequency9.getCumPct((int) '4');
        long long16 = frequency9.getSumFreq();
        long long18 = frequency9.getCount((long) (-1));
        long long20 = frequency9.getCount('4');
        long long22 = frequency9.getCount((java.lang.Object) 10.0f);
        long long23 = frequency1.getCount((java.lang.Object) 10.0f);
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        long long29 = frequency25.getCumFreq((java.lang.Object) 1.0d);
        double double31 = frequency25.getCumPct((int) '4');
        long long32 = frequency25.getSumFreq();
        double double34 = frequency25.getPct('a');
        frequency25.addValue(0L);
        frequency25.clear();
        long long38 = frequency1.getCumFreq((java.lang.Object) frequency25);
        long long40 = frequency1.getCount(10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getCumPct((java.lang.Object) false);
        long long9 = frequency1.getCount('4');
        frequency1.addValue((java.lang.Integer) 100);
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCumFreq((java.lang.Object) 1.0d);
        double double19 = frequency13.getCumPct('4');
        java.lang.String str20 = frequency13.toString();
        long long21 = frequency1.getCumFreq((java.lang.Object) str20);
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        frequency23.addValue((int) '4');
        frequency23.addValue(0);
        long long28 = frequency1.getCount((java.lang.Object) frequency23);
        double double30 = frequency23.getPct((long) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long9 = frequency1.getCumFreq((int) (byte) 10);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        long long15 = frequency11.getCount((java.lang.Object) 100.0f);
        frequency11.addValue((java.lang.Integer) (-1));
        frequency11.addValue((java.lang.Integer) 10);
        double double21 = frequency11.getCumPct((long) '4');
        double double22 = frequency1.getCumPct((java.lang.Object) '4');
        long long24 = frequency1.getCount('a');
        double double26 = frequency1.getPct('#');
        java.util.Comparator comparator27 = null;
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency(comparator27);
        double double30 = frequency28.getCumPct((long) 10);
        double double32 = frequency28.getPct('#');
        double double34 = frequency28.getCumPct((int) '#');
        java.lang.String str35 = frequency28.toString();
        long long37 = frequency28.getCumFreq((long) '4');
        java.lang.String str38 = frequency28.toString();
        java.lang.String str39 = frequency28.toString();
        long long41 = frequency28.getCount((int) (short) -1);
        double double43 = frequency28.getCumPct(0);
        double double44 = frequency1.getCumPct((java.lang.Object) double43);
        java.util.Comparator comparator45 = null;
        org.apache.commons.math.stat.Frequency frequency46 = new org.apache.commons.math.stat.Frequency(comparator45);
        double double48 = frequency46.getCumPct((long) 10);
        long long50 = frequency46.getCount((java.lang.Object) 100.0f);
        double double52 = frequency46.getPct(1L);
        frequency46.clear();
        long long55 = frequency46.getCumFreq((long) (byte) 1);
        long long57 = frequency46.getCumFreq((long) 0);
        long long59 = frequency46.getCount((long) (byte) 1);
        java.lang.Class<?> wildcardClass60 = frequency46.getClass();
        double double61 = frequency1.getCumPct((java.lang.Object) frequency46);
        java.util.Comparator comparator62 = null;
        org.apache.commons.math.stat.Frequency frequency63 = new org.apache.commons.math.stat.Frequency(comparator62);
        double double65 = frequency63.getCumPct((long) 10);
        long long67 = frequency63.getCount((java.lang.Object) 100.0f);
        double double69 = frequency63.getCumPct((long) (-1));
        long long71 = frequency63.getCumFreq('#');
        double double72 = frequency46.getCumPct((java.lang.Object) long71);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str35, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str38, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str39, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        java.util.Comparator comparator2 = null;
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency(comparator2);
        double double5 = frequency3.getCumPct((long) 10);
        long long7 = frequency3.getCount((java.lang.Object) 100.0f);
        double double9 = frequency3.getPct(1L);
        double double11 = frequency3.getCumPct((int) (short) -1);
        double double12 = frequency1.getCumPct((java.lang.Object) frequency3);
        double double14 = frequency1.getCumPct(10);
        long long15 = frequency1.getSumFreq();
        double double17 = frequency1.getPct((int) 'a');
        long long19 = frequency1.getCumFreq(10L);
        java.util.Iterator iterator20 = frequency1.valuesIterator();
        long long22 = frequency1.getCumFreq((int) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        frequency1.addValue('4');
        double double11 = frequency1.getPct((java.lang.Object) 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Integer) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        long long82 = frequency1.getCount((long) ' ');
        frequency1.addValue(' ');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Integer) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        frequency1.addValue((int) '4');
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        long long13 = frequency9.getCumFreq((java.lang.Object) 1.0d);
        long long15 = frequency9.getCumFreq((long) 'a');
        double double17 = frequency9.getPct((java.lang.Object) (byte) 100);
        long long18 = frequency1.getCumFreq((java.lang.Object) (byte) 100);
        long long20 = frequency1.getCount((int) (short) 1);
        long long21 = frequency1.getSumFreq();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        java.util.Iterator iterator21 = frequency1.valuesIterator();
        java.lang.String str22 = frequency1.toString();
        double double24 = frequency1.getPct(' ');
        double double26 = frequency1.getCumPct(' ');
        frequency1.addValue(0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        java.util.Iterator iterator21 = frequency1.valuesIterator();
        java.lang.String str22 = frequency1.toString();
        java.util.Comparator comparator23 = null;
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency(comparator23);
        double double26 = frequency24.getCumPct((long) 10);
        double double28 = frequency24.getPct('#');
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        long long34 = frequency30.getCumFreq((java.lang.Object) 1.0d);
        double double36 = frequency30.getCumPct((int) '4');
        long long37 = frequency30.getSumFreq();
        double double38 = frequency24.getCumPct((java.lang.Object) long37);
        double double40 = frequency24.getCumPct('#');
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        long long44 = frequency42.getCumFreq((java.lang.Object) (short) 10);
        double double45 = frequency24.getPct((java.lang.Object) frequency42);
        long long47 = frequency42.getCumFreq((int) (byte) 10);
        long long49 = frequency42.getCount('a');
        java.util.Iterator iterator50 = frequency42.valuesIterator();
        long long51 = frequency1.getCumFreq((java.lang.Object) iterator50);
        java.util.Iterator iterator52 = frequency1.valuesIterator();
        double double54 = frequency1.getPct('4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(iterator50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(iterator52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        frequency1.addValue((long) (byte) 0);
        long long11 = frequency1.getSumFreq();
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCumFreq((java.lang.Object) 1.0d);
        double double19 = frequency13.getCumPct((int) '4');
        long long20 = frequency13.getSumFreq();
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        double double26 = frequency22.getPct('#');
        double double28 = frequency22.getCumPct((int) '#');
        frequency22.addValue(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        long long39 = frequency22.getCumFreq((java.lang.Object) double38);
        double double41 = frequency22.getCumPct((long) (short) 0);
        java.util.Comparator comparator42 = null;
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency(comparator42);
        double double45 = frequency43.getCumPct((long) 10);
        long long47 = frequency43.getCount((java.lang.Object) 100.0f);
        frequency43.addValue((java.lang.Integer) (-1));
        frequency43.addValue((java.lang.Integer) 10);
        long long53 = frequency43.getCumFreq((int) 'a');
        java.util.Comparator comparator54 = null;
        org.apache.commons.math.stat.Frequency frequency55 = new org.apache.commons.math.stat.Frequency(comparator54);
        double double57 = frequency55.getCumPct((long) 10);
        long long59 = frequency55.getCount((java.lang.Object) 100.0f);
        frequency55.addValue((java.lang.Integer) (-1));
        frequency43.addValue((java.lang.Object) (-1));
        long long63 = frequency22.getCount((java.lang.Object) frequency43);
        long long65 = frequency43.getCumFreq('a');
        double double66 = frequency13.getPct((java.lang.Object) 'a');
        double double67 = frequency1.getCumPct((java.lang.Object) frequency13);
        double double69 = frequency13.getPct((int) (short) -1);
        java.util.Comparator comparator70 = null;
        org.apache.commons.math.stat.Frequency frequency71 = new org.apache.commons.math.stat.Frequency(comparator70);
        double double73 = frequency71.getCumPct((long) 10);
        long long75 = frequency71.getCount((java.lang.Object) 100.0f);
        frequency71.addValue((int) (short) 1);
        double double79 = frequency71.getCumPct(' ');
        // The following exception was thrown during execution in test generation
        try {
            frequency13.addValue((java.lang.Object) frequency71);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2L + "'", long53 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        long long82 = frequency1.getCount((long) ' ');
        frequency1.addValue((long) 10);
        long long86 = frequency1.getCount(100);
        long long88 = frequency1.getCumFreq((-1L));
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        frequency19.addValue((long) ' ');
        double double28 = frequency19.getCumPct(0);
        long long30 = frequency19.getCumFreq((long) (-1));
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        long long40 = frequency32.getCount(0L);
        double double42 = frequency32.getPct((int) (short) 100);
        double double44 = frequency32.getPct((int) (short) -1);
        long long45 = frequency19.getCumFreq((java.lang.Object) double44);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        double double10 = frequency1.getCumPct(' ');
        double double12 = frequency1.getCumPct((int) ' ');
        long long14 = frequency1.getCumFreq(' ');
        java.util.Comparator comparator15 = null;
        org.apache.commons.math.stat.Frequency frequency16 = new org.apache.commons.math.stat.Frequency(comparator15);
        double double18 = frequency16.getCumPct((long) 10);
        double double20 = frequency16.getPct('#');
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        long long26 = frequency22.getCumFreq((java.lang.Object) 1.0d);
        double double28 = frequency22.getCumPct((int) '4');
        long long29 = frequency22.getSumFreq();
        double double30 = frequency16.getCumPct((java.lang.Object) long29);
        double double32 = frequency16.getCumPct('#');
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        long long36 = frequency34.getCumFreq((java.lang.Object) (short) 10);
        double double37 = frequency16.getPct((java.lang.Object) frequency34);
        long long39 = frequency34.getCount(0);
        frequency34.addValue((long) ' ');
        double double43 = frequency34.getCumPct(0);
        java.util.Comparator comparator44 = null;
        org.apache.commons.math.stat.Frequency frequency45 = new org.apache.commons.math.stat.Frequency(comparator44);
        double double47 = frequency45.getCumPct((long) 10);
        long long49 = frequency45.getCount((java.lang.Object) 100.0f);
        double double51 = frequency45.getPct(1L);
        long long53 = frequency45.getCumFreq((long) 0);
        double double55 = frequency45.getPct('a');
        double double57 = frequency45.getPct(1);
        double double59 = frequency45.getCumPct((long) (byte) 0);
        long long60 = frequency34.getCumFreq((java.lang.Object) frequency45);
        long long62 = frequency34.getCumFreq('a');
        long long63 = frequency34.getSumFreq();
        double double64 = frequency1.getPct((java.lang.Object) frequency34);
        long long65 = frequency34.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        long long14 = frequency1.getCount((int) (short) -1);
        double double16 = frequency1.getCumPct(0);
        long long18 = frequency1.getCount((long) (byte) 100);
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        double double24 = frequency20.getPct('#');
        java.util.Iterator iterator25 = frequency20.valuesIterator();
        double double27 = frequency20.getPct('#');
        double double29 = frequency20.getCumPct(' ');
        double double31 = frequency20.getPct(10);
        long long32 = frequency20.getSumFreq();
        frequency1.addValue((java.lang.Object) long32);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getCumPct((-1));
        frequency1.addValue((int) (short) -1);
        double double11 = frequency1.getPct((long) 'a');
        long long13 = frequency1.getCount((long) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        frequency1.addValue((int) '4');
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        double double13 = frequency9.getPct('#');
        java.util.Iterator iterator14 = frequency9.valuesIterator();
        double double16 = frequency9.getPct('#');
        long long18 = frequency9.getCumFreq((java.lang.Object) 100L);
        frequency1.addValue((java.lang.Object) long18);
        long long21 = frequency1.getCount('#');
        double double23 = frequency1.getPct('#');
        frequency1.addValue((long) ' ');
        double double27 = frequency1.getPct((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.addValue('4');
        double double11 = frequency1.getPct((-1));
        long long13 = frequency1.getCumFreq(1);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        double double19 = frequency15.getPct('#');
        java.util.Iterator iterator20 = frequency15.valuesIterator();
        double double22 = frequency15.getPct('#');
        java.util.Comparator comparator23 = null;
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency(comparator23);
        double double26 = frequency24.getCumPct((long) 10);
        long long28 = frequency24.getCount((java.lang.Object) 100.0f);
        double double30 = frequency24.getPct(1L);
        long long32 = frequency24.getCumFreq((long) 0);
        double double34 = frequency24.getPct('a');
        double double35 = frequency15.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator36 = null;
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency(comparator36);
        double double39 = frequency37.getCumPct((long) 10);
        long long41 = frequency37.getCount((java.lang.Object) 100.0f);
        long long43 = frequency37.getCumFreq((long) 0);
        double double44 = frequency15.getCumPct((java.lang.Object) frequency37);
        java.util.Comparator comparator45 = null;
        org.apache.commons.math.stat.Frequency frequency46 = new org.apache.commons.math.stat.Frequency(comparator45);
        double double48 = frequency46.getCumPct((long) 10);
        double double50 = frequency46.getPct('#');
        double double52 = frequency46.getCumPct((int) '#');
        frequency46.addValue(1);
        java.util.Comparator comparator55 = null;
        org.apache.commons.math.stat.Frequency frequency56 = new org.apache.commons.math.stat.Frequency(comparator55);
        double double58 = frequency56.getCumPct((long) 10);
        double double60 = frequency56.getPct('#');
        double double62 = frequency56.getCumPct((int) '#');
        long long63 = frequency46.getCumFreq((java.lang.Object) double62);
        long long65 = frequency46.getCount('#');
        frequency15.addValue((java.lang.Object) '#');
        java.util.Iterator iterator67 = frequency15.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(iterator67);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        frequency19.addValue((long) ' ');
        double double28 = frequency19.getCumPct(0);
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        long long34 = frequency30.getCount((java.lang.Object) 100.0f);
        double double36 = frequency30.getPct(1L);
        long long38 = frequency30.getCumFreq((long) 0);
        double double40 = frequency30.getPct('a');
        double double42 = frequency30.getPct(1);
        double double44 = frequency30.getCumPct((long) (byte) 0);
        long long45 = frequency19.getCumFreq((java.lang.Object) frequency30);
        java.util.Comparator comparator46 = null;
        org.apache.commons.math.stat.Frequency frequency47 = new org.apache.commons.math.stat.Frequency(comparator46);
        double double49 = frequency47.getCumPct((long) 10);
        double double51 = frequency47.getPct('#');
        frequency47.addValue((int) '4');
        java.util.Comparator comparator54 = null;
        org.apache.commons.math.stat.Frequency frequency55 = new org.apache.commons.math.stat.Frequency(comparator54);
        double double57 = frequency55.getCumPct((long) 10);
        long long59 = frequency55.getCumFreq((java.lang.Object) 1.0d);
        long long61 = frequency55.getCumFreq((long) 'a');
        double double63 = frequency55.getPct((java.lang.Object) (byte) 100);
        long long64 = frequency47.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str65 = frequency47.toString();
        long long67 = frequency47.getCumFreq((int) (short) 0);
        frequency47.addValue((int) '#');
        frequency30.addValue((java.lang.Object) '#');
        long long71 = frequency30.getSumFreq();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str65, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCount(0L);
        java.lang.String str10 = frequency1.toString();
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((int) (short) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        java.util.Comparator comparator2 = null;
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency(comparator2);
        double double5 = frequency3.getCumPct((long) 10);
        long long7 = frequency3.getCount((java.lang.Object) 100.0f);
        double double9 = frequency3.getPct(1L);
        double double11 = frequency3.getCumPct((int) (short) -1);
        double double12 = frequency1.getCumPct((java.lang.Object) frequency3);
        double double14 = frequency1.getCumPct(10);
        frequency1.addValue((int) '#');
        long long18 = frequency1.getCumFreq((long) (short) 10);
        long long20 = frequency1.getCumFreq('4');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        double double9 = frequency1.getPct((java.lang.Object) (byte) 100);
        double double11 = frequency1.getCumPct((long) (-1));
        frequency1.addValue((long) (short) 0);
        double double15 = frequency1.getCumPct((long) (short) -1);
        double double17 = frequency1.getCumPct((int) (byte) 1);
        double double19 = frequency1.getCumPct('#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getCumPct((java.lang.Object) false);
        long long9 = frequency1.getCount('4');
        frequency1.addValue((java.lang.Integer) 100);
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCumFreq((java.lang.Object) 1.0d);
        double double19 = frequency13.getCumPct('4');
        java.lang.String str20 = frequency13.toString();
        long long21 = frequency1.getCumFreq((java.lang.Object) str20);
        double double23 = frequency1.getCumPct('#');
        long long25 = frequency1.getCount((long) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str20, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        java.util.Iterator iterator21 = frequency1.valuesIterator();
        java.lang.String str22 = frequency1.toString();
        java.util.Comparator comparator23 = null;
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency(comparator23);
        double double26 = frequency24.getCumPct((long) 10);
        double double28 = frequency24.getPct('#');
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        long long34 = frequency30.getCumFreq((java.lang.Object) 1.0d);
        double double36 = frequency30.getCumPct((int) '4');
        long long37 = frequency30.getSumFreq();
        double double38 = frequency24.getCumPct((java.lang.Object) long37);
        double double40 = frequency24.getCumPct('#');
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        long long44 = frequency42.getCumFreq((java.lang.Object) (short) 10);
        double double45 = frequency24.getPct((java.lang.Object) frequency42);
        long long47 = frequency42.getCumFreq((int) (byte) 10);
        long long49 = frequency42.getCount('a');
        java.util.Iterator iterator50 = frequency42.valuesIterator();
        long long51 = frequency1.getCumFreq((java.lang.Object) iterator50);
        long long53 = frequency1.getCumFreq('#');
        double double55 = frequency1.getPct(10);
        double double57 = frequency1.getCumPct('4');
        double double59 = frequency1.getCumPct(3L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(iterator50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        long long32 = frequency1.getCount('a');
        double double34 = frequency1.getPct('a');
        java.lang.String str35 = frequency1.toString();
        java.lang.String str36 = frequency1.toString();
        frequency1.addValue((java.lang.Integer) 100);
        java.lang.String str39 = frequency1.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str35, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str36, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n" + "'", str39, "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        double double11 = frequency1.getPct((-1L));
        frequency1.addValue((int) '#');
        java.lang.String str14 = frequency1.toString();
        long long16 = frequency1.getCount((int) (byte) 0);
        double double18 = frequency1.getPct((long) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t50%\t50%\n35\t1\t50%\t100%\n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n1\t1\t50%\t50%\n35\t1\t50%\t100%\n");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.5d + "'", double18 == 0.5d);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency1.getCumFreq(10);
        long long25 = frequency1.getSumFreq();
        frequency1.clear();
        java.util.Comparator comparator27 = null;
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency(comparator27);
        double double30 = frequency28.getCumPct((long) 10);
        frequency28.addValue((java.lang.Integer) 1);
        double double34 = frequency28.getPct((int) (byte) -1);
        double double36 = frequency28.getCumPct(' ');
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency();
        long long38 = frequency37.getSumFreq();
        long long40 = frequency37.getCumFreq((long) 1);
        double double42 = frequency37.getPct('#');
        java.util.Comparator comparator43 = null;
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency(comparator43);
        double double46 = frequency44.getCumPct((long) 10);
        double double48 = frequency44.getPct('#');
        java.util.Iterator iterator49 = frequency44.valuesIterator();
        double double51 = frequency44.getPct('#');
        java.util.Comparator comparator52 = null;
        org.apache.commons.math.stat.Frequency frequency53 = new org.apache.commons.math.stat.Frequency(comparator52);
        double double55 = frequency53.getCumPct((long) 10);
        long long57 = frequency53.getCount((java.lang.Object) 100.0f);
        double double59 = frequency53.getPct(1L);
        long long61 = frequency53.getCumFreq((long) 0);
        double double63 = frequency53.getPct('a');
        double double64 = frequency44.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator65 = null;
        org.apache.commons.math.stat.Frequency frequency66 = new org.apache.commons.math.stat.Frequency(comparator65);
        double double68 = frequency66.getCumPct((long) 10);
        long long70 = frequency66.getCount((java.lang.Object) 100.0f);
        long long72 = frequency66.getCumFreq((long) 0);
        double double73 = frequency44.getCumPct((java.lang.Object) frequency66);
        long long75 = frequency44.getCount('a');
        double double77 = frequency44.getPct('a');
        long long78 = frequency37.getCount((java.lang.Object) 'a');
        long long79 = frequency28.getCount((java.lang.Object) 'a');
        double double80 = frequency1.getPct((java.lang.Object) long79);
        java.lang.String str81 = frequency1.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(iterator49);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str81, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        frequency1.addValue(1);
        frequency1.addValue(0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.lang.Object obj81 = null;
        double double82 = frequency1.getCumPct(obj81);
        java.util.Iterator iterator83 = frequency1.valuesIterator();
        double double85 = frequency1.getPct('a');
        frequency1.addValue((-1));
        long long89 = frequency1.getCumFreq((long) (short) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(iterator83);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1L + "'", long89 == 1L);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        long long82 = frequency1.getCount((long) ' ');
        frequency1.addValue(' ');
        long long85 = frequency1.getSumFreq();
        long long86 = frequency1.getSumFreq();
        double double88 = frequency1.getPct((long) (short) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        frequency1.addValue(0L);
        double double7 = frequency1.getCumPct((int) ' ');
        long long9 = frequency1.getCumFreq('4');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq(2L);
        double double14 = frequency1.getCumPct(' ');
        double double16 = frequency1.getPct((java.lang.Object) 10.0d);
        long long18 = frequency1.getCumFreq((int) (byte) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        double double9 = frequency1.getCumPct((int) (byte) 0);
        long long11 = frequency1.getCount(100);
        double double13 = frequency1.getCumPct(10L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        java.util.Iterator iterator4 = frequency1.valuesIterator();
        java.util.Comparator comparator5 = null;
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency(comparator5);
        double double8 = frequency6.getCumPct((long) 10);
        long long10 = frequency6.getCumFreq((java.lang.Object) 1.0d);
        double double12 = frequency6.getCumPct((int) '4');
        long long13 = frequency6.getSumFreq();
        long long15 = frequency6.getCount((long) (-1));
        long long17 = frequency6.getCount('4');
        long long19 = frequency6.getCount(1);
        double double21 = frequency6.getCumPct((java.lang.Object) (short) 10);
        double double22 = frequency1.getCumPct((java.lang.Object) frequency6);
        double double24 = frequency6.getCumPct(100L);
        java.lang.Class<?> wildcardClass25 = frequency6.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        frequency1.addValue(' ');
        java.util.Comparator comparator4 = null;
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency(comparator4);
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCount((java.lang.Object) 100.0f);
        double double13 = frequency7.getPct(1L);
        double double15 = frequency7.getCumPct((int) (short) -1);
        double double16 = frequency5.getCumPct((java.lang.Object) frequency7);
        double double18 = frequency5.getCumPct(10);
        long long19 = frequency5.getSumFreq();
        double double21 = frequency5.getPct((int) 'a');
        long long23 = frequency5.getCumFreq(10L);
        long long25 = frequency5.getCount((int) (short) 0);
        long long26 = frequency1.getCount((java.lang.Object) long25);
        java.util.Iterator iterator27 = frequency1.valuesIterator();
        java.util.Comparator comparator28 = null;
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency(comparator28);
        double double31 = frequency29.getCumPct((long) 10);
        double double33 = frequency29.getPct('#');
        double double35 = frequency29.getCumPct((int) '#');
        java.lang.String str36 = frequency29.toString();
        long long38 = frequency29.getCumFreq((long) '4');
        java.lang.String str39 = frequency29.toString();
        java.lang.String str40 = frequency29.toString();
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        long long46 = frequency42.getCount((java.lang.Object) 100.0f);
        double double48 = frequency42.getPct(1L);
        frequency42.clear();
        long long50 = frequency29.getCount((java.lang.Object) frequency42);
        double double52 = frequency42.getPct((java.lang.Object) 1.0d);
        long long54 = frequency42.getCount((long) 100);
        java.util.Comparator comparator55 = null;
        org.apache.commons.math.stat.Frequency frequency56 = new org.apache.commons.math.stat.Frequency(comparator55);
        long long58 = frequency56.getCount('#');
        java.util.Iterator iterator59 = frequency56.valuesIterator();
        double double60 = frequency42.getPct((java.lang.Object) frequency56);
        double double61 = frequency1.getPct((java.lang.Object) frequency56);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(iterator27);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str36, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str39, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str40, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(iterator59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        java.lang.String str18 = frequency11.toString();
        long long20 = frequency11.getCumFreq((long) '4');
        java.lang.String str21 = frequency11.toString();
        java.lang.String str22 = frequency11.toString();
        long long24 = frequency11.getCount('4');
        long long25 = frequency11.getSumFreq();
        java.lang.String str26 = frequency11.toString();
        double double27 = frequency1.getPct((java.lang.Object) str26);
        long long29 = frequency1.getCount((int) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str18, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str22, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str26, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        frequency19.addValue((long) ' ');
        double double28 = frequency19.getCumPct(0);
        frequency19.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        double double2 = frequency0.getCumPct('#');
        frequency0.addValue(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        frequency1.addValue((int) '4');
        java.lang.String str4 = frequency1.toString();
        long long5 = frequency1.getSumFreq();
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        double double11 = frequency7.getPct('#');
        frequency7.addValue((int) '4');
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        long long19 = frequency15.getCumFreq((java.lang.Object) 1.0d);
        long long21 = frequency15.getCumFreq((long) 'a');
        double double23 = frequency15.getPct((java.lang.Object) (byte) 100);
        long long24 = frequency7.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str25 = frequency7.toString();
        long long27 = frequency7.getCumFreq((int) (short) 0);
        frequency7.addValue((int) '#');
        double double30 = frequency1.getCumPct((java.lang.Object) '#');
        frequency1.addValue((java.lang.Integer) 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str4, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str25, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long23 = frequency19.getSumFreq();
        frequency19.addValue((java.lang.Integer) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((java.lang.Object) 100.0f);
        double double20 = frequency14.getPct(1L);
        frequency14.clear();
        long long22 = frequency1.getCount((java.lang.Object) frequency14);
        double double24 = frequency14.getPct((java.lang.Object) 1.0d);
        long long26 = frequency14.getCount((long) 100);
        double double28 = frequency14.getPct(' ');
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        double double34 = frequency30.getPct('#');
        java.util.Comparator comparator35 = null;
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency(comparator35);
        double double38 = frequency36.getCumPct((long) 10);
        long long40 = frequency36.getCumFreq((java.lang.Object) 1.0d);
        double double42 = frequency36.getCumPct((int) '4');
        long long43 = frequency36.getSumFreq();
        double double44 = frequency30.getCumPct((java.lang.Object) long43);
        double double46 = frequency30.getCumPct('#');
        java.util.Comparator comparator47 = null;
        org.apache.commons.math.stat.Frequency frequency48 = new org.apache.commons.math.stat.Frequency(comparator47);
        long long50 = frequency48.getCumFreq((java.lang.Object) (short) 10);
        double double51 = frequency30.getPct((java.lang.Object) frequency48);
        long long53 = frequency48.getCount(0);
        frequency48.addValue((long) ' ');
        double double57 = frequency48.getCumPct(0);
        frequency48.addValue(100);
        frequency14.addValue((java.lang.Object) 100);
        java.lang.Object obj61 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double62 = frequency14.getPct(obj61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        long long51 = frequency32.getCount('#');
        frequency1.addValue((java.lang.Object) '#');
        java.util.Iterator iterator53 = frequency1.valuesIterator();
        double double55 = frequency1.getPct((int) '4');
        java.util.Comparator comparator56 = null;
        org.apache.commons.math.stat.Frequency frequency57 = new org.apache.commons.math.stat.Frequency(comparator56);
        double double59 = frequency57.getCumPct((long) 10);
        double double61 = frequency57.getPct('#');
        java.util.Comparator comparator62 = null;
        org.apache.commons.math.stat.Frequency frequency63 = new org.apache.commons.math.stat.Frequency(comparator62);
        double double65 = frequency63.getCumPct((long) 10);
        long long67 = frequency63.getCumFreq((java.lang.Object) 1.0d);
        double double69 = frequency63.getCumPct((int) '4');
        long long70 = frequency63.getSumFreq();
        double double71 = frequency57.getCumPct((java.lang.Object) long70);
        double double72 = frequency1.getPct((java.lang.Object) long70);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(iterator53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.addValue('4');
        double double11 = frequency1.getPct((-1));
        long long12 = frequency1.getSumFreq();
        double double14 = frequency1.getCumPct('#');
        long long16 = frequency1.getCumFreq('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        java.util.Iterator iterator4 = frequency1.valuesIterator();
        java.util.Comparator comparator5 = null;
        org.apache.commons.math.stat.Frequency frequency6 = new org.apache.commons.math.stat.Frequency(comparator5);
        double double8 = frequency6.getCumPct((long) 10);
        long long10 = frequency6.getCumFreq((java.lang.Object) 1.0d);
        double double12 = frequency6.getCumPct((int) '4');
        long long13 = frequency6.getSumFreq();
        long long15 = frequency6.getCount((long) (-1));
        long long17 = frequency6.getCount('4');
        long long19 = frequency6.getCount(1);
        double double21 = frequency6.getCumPct((java.lang.Object) (short) 10);
        double double22 = frequency1.getCumPct((java.lang.Object) frequency6);
        frequency6.addValue((long) 100);
        java.lang.String str25 = frequency6.toString();
        double double27 = frequency6.getCumPct('#');
        java.util.Comparator comparator28 = null;
        org.apache.commons.math.stat.Frequency frequency29 = new org.apache.commons.math.stat.Frequency(comparator28);
        long long31 = frequency29.getCount('#');
        java.util.Iterator iterator32 = frequency29.valuesIterator();
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        double double36 = frequency34.getCumPct((long) 10);
        long long38 = frequency34.getCumFreq((java.lang.Object) 1.0d);
        double double40 = frequency34.getCumPct((int) '4');
        long long41 = frequency34.getSumFreq();
        long long43 = frequency34.getCount((long) (-1));
        long long45 = frequency34.getCount('4');
        long long47 = frequency34.getCount(1);
        double double49 = frequency34.getCumPct((java.lang.Object) (short) 10);
        double double50 = frequency29.getCumPct((java.lang.Object) frequency34);
        frequency29.addValue((java.lang.Integer) 100);
        // The following exception was thrown during execution in test generation
        try {
            frequency6.addValue((java.lang.Object) frequency29);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n" + "'", str25, "Value \t Freq. \t Pct. \t Cum Pct. \n100\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(iterator32);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.util.Comparator comparator81 = null;
        org.apache.commons.math.stat.Frequency frequency82 = new org.apache.commons.math.stat.Frequency(comparator81);
        double double84 = frequency82.getCumPct((long) 10);
        long long86 = frequency82.getCumFreq((java.lang.Object) 1.0d);
        long long88 = frequency82.getCumFreq((long) 'a');
        double double90 = frequency82.getPct((java.lang.Object) (byte) 100);
        double double92 = frequency82.getCumPct((long) (-1));
        frequency82.addValue((long) (short) 0);
        double double95 = frequency1.getPct((java.lang.Object) frequency82);
        frequency1.addValue(0L);
        long long99 = frequency1.getCumFreq(3L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 1L + "'", long99 == 1L);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        frequency1.addValue(' ');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue(1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getCumPct((-1));
        double double9 = frequency1.getPct('a');
        java.lang.String str10 = frequency1.toString();
        java.util.Comparator comparator11 = null;
        org.apache.commons.math.stat.Frequency frequency12 = new org.apache.commons.math.stat.Frequency(comparator11);
        double double14 = frequency12.getCumPct((long) 10);
        long long16 = frequency12.getCumFreq((java.lang.Object) 1.0d);
        long long18 = frequency12.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        long long24 = frequency20.getCount((int) (byte) 10);
        double double26 = frequency20.getCumPct((-1));
        double double28 = frequency20.getPct('a');
        double double30 = frequency20.getPct('4');
        double double31 = frequency12.getPct((java.lang.Object) frequency20);
        double double33 = frequency12.getPct('4');
        frequency1.addValue((java.lang.Object) double33);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str10, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        double double11 = frequency1.getPct('a');
        double double13 = frequency1.getPct(1);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        double double19 = frequency15.getPct('#');
        double double21 = frequency15.getCumPct((int) '#');
        frequency15.addValue(1);
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        double double29 = frequency25.getPct('#');
        double double31 = frequency25.getCumPct((int) '#');
        long long32 = frequency15.getCumFreq((java.lang.Object) double31);
        double double34 = frequency15.getCumPct((long) (short) 0);
        long long35 = frequency1.getCumFreq((java.lang.Object) double34);
        double double37 = frequency1.getPct(0);
        long long39 = frequency1.getCumFreq('a');
        java.lang.Class<?> wildcardClass40 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long1 = frequency0.getSumFreq();
        double double3 = frequency0.getCumPct('a');
        long long5 = frequency0.getCount((int) (short) 100);
        double double7 = frequency0.getPct('#');
        long long8 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        double double11 = frequency1.getPct('a');
        double double13 = frequency1.getPct(1);
        frequency1.addValue('a');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        java.util.Iterator iterator7 = frequency1.valuesIterator();
        double double9 = frequency1.getPct('4');
        frequency1.addValue(0L);
        double double13 = frequency1.getPct((int) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        double double11 = frequency1.getCumPct((long) (byte) 10);
        long long13 = frequency1.getCount('a');
        double double15 = frequency1.getCumPct('4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCount(0L);
        double double11 = frequency1.getPct((int) (short) 100);
        frequency1.addValue((long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        double double9 = frequency1.getPct(10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        long long32 = frequency1.getCount('a');
        double double34 = frequency1.getPct('a');
        java.lang.String str35 = frequency1.toString();
        java.lang.String str36 = frequency1.toString();
        frequency1.addValue((java.lang.Integer) 100);
        double double40 = frequency1.getCumPct(0);
        double double42 = frequency1.getCumPct('#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str35, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str36, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        frequency1.addValue((int) (short) -1);
        frequency1.addValue((long) 0);
        java.lang.Class<?> wildcardClass35 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((long) (short) 10);
        long long10 = frequency1.getSumFreq();
        double double12 = frequency1.getCumPct((java.lang.Object) (short) 100);
        long long14 = frequency1.getCumFreq(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2L + "'", long10 == 2L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long1 = frequency0.getSumFreq();
        double double3 = frequency0.getCumPct('a');
        long long5 = frequency0.getCount((int) (short) 100);
        double double7 = frequency0.getPct('#');
        double double9 = frequency0.getCumPct('a');
        double double11 = frequency0.getCumPct('a');
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((int) (byte) 10);
        double double7 = frequency1.getCumPct((-1));
        long long9 = frequency1.getCount((int) (byte) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        frequency1.addValue((int) '4');
        java.util.Iterator iterator4 = frequency1.valuesIterator();
        long long6 = frequency1.getCount((long) 100);
        java.util.Comparator comparator7 = null;
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency(comparator7);
        double double10 = frequency8.getCumPct((long) 10);
        long long12 = frequency8.getCount((java.lang.Object) 100.0f);
        frequency8.addValue((java.lang.Integer) (-1));
        frequency8.addValue((java.lang.Integer) 10);
        long long17 = frequency8.getSumFreq();
        long long19 = frequency8.getCount('#');
        long long21 = frequency8.getCount((long) (short) 0);
        long long22 = frequency1.getCumFreq((java.lang.Object) frequency8);
        frequency8.addValue((long) ' ');
        double double26 = frequency8.getPct(4L);
        long long27 = frequency8.getSumFreq();
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3L + "'", long27 == 3L);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        double double26 = frequency19.getCumPct(1);
        double double28 = frequency19.getPct('a');
        double double30 = frequency19.getPct(' ');
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        long long36 = frequency32.getCount((java.lang.Object) 100.0f);
        double double38 = frequency32.getPct(1L);
        frequency32.clear();
        long long41 = frequency32.getCumFreq((long) (byte) 1);
        double double43 = frequency32.getPct((long) '#');
        long long44 = frequency19.getCumFreq((java.lang.Object) frequency32);
        double double46 = frequency32.getCumPct((long) (short) -1);
        double double48 = frequency32.getCumPct((long) (byte) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long9 = frequency1.getCumFreq((int) (byte) 10);
        long long11 = frequency1.getCount(' ');
        frequency1.addValue((int) (short) -1);
        double double15 = frequency1.getPct('#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCumFreq((int) (byte) 10);
        double double26 = frequency19.getPct((int) (short) 10);
        frequency19.addValue((long) (byte) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        frequency1.addValue((java.lang.Integer) 1);
        double double7 = frequency1.getPct((int) (byte) -1);
        double double9 = frequency1.getCumPct(' ');
        long long11 = frequency1.getCumFreq('4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        frequency19.addValue((long) ' ');
        double double28 = frequency19.getCumPct(0);
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        long long34 = frequency30.getCount((java.lang.Object) 100.0f);
        double double36 = frequency30.getPct(1L);
        long long38 = frequency30.getCumFreq((long) 0);
        double double40 = frequency30.getPct('a');
        double double42 = frequency30.getPct(1);
        double double44 = frequency30.getCumPct((long) (byte) 0);
        long long45 = frequency19.getCumFreq((java.lang.Object) frequency30);
        frequency19.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        double double11 = frequency1.getPct('a');
        double double13 = frequency1.getPct(1);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        double double19 = frequency15.getPct('#');
        double double21 = frequency15.getCumPct((int) '#');
        frequency15.addValue(1);
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        double double29 = frequency25.getPct('#');
        double double31 = frequency25.getCumPct((int) '#');
        long long32 = frequency15.getCumFreq((java.lang.Object) double31);
        double double34 = frequency15.getCumPct((long) (short) 0);
        long long35 = frequency1.getCumFreq((java.lang.Object) double34);
        frequency1.addValue(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        long long24 = frequency20.getCount((java.lang.Object) 100.0f);
        frequency20.addValue((java.lang.Integer) (-1));
        frequency20.addValue((java.lang.Integer) 10);
        double double30 = frequency20.getCumPct((long) (byte) 10);
        long long31 = frequency1.getCumFreq((java.lang.Object) frequency20);
        java.util.Comparator comparator32 = null;
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency(comparator32);
        double double35 = frequency33.getCumPct((long) 10);
        long long37 = frequency33.getCount((java.lang.Object) 100.0f);
        frequency33.addValue((java.lang.Integer) (-1));
        frequency33.addValue((java.lang.Integer) 10);
        frequency33.addValue((int) (byte) 1);
        double double44 = frequency20.getPct((java.lang.Object) (byte) 1);
        long long46 = frequency20.getCumFreq('4');
        java.util.Comparator comparator47 = null;
        org.apache.commons.math.stat.Frequency frequency48 = new org.apache.commons.math.stat.Frequency(comparator47);
        double double50 = frequency48.getCumPct((long) 10);
        double double52 = frequency48.getPct('#');
        double double54 = frequency48.getCumPct((int) '#');
        frequency48.addValue(1);
        java.util.Comparator comparator57 = null;
        org.apache.commons.math.stat.Frequency frequency58 = new org.apache.commons.math.stat.Frequency(comparator57);
        double double60 = frequency58.getCumPct((long) 10);
        double double62 = frequency58.getPct('#');
        double double64 = frequency58.getCumPct((int) '#');
        long long65 = frequency48.getCumFreq((java.lang.Object) double64);
        double double67 = frequency48.getCumPct((long) (short) 0);
        java.util.Iterator iterator68 = frequency48.valuesIterator();
        long long69 = frequency20.getCumFreq((java.lang.Object) frequency48);
        java.lang.Class<?> wildcardClass70 = frequency48.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(iterator68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        double double26 = frequency19.getCumPct(1);
        double double28 = frequency19.getPct('a');
        double double30 = frequency19.getPct((long) (byte) 100);
        frequency19.addValue('4');
        double double34 = frequency19.getCumPct((long) (short) 1);
        double double36 = frequency19.getPct((int) (short) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.util.Comparator comparator81 = null;
        org.apache.commons.math.stat.Frequency frequency82 = new org.apache.commons.math.stat.Frequency(comparator81);
        double double84 = frequency82.getCumPct((long) 10);
        long long86 = frequency82.getCumFreq((java.lang.Object) 1.0d);
        long long88 = frequency82.getCumFreq((long) 'a');
        double double90 = frequency82.getPct((java.lang.Object) (byte) 100);
        double double92 = frequency82.getCumPct((long) (-1));
        frequency82.addValue((long) (short) 0);
        double double95 = frequency1.getPct((java.lang.Object) frequency82);
        java.util.Iterator iterator96 = frequency82.valuesIterator();
        long long98 = frequency82.getCumFreq((long) '4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertNotNull(iterator96);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1L + "'", long98 == 1L);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        frequency1.addValue((int) '4');
        java.util.Iterator iterator4 = frequency1.valuesIterator();
        long long6 = frequency1.getCount((long) 100);
        java.util.Comparator comparator7 = null;
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency(comparator7);
        double double10 = frequency8.getCumPct((long) 10);
        long long12 = frequency8.getCount((java.lang.Object) 100.0f);
        frequency8.addValue((java.lang.Integer) (-1));
        frequency8.addValue((java.lang.Integer) 10);
        long long17 = frequency8.getSumFreq();
        long long19 = frequency8.getCount('#');
        long long21 = frequency8.getCount((long) (short) 0);
        long long22 = frequency1.getCumFreq((java.lang.Object) frequency8);
        frequency8.addValue((long) ' ');
        double double26 = frequency8.getPct(4L);
        // The following exception was thrown during execution in test generation
        try {
            frequency8.addValue('a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        long long8 = frequency1.getCumFreq('4');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        double double14 = frequency10.getPct('#');
        double double16 = frequency10.getCumPct((int) '#');
        frequency10.addValue(1);
        double double20 = frequency10.getPct((-1L));
        frequency10.addValue((long) (byte) -1);
        double double23 = frequency1.getPct((java.lang.Object) (byte) -1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        frequency1.addValue((long) (byte) 0);
        long long11 = frequency1.getSumFreq();
        java.lang.Object obj12 = null;
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue(obj12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        double double24 = frequency19.getCumPct(0L);
        double double26 = frequency19.getPct('4');
        double double28 = frequency19.getCumPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        frequency0.addValue((long) (short) 100);
        frequency0.addValue((java.lang.Integer) (-1));
        long long6 = frequency0.getCount((int) '#');
        double double8 = frequency0.getPct((long) (byte) 10);
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        long long12 = frequency10.getCount('#');
        frequency10.addValue('a');
        // The following exception was thrown during execution in test generation
        try {
            frequency0.addValue((java.lang.Object) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq(2L);
        frequency1.clear();
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        long long19 = frequency15.getCount((java.lang.Object) 100.0f);
        double double21 = frequency15.getPct(1L);
        frequency15.clear();
        frequency15.addValue((long) (byte) 0);
        long long25 = frequency1.getCumFreq((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass26 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator4 = null;
        org.apache.commons.math.stat.Frequency frequency5 = new org.apache.commons.math.stat.Frequency(comparator4);
        double double7 = frequency5.getCumPct((long) 10);
        double double9 = frequency5.getPct('#');
        double double11 = frequency5.getCumPct((int) '#');
        frequency5.addValue(1);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        double double19 = frequency15.getPct('#');
        double double21 = frequency15.getCumPct((int) '#');
        long long22 = frequency5.getCumFreq((java.lang.Object) double21);
        java.lang.Class<?> wildcardClass23 = frequency5.getClass();
        double double24 = frequency1.getPct((java.lang.Object) wildcardClass23);
        frequency1.addValue((int) (byte) 0);
        java.util.Comparator comparator27 = null;
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency(comparator27);
        double double30 = frequency28.getCumPct((long) 10);
        double double32 = frequency28.getPct('#');
        frequency28.addValue((int) '4');
        java.util.Comparator comparator35 = null;
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency(comparator35);
        double double38 = frequency36.getCumPct((long) 10);
        double double40 = frequency36.getPct('#');
        java.util.Iterator iterator41 = frequency36.valuesIterator();
        double double43 = frequency36.getPct('#');
        long long45 = frequency36.getCumFreq((java.lang.Object) 100L);
        frequency28.addValue((java.lang.Object) long45);
        long long48 = frequency28.getCount('#');
        double double50 = frequency28.getPct('#');
        frequency28.addValue((long) ' ');
        double double53 = frequency1.getPct((java.lang.Object) frequency28);
        double double55 = frequency1.getCumPct((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        long long51 = frequency32.getCount('#');
        frequency1.addValue((java.lang.Object) '#');
        long long54 = frequency1.getCount((long) (byte) 1);
        frequency1.clear();
        frequency1.addValue((int) '#');
        java.util.Comparator comparator58 = null;
        org.apache.commons.math.stat.Frequency frequency59 = new org.apache.commons.math.stat.Frequency(comparator58);
        long long61 = frequency59.getCount('#');
        java.util.Iterator iterator62 = frequency59.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) frequency59);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(iterator62);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        double double18 = frequency1.getPct(' ');
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        double double24 = frequency20.getPct('#');
        double double26 = frequency20.getCumPct((int) '#');
        frequency20.addValue(1);
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        double double34 = frequency30.getPct('#');
        double double36 = frequency30.getCumPct((int) '#');
        long long37 = frequency20.getCumFreq((java.lang.Object) double36);
        double double39 = frequency20.getCumPct((long) (short) 0);
        double double40 = frequency1.getPct((java.lang.Object) frequency20);
        long long42 = frequency1.getCount(0);
        java.util.Comparator comparator43 = null;
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency(comparator43);
        double double46 = frequency44.getCumPct((long) 10);
        double double48 = frequency44.getPct('#');
        java.util.Comparator comparator49 = null;
        org.apache.commons.math.stat.Frequency frequency50 = new org.apache.commons.math.stat.Frequency(comparator49);
        double double52 = frequency50.getCumPct((long) 10);
        long long54 = frequency50.getCumFreq((java.lang.Object) 1.0d);
        double double56 = frequency50.getCumPct((int) '4');
        long long57 = frequency50.getSumFreq();
        double double58 = frequency44.getCumPct((java.lang.Object) long57);
        double double60 = frequency44.getCumPct((long) (short) 0);
        frequency44.addValue(0L);
        frequency44.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Object) (-1));
        long long67 = frequency1.getCount(' ');
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        long long24 = frequency20.getCount((java.lang.Object) 100.0f);
        frequency20.addValue((java.lang.Integer) (-1));
        frequency20.addValue((java.lang.Integer) 10);
        double double30 = frequency20.getCumPct((long) (byte) 10);
        long long31 = frequency1.getCumFreq((java.lang.Object) frequency20);
        java.util.Comparator comparator32 = null;
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency(comparator32);
        double double35 = frequency33.getCumPct((long) 10);
        long long37 = frequency33.getCount((java.lang.Object) 100.0f);
        frequency33.addValue((java.lang.Integer) (-1));
        frequency33.addValue((java.lang.Integer) 10);
        frequency33.addValue((int) (byte) 1);
        double double44 = frequency20.getPct((java.lang.Object) (byte) 1);
        long long46 = frequency20.getCumFreq('4');
        java.util.Comparator comparator47 = null;
        org.apache.commons.math.stat.Frequency frequency48 = new org.apache.commons.math.stat.Frequency(comparator47);
        double double50 = frequency48.getCumPct((long) 10);
        double double52 = frequency48.getPct('#');
        double double54 = frequency48.getCumPct((int) '#');
        frequency48.addValue(1);
        java.util.Comparator comparator57 = null;
        org.apache.commons.math.stat.Frequency frequency58 = new org.apache.commons.math.stat.Frequency(comparator57);
        double double60 = frequency58.getCumPct((long) 10);
        double double62 = frequency58.getPct('#');
        double double64 = frequency58.getCumPct((int) '#');
        long long65 = frequency48.getCumFreq((java.lang.Object) double64);
        double double67 = frequency48.getCumPct((long) (short) 0);
        java.util.Iterator iterator68 = frequency48.valuesIterator();
        long long69 = frequency20.getCumFreq((java.lang.Object) frequency48);
        java.util.Comparator comparator70 = null;
        org.apache.commons.math.stat.Frequency frequency71 = new org.apache.commons.math.stat.Frequency(comparator70);
        long long73 = frequency71.getCumFreq((java.lang.Object) (short) 10);
        java.lang.String str74 = frequency71.toString();
        long long75 = frequency48.getCumFreq((java.lang.Object) str74);
        double double77 = frequency48.getPct(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(iterator68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str74, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        long long10 = frequency1.getCumFreq((java.lang.Object) 100L);
        double double12 = frequency1.getPct('4');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long14 = frequency13.getSumFreq();
        long long16 = frequency13.getCumFreq((long) 1);
        double double17 = frequency1.getCumPct((java.lang.Object) frequency13);
        frequency1.addValue((long) (short) 0);
        long long21 = frequency1.getCumFreq((int) (byte) 0);
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCumFreq((java.lang.Object) 1.0d);
        double double29 = frequency23.getCumPct((int) '4');
        long long30 = frequency23.getSumFreq();
        double double32 = frequency23.getPct('a');
        long long34 = frequency23.getCumFreq('a');
        long long36 = frequency23.getCount(' ');
        java.util.Comparator comparator37 = null;
        org.apache.commons.math.stat.Frequency frequency38 = new org.apache.commons.math.stat.Frequency(comparator37);
        double double40 = frequency38.getCumPct((long) 10);
        double double42 = frequency38.getPct('#');
        double double44 = frequency38.getCumPct((int) '#');
        java.lang.String str45 = frequency38.toString();
        long long47 = frequency38.getCumFreq((long) '4');
        java.lang.String str48 = frequency38.toString();
        java.lang.String str49 = frequency38.toString();
        java.util.Comparator comparator50 = null;
        org.apache.commons.math.stat.Frequency frequency51 = new org.apache.commons.math.stat.Frequency(comparator50);
        double double53 = frequency51.getCumPct((long) 10);
        long long55 = frequency51.getCount((java.lang.Object) 100.0f);
        double double57 = frequency51.getPct(1L);
        frequency51.clear();
        long long59 = frequency38.getCount((java.lang.Object) frequency51);
        frequency51.addValue((int) (short) -1);
        double double62 = frequency23.getPct((java.lang.Object) (short) -1);
        long long63 = frequency1.getCount((java.lang.Object) double62);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str45, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str48, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str49, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long10 = frequency1.getSumFreq();
        long long12 = frequency1.getCount('#');
        long long14 = frequency1.getCount((long) (short) 0);
        java.util.Iterator iterator15 = frequency1.valuesIterator();
        long long17 = frequency1.getCumFreq((int) 'a');
        java.lang.Object obj18 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = frequency1.getCumFreq(obj18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2L + "'", long10 == 2L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        double double11 = frequency1.getPct('a');
        double double13 = frequency1.getPct(1);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        double double19 = frequency15.getPct('#');
        double double21 = frequency15.getCumPct((int) '#');
        frequency15.addValue(1);
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        double double29 = frequency25.getPct('#');
        double double31 = frequency25.getCumPct((int) '#');
        long long32 = frequency15.getCumFreq((java.lang.Object) double31);
        double double34 = frequency15.getCumPct((long) (short) 0);
        long long35 = frequency1.getCumFreq((java.lang.Object) double34);
        java.util.Comparator comparator36 = null;
        org.apache.commons.math.stat.Frequency frequency37 = new org.apache.commons.math.stat.Frequency(comparator36);
        double double39 = frequency37.getCumPct((long) 10);
        double double41 = frequency37.getPct('#');
        java.util.Comparator comparator42 = null;
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency(comparator42);
        double double45 = frequency43.getCumPct((long) 10);
        long long47 = frequency43.getCumFreq((java.lang.Object) 1.0d);
        double double49 = frequency43.getCumPct((int) '4');
        long long50 = frequency43.getSumFreq();
        double double51 = frequency37.getCumPct((java.lang.Object) long50);
        double double53 = frequency37.getCumPct('#');
        java.util.Comparator comparator54 = null;
        org.apache.commons.math.stat.Frequency frequency55 = new org.apache.commons.math.stat.Frequency(comparator54);
        long long57 = frequency55.getCumFreq((java.lang.Object) (short) 10);
        double double58 = frequency37.getPct((java.lang.Object) frequency55);
        long long60 = frequency37.getCumFreq(10);
        long long61 = frequency37.getSumFreq();
        double double62 = frequency1.getCumPct((java.lang.Object) long61);
        frequency1.addValue((java.lang.Integer) 100);
        java.lang.Class<?> wildcardClass65 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        long long32 = frequency1.getCount('a');
        double double34 = frequency1.getPct('a');
        java.util.Comparator comparator35 = null;
        org.apache.commons.math.stat.Frequency frequency36 = new org.apache.commons.math.stat.Frequency(comparator35);
        double double38 = frequency36.getCumPct((long) 10);
        long long40 = frequency36.getCount((java.lang.Object) 100.0f);
        double double42 = frequency36.getCumPct((java.lang.Object) false);
        java.util.Comparator comparator43 = null;
        org.apache.commons.math.stat.Frequency frequency44 = new org.apache.commons.math.stat.Frequency(comparator43);
        double double46 = frequency44.getCumPct((long) 10);
        long long48 = frequency44.getCumFreq((java.lang.Object) 1.0d);
        double double50 = frequency44.getCumPct((int) '4');
        long long51 = frequency44.getSumFreq();
        long long53 = frequency44.getCount((long) (-1));
        long long55 = frequency44.getCount('4');
        long long57 = frequency44.getCount((java.lang.Object) 10.0f);
        long long58 = frequency36.getCount((java.lang.Object) 10.0f);
        double double59 = frequency1.getPct((java.lang.Object) long58);
        double double61 = frequency1.getPct(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        double double10 = frequency1.getCumPct(' ');
        double double12 = frequency1.getCumPct((int) ' ');
        frequency1.addValue((java.lang.Integer) 100);
        frequency1.addValue((java.lang.Integer) 1);
        java.util.Iterator iterator17 = frequency1.valuesIterator();
        long long19 = frequency1.getCount(1);
        long long21 = frequency1.getCumFreq('#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) 'a');
        java.util.Comparator comparator12 = null;
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency(comparator12);
        double double15 = frequency13.getCumPct((long) 10);
        long long17 = frequency13.getCount((java.lang.Object) 100.0f);
        frequency13.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Object) (-1));
        frequency1.addValue((java.lang.Integer) 1);
        frequency1.addValue((java.lang.Integer) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        frequency19.addValue((long) ' ');
        double double28 = frequency19.getCumPct(0);
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        long long34 = frequency30.getCount((java.lang.Object) 100.0f);
        double double36 = frequency30.getPct(1L);
        long long38 = frequency30.getCumFreq((long) 0);
        double double40 = frequency30.getPct('a');
        double double42 = frequency30.getPct(1);
        double double44 = frequency30.getCumPct((long) (byte) 0);
        long long45 = frequency19.getCumFreq((java.lang.Object) frequency30);
        long long47 = frequency30.getCumFreq('#');
        long long49 = frequency30.getCount((int) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        long long24 = frequency20.getCount((java.lang.Object) 100.0f);
        frequency20.addValue((java.lang.Integer) (-1));
        frequency20.addValue((java.lang.Integer) 10);
        double double30 = frequency20.getCumPct((long) (byte) 10);
        long long31 = frequency1.getCumFreq((java.lang.Object) frequency20);
        java.util.Comparator comparator32 = null;
        org.apache.commons.math.stat.Frequency frequency33 = new org.apache.commons.math.stat.Frequency(comparator32);
        double double35 = frequency33.getCumPct((long) 10);
        long long37 = frequency33.getCount((java.lang.Object) 100.0f);
        frequency33.addValue((java.lang.Integer) (-1));
        frequency33.addValue((java.lang.Integer) 10);
        frequency33.addValue((int) (byte) 1);
        double double44 = frequency20.getPct((java.lang.Object) (byte) 1);
        long long46 = frequency20.getCumFreq('4');
        java.util.Comparator comparator47 = null;
        org.apache.commons.math.stat.Frequency frequency48 = new org.apache.commons.math.stat.Frequency(comparator47);
        double double50 = frequency48.getCumPct((long) 10);
        double double52 = frequency48.getPct('#');
        double double54 = frequency48.getCumPct((int) '#');
        frequency48.addValue(1);
        java.util.Comparator comparator57 = null;
        org.apache.commons.math.stat.Frequency frequency58 = new org.apache.commons.math.stat.Frequency(comparator57);
        double double60 = frequency58.getCumPct((long) 10);
        double double62 = frequency58.getPct('#');
        double double64 = frequency58.getCumPct((int) '#');
        long long65 = frequency48.getCumFreq((java.lang.Object) double64);
        double double67 = frequency48.getCumPct((long) (short) 0);
        java.util.Iterator iterator68 = frequency48.valuesIterator();
        long long69 = frequency20.getCumFreq((java.lang.Object) frequency48);
        long long71 = frequency20.getCumFreq(' ');
        java.util.Comparator comparator72 = null;
        org.apache.commons.math.stat.Frequency frequency73 = new org.apache.commons.math.stat.Frequency(comparator72);
        double double75 = frequency73.getCumPct((long) 10);
        long long77 = frequency73.getCount((java.lang.Object) 100.0f);
        frequency73.addValue((java.lang.Integer) (-1));
        frequency73.addValue((java.lang.Integer) 10);
        frequency73.addValue((int) (byte) 1);
        double double85 = frequency73.getPct((int) (byte) 1);
        long long87 = frequency73.getCumFreq((long) (short) 1);
        double double89 = frequency73.getCumPct(100L);
        // The following exception was thrown during execution in test generation
        try {
            frequency20.addValue((java.lang.Object) frequency73);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(iterator68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.3333333333333333d + "'", double85 == 0.3333333333333333d);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 2L + "'", long87 == 2L);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0d + "'", double89 == 1.0d);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((long) 'a');
        double double9 = frequency1.getPct((java.lang.Object) (byte) 100);
        double double11 = frequency1.getCumPct((long) (-1));
        frequency1.addValue((long) (short) 0);
        long long14 = frequency1.getSumFreq();
        double double16 = frequency1.getCumPct((int) (short) -1);
        double double18 = frequency1.getCumPct(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        frequency1.addValue(' ');
        long long5 = frequency1.getCumFreq((int) ' ');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCount((java.lang.Object) 100.0f);
        double double13 = frequency7.getPct(1L);
        long long15 = frequency7.getCumFreq((long) 0);
        double double17 = frequency7.getPct('a');
        double double19 = frequency7.getPct(1);
        java.util.Comparator comparator20 = null;
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency(comparator20);
        double double23 = frequency21.getCumPct((long) 10);
        double double25 = frequency21.getPct('#');
        double double27 = frequency21.getCumPct((int) '#');
        frequency21.addValue(1);
        java.util.Comparator comparator30 = null;
        org.apache.commons.math.stat.Frequency frequency31 = new org.apache.commons.math.stat.Frequency(comparator30);
        double double33 = frequency31.getCumPct((long) 10);
        double double35 = frequency31.getPct('#');
        double double37 = frequency31.getCumPct((int) '#');
        long long38 = frequency21.getCumFreq((java.lang.Object) double37);
        double double40 = frequency21.getCumPct((long) (short) 0);
        long long41 = frequency7.getCumFreq((java.lang.Object) double40);
        java.util.Iterator iterator42 = frequency7.valuesIterator();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((java.lang.Object) iterator42);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(iterator42);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        long long32 = frequency1.getCount('a');
        double double34 = frequency1.getPct('a');
        java.lang.String str35 = frequency1.toString();
        frequency1.clear();
        frequency1.addValue((java.lang.Integer) (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str35, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCount(0);
        double double26 = frequency19.getCumPct(1);
        double double28 = frequency19.getPct('a');
        double double30 = frequency19.getPct(' ');
        java.lang.String str31 = frequency19.toString();
        java.lang.String str32 = frequency19.toString();
        double double34 = frequency19.getPct((long) 0);
        double double36 = frequency19.getCumPct((long) 1);
        java.lang.Class<?> wildcardClass37 = frequency19.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str31, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str32, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        frequency1.addValue((int) (byte) 1);
        double double13 = frequency1.getPct((int) (byte) 1);
        java.lang.String str14 = frequency1.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.3333333333333333d + "'", double13 == 0.3333333333333333d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n1\t1\t33%\t67%\n10\t1\t33%\t100%\n" + "'", str14, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t33%\t33%\n1\t1\t33%\t67%\n10\t1\t33%\t100%\n");
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        frequency1.addValue('a');
        long long24 = frequency1.getSumFreq();
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        double double12 = frequency1.getCumPct((int) (short) 100);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((int) (byte) 10);
        double double20 = frequency14.getPct((long) '#');
        java.lang.String str21 = frequency14.toString();
        long long22 = frequency1.getCount((java.lang.Object) frequency14);
        long long24 = frequency1.getCount((long) 1);
        long long26 = frequency1.getCumFreq('a');
        java.lang.String str27 = frequency1.toString();
        double double29 = frequency1.getCumPct((int) (short) -1);
        java.util.Iterator iterator30 = frequency1.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str27, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(iterator30);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        double double12 = frequency1.getCumPct((int) (short) 100);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((int) (byte) 10);
        double double20 = frequency14.getPct((long) '#');
        java.lang.String str21 = frequency14.toString();
        long long22 = frequency1.getCount((java.lang.Object) frequency14);
        long long24 = frequency1.getCount((long) 1);
        long long26 = frequency1.getCumFreq('a');
        java.lang.String str27 = frequency1.toString();
        double double29 = frequency1.getCumPct((int) (short) -1);
        double double31 = frequency1.getPct('#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str27, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        long long24 = frequency19.getCumFreq((int) (byte) 10);
        frequency19.addValue((long) ' ');
        long long28 = frequency19.getCumFreq('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCount((int) (byte) 0);
        long long11 = frequency1.getCount((long) (byte) -1);
        long long13 = frequency1.getCount((long) (byte) 10);
        double double15 = frequency1.getPct((int) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        long long32 = frequency1.getCount('a');
        double double34 = frequency1.getPct('a');
        java.lang.String str35 = frequency1.toString();
        java.lang.String str36 = frequency1.toString();
        frequency1.addValue(' ');
        long long40 = frequency1.getCumFreq(' ');
        long long42 = frequency1.getCumFreq(0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str35, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str36, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCumFreq(100L);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        frequency11.addValue(1);
        java.util.Comparator comparator20 = null;
        org.apache.commons.math.stat.Frequency frequency21 = new org.apache.commons.math.stat.Frequency(comparator20);
        double double23 = frequency21.getCumPct((long) 10);
        double double25 = frequency21.getPct('#');
        double double27 = frequency21.getCumPct((int) '#');
        long long28 = frequency11.getCumFreq((java.lang.Object) double27);
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        long long34 = frequency30.getCount((java.lang.Object) 100.0f);
        frequency30.addValue((java.lang.Integer) (-1));
        frequency30.addValue((java.lang.Integer) 10);
        double double40 = frequency30.getCumPct((long) (byte) 10);
        long long41 = frequency11.getCumFreq((java.lang.Object) frequency30);
        java.util.Comparator comparator42 = null;
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency(comparator42);
        double double45 = frequency43.getCumPct((long) 10);
        long long47 = frequency43.getCount((java.lang.Object) 100.0f);
        frequency43.addValue((java.lang.Integer) (-1));
        frequency43.addValue((java.lang.Integer) 10);
        frequency43.addValue((int) (byte) 1);
        double double54 = frequency30.getPct((java.lang.Object) (byte) 1);
        long long56 = frequency30.getCumFreq('4');
        long long57 = frequency1.getCount((java.lang.Object) '4');
        frequency1.addValue((java.lang.Integer) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        long long1 = frequency0.getSumFreq();
        java.util.Iterator iterator2 = frequency0.valuesIterator();
        double double4 = frequency0.getPct(' ');
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(iterator2);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        java.util.Comparator comparator1 = null;
        org.apache.commons.math.stat.Frequency frequency2 = new org.apache.commons.math.stat.Frequency(comparator1);
        double double4 = frequency2.getCumPct((long) 10);
        long long6 = frequency2.getCumFreq((java.lang.Object) 1.0d);
        double double8 = frequency2.getCumPct((int) '4');
        long long9 = frequency2.getSumFreq();
        long long11 = frequency2.getCount((long) (-1));
        long long13 = frequency2.getCount('4');
        long long15 = frequency2.getCount(1);
        double double16 = frequency0.getPct((java.lang.Object) 1);
        java.lang.Object obj17 = null;
        double double18 = frequency0.getCumPct(obj17);
        long long20 = frequency0.getCumFreq((int) ' ');
        java.lang.Class<?> wildcardClass21 = frequency0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        java.util.Comparator comparator2 = null;
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency(comparator2);
        double double5 = frequency3.getCumPct((long) 10);
        long long7 = frequency3.getCount((java.lang.Object) 100.0f);
        double double9 = frequency3.getPct(1L);
        double double11 = frequency3.getCumPct((int) (short) -1);
        double double12 = frequency1.getCumPct((java.lang.Object) frequency3);
        double double14 = frequency3.getCumPct(0);
        java.util.Iterator iterator15 = frequency3.valuesIterator();
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(iterator15);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        java.util.Iterator iterator4 = frequency1.valuesIterator();
        double double6 = frequency1.getCumPct((int) ' ');
        double double8 = frequency1.getPct('#');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        org.apache.commons.math.stat.Frequency frequency2 = new org.apache.commons.math.stat.Frequency();
        long long3 = frequency2.getSumFreq();
        double double4 = frequency1.getCumPct((java.lang.Object) frequency2);
        frequency1.addValue('a');
        java.lang.String str7 = frequency1.toString();
        long long9 = frequency1.getCount('#');
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n" + "'", str7, "Value \t Freq. \t Pct. \t Cum Pct. \na\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        frequency1.addValue((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            frequency1.addValue('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getCumPct((long) (-1));
        long long9 = frequency1.getCumFreq('#');
        long long11 = frequency1.getCount((int) '#');
        java.lang.String str12 = frequency1.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        double double7 = frequency1.getCumPct((int) '4');
        long long8 = frequency1.getSumFreq();
        long long10 = frequency1.getCount((long) (-1));
        long long12 = frequency1.getCount('4');
        long long14 = frequency1.getCount(1);
        double double16 = frequency1.getCumPct((java.lang.Object) (short) 10);
        java.util.Comparator comparator17 = null;
        org.apache.commons.math.stat.Frequency frequency18 = new org.apache.commons.math.stat.Frequency(comparator17);
        double double20 = frequency18.getCumPct((long) 10);
        long long22 = frequency18.getCount((java.lang.Object) 100.0f);
        double double24 = frequency18.getPct(1L);
        long long26 = frequency18.getCumFreq((long) 0);
        double double28 = frequency18.getPct('a');
        double double30 = frequency18.getPct(1);
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        double double34 = frequency32.getCumPct((long) 10);
        double double36 = frequency32.getPct('#');
        double double38 = frequency32.getCumPct((int) '#');
        frequency32.addValue(1);
        java.util.Comparator comparator41 = null;
        org.apache.commons.math.stat.Frequency frequency42 = new org.apache.commons.math.stat.Frequency(comparator41);
        double double44 = frequency42.getCumPct((long) 10);
        double double46 = frequency42.getPct('#');
        double double48 = frequency42.getCumPct((int) '#');
        long long49 = frequency32.getCumFreq((java.lang.Object) double48);
        double double51 = frequency32.getCumPct((long) (short) 0);
        long long52 = frequency18.getCumFreq((java.lang.Object) double51);
        java.util.Comparator comparator53 = null;
        org.apache.commons.math.stat.Frequency frequency54 = new org.apache.commons.math.stat.Frequency(comparator53);
        double double56 = frequency54.getCumPct((long) 10);
        double double58 = frequency54.getPct('#');
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        long long64 = frequency60.getCumFreq((java.lang.Object) 1.0d);
        double double66 = frequency60.getCumPct((int) '4');
        long long67 = frequency60.getSumFreq();
        double double68 = frequency54.getCumPct((java.lang.Object) long67);
        double double70 = frequency54.getCumPct('#');
        java.util.Comparator comparator71 = null;
        org.apache.commons.math.stat.Frequency frequency72 = new org.apache.commons.math.stat.Frequency(comparator71);
        long long74 = frequency72.getCumFreq((java.lang.Object) (short) 10);
        double double75 = frequency54.getPct((java.lang.Object) frequency72);
        long long77 = frequency54.getCumFreq(10);
        long long78 = frequency54.getSumFreq();
        double double79 = frequency18.getCumPct((java.lang.Object) long78);
        long long80 = frequency1.getCumFreq((java.lang.Object) double79);
        java.lang.Object obj81 = null;
        double double82 = frequency1.getCumPct(obj81);
        java.util.Iterator iterator83 = frequency1.valuesIterator();
        java.util.Iterator iterator84 = frequency1.valuesIterator();
        double double86 = frequency1.getCumPct('a');
        frequency1.clear();
        java.lang.Object obj88 = null;
        long long89 = frequency1.getCumFreq(obj88);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(iterator83);
        org.junit.Assert.assertNotNull(iterator84);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        frequency1.addValue((java.lang.Integer) (-1));
        frequency1.addValue((java.lang.Integer) 10);
        long long11 = frequency1.getCumFreq((int) 'a');
        frequency1.clear();
        double double14 = frequency1.getCumPct('a');
        double double16 = frequency1.getPct(' ');
        double double18 = frequency1.getCumPct((long) 100);
        frequency1.addValue((java.lang.Integer) (-1));
        java.lang.String str21 = frequency1.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n" + "'", str21, "Value \t Freq. \t Pct. \t Cum Pct. \n-1\t1\t100%\t100%\n");
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        long long26 = frequency22.getCount((java.lang.Object) 100.0f);
        frequency22.addValue((java.lang.Integer) (-1));
        frequency22.addValue((java.lang.Integer) 10);
        long long32 = frequency22.getCumFreq((int) 'a');
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        double double36 = frequency34.getCumPct((long) 10);
        long long38 = frequency34.getCount((java.lang.Object) 100.0f);
        frequency34.addValue((java.lang.Integer) (-1));
        frequency22.addValue((java.lang.Object) (-1));
        long long42 = frequency1.getCount((java.lang.Object) frequency22);
        double double44 = frequency22.getPct(' ');
        long long46 = frequency22.getCount((int) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        double double11 = frequency1.getPct((-1L));
        double double13 = frequency1.getCumPct((int) (byte) -1);
        frequency1.clear();
        frequency1.addValue((long) (byte) 1);
        double double18 = frequency1.getCumPct(0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        double double11 = frequency1.getPct('a');
        double double13 = frequency1.getPct(1);
        java.util.Comparator comparator14 = null;
        org.apache.commons.math.stat.Frequency frequency15 = new org.apache.commons.math.stat.Frequency(comparator14);
        double double17 = frequency15.getCumPct((long) 10);
        double double19 = frequency15.getPct('#');
        double double21 = frequency15.getCumPct((int) '#');
        frequency15.addValue(1);
        java.util.Comparator comparator24 = null;
        org.apache.commons.math.stat.Frequency frequency25 = new org.apache.commons.math.stat.Frequency(comparator24);
        double double27 = frequency25.getCumPct((long) 10);
        double double29 = frequency25.getPct('#');
        double double31 = frequency25.getCumPct((int) '#');
        long long32 = frequency15.getCumFreq((java.lang.Object) double31);
        double double34 = frequency15.getCumPct((long) (short) 0);
        long long35 = frequency1.getCumFreq((java.lang.Object) double34);
        long long37 = frequency1.getCount('#');
        long long39 = frequency1.getCumFreq((int) (short) 1);
        long long41 = frequency1.getCount((long) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        java.util.Comparator comparator9 = null;
        org.apache.commons.math.stat.Frequency frequency10 = new org.apache.commons.math.stat.Frequency(comparator9);
        double double12 = frequency10.getCumPct((long) 10);
        long long14 = frequency10.getCount((java.lang.Object) 100.0f);
        double double16 = frequency10.getPct(1L);
        long long18 = frequency10.getCumFreq((long) 0);
        double double20 = frequency10.getPct('a');
        double double21 = frequency1.getPct((java.lang.Object) 'a');
        java.util.Comparator comparator22 = null;
        org.apache.commons.math.stat.Frequency frequency23 = new org.apache.commons.math.stat.Frequency(comparator22);
        double double25 = frequency23.getCumPct((long) 10);
        long long27 = frequency23.getCount((java.lang.Object) 100.0f);
        long long29 = frequency23.getCumFreq((long) 0);
        double double30 = frequency1.getCumPct((java.lang.Object) frequency23);
        long long32 = frequency1.getCount('a');
        long long34 = frequency1.getCount((int) (short) 1);
        double double36 = frequency1.getCumPct(' ');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.apache.commons.math.stat.Frequency frequency0 = new org.apache.commons.math.stat.Frequency();
        frequency0.addValue((long) (short) 100);
        long long4 = frequency0.getCumFreq((long) (byte) 1);
        long long6 = frequency0.getCount('4');
        java.util.Comparator comparator7 = null;
        org.apache.commons.math.stat.Frequency frequency8 = new org.apache.commons.math.stat.Frequency(comparator7);
        double double10 = frequency8.getCumPct((long) 10);
        long long12 = frequency8.getCumFreq((java.lang.Object) 1.0d);
        double double14 = frequency8.getCumPct((int) '4');
        long long15 = frequency8.getSumFreq();
        long long17 = frequency8.getCount((long) (-1));
        long long19 = frequency8.getCount('4');
        frequency8.addValue((long) (byte) 1);
        double double23 = frequency8.getCumPct((long) (short) 0);
        java.util.Iterator iterator24 = frequency8.valuesIterator();
        java.util.Iterator iterator25 = frequency8.valuesIterator();
        long long26 = frequency0.getCount((java.lang.Object) frequency8);
        long long27 = frequency0.getSumFreq();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Iterator iterator6 = frequency1.valuesIterator();
        double double8 = frequency1.getPct('#');
        long long10 = frequency1.getCumFreq((java.lang.Object) 100L);
        double double12 = frequency1.getPct('4');
        org.apache.commons.math.stat.Frequency frequency13 = new org.apache.commons.math.stat.Frequency();
        long long14 = frequency13.getSumFreq();
        long long16 = frequency13.getCumFreq((long) 1);
        double double17 = frequency1.getCumPct((java.lang.Object) frequency13);
        frequency1.addValue((long) (short) 0);
        long long21 = frequency1.getCumFreq(0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        double double9 = frequency1.getCumPct((int) (byte) 0);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        frequency11.addValue((int) '4');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        double double21 = frequency19.getCumPct((long) 10);
        long long23 = frequency19.getCumFreq((java.lang.Object) 1.0d);
        long long25 = frequency19.getCumFreq((long) 'a');
        double double27 = frequency19.getPct((java.lang.Object) (byte) 100);
        long long28 = frequency11.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str29 = frequency11.toString();
        long long31 = frequency11.getCumFreq((int) (short) 0);
        frequency11.addValue((int) '#');
        long long35 = frequency11.getCumFreq(' ');
        long long36 = frequency1.getCount((java.lang.Object) ' ');
        frequency1.addValue((-1L));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str29, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        long long3 = frequency1.getCount('#');
        java.util.Iterator iterator4 = frequency1.valuesIterator();
        double double6 = frequency1.getCumPct((int) ' ');
        double double8 = frequency1.getPct('a');
        frequency1.addValue((int) (short) -1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(iterator4);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        long long11 = frequency1.getCount('4');
        frequency1.addValue((int) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        long long9 = frequency1.getCount(0L);
        double double11 = frequency1.getPct((int) (short) 100);
        double double13 = frequency1.getPct((int) '4');
        long long15 = frequency1.getCumFreq((java.lang.Object) (byte) 0);
        frequency1.addValue(2L);
        double double19 = frequency1.getCumPct((int) (short) 10);
        frequency1.addValue((java.lang.Integer) (-1));
        java.lang.Class<?> wildcardClass22 = frequency1.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        frequency1.addValue(1);
        java.util.Comparator comparator10 = null;
        org.apache.commons.math.stat.Frequency frequency11 = new org.apache.commons.math.stat.Frequency(comparator10);
        double double13 = frequency11.getCumPct((long) 10);
        double double15 = frequency11.getPct('#');
        double double17 = frequency11.getCumPct((int) '#');
        long long18 = frequency1.getCumFreq((java.lang.Object) double17);
        double double20 = frequency1.getCumPct((long) (short) 0);
        long long22 = frequency1.getCount((-1));
        java.util.Comparator comparator23 = null;
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency(comparator23);
        double double26 = frequency24.getCumPct((long) 10);
        long long28 = frequency24.getCount((java.lang.Object) 100.0f);
        frequency24.addValue((java.lang.Integer) (-1));
        frequency24.addValue((java.lang.Integer) 10);
        frequency24.addValue(0L);
        long long35 = frequency1.getCumFreq((java.lang.Object) frequency24);
        double double37 = frequency1.getPct((long) 1);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getCumPct('4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        long long12 = frequency1.getCumFreq((long) 0);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        double double18 = frequency14.getPct('#');
        java.util.Comparator comparator19 = null;
        org.apache.commons.math.stat.Frequency frequency20 = new org.apache.commons.math.stat.Frequency(comparator19);
        double double22 = frequency20.getCumPct((long) 10);
        long long24 = frequency20.getCumFreq((java.lang.Object) 1.0d);
        double double26 = frequency20.getCumPct((int) '4');
        long long27 = frequency20.getSumFreq();
        double double28 = frequency14.getCumPct((java.lang.Object) long27);
        double double30 = frequency14.getCumPct('#');
        java.util.Comparator comparator31 = null;
        org.apache.commons.math.stat.Frequency frequency32 = new org.apache.commons.math.stat.Frequency(comparator31);
        long long34 = frequency32.getCumFreq((java.lang.Object) (short) 10);
        double double35 = frequency14.getPct((java.lang.Object) frequency32);
        long long37 = frequency32.getCount(0);
        frequency32.addValue((long) ' ');
        double double41 = frequency32.getCumPct(0);
        java.util.Comparator comparator42 = null;
        org.apache.commons.math.stat.Frequency frequency43 = new org.apache.commons.math.stat.Frequency(comparator42);
        double double45 = frequency43.getCumPct((long) 10);
        long long47 = frequency43.getCount((java.lang.Object) 100.0f);
        double double49 = frequency43.getPct(1L);
        long long51 = frequency43.getCumFreq((long) 0);
        double double53 = frequency43.getPct('a');
        double double55 = frequency43.getPct(1);
        double double57 = frequency43.getCumPct((long) (byte) 0);
        long long58 = frequency32.getCumFreq((java.lang.Object) frequency43);
        java.util.Comparator comparator59 = null;
        org.apache.commons.math.stat.Frequency frequency60 = new org.apache.commons.math.stat.Frequency(comparator59);
        double double62 = frequency60.getCumPct((long) 10);
        double double64 = frequency60.getPct('#');
        frequency60.addValue((int) '4');
        java.util.Comparator comparator67 = null;
        org.apache.commons.math.stat.Frequency frequency68 = new org.apache.commons.math.stat.Frequency(comparator67);
        double double70 = frequency68.getCumPct((long) 10);
        long long72 = frequency68.getCumFreq((java.lang.Object) 1.0d);
        long long74 = frequency68.getCumFreq((long) 'a');
        double double76 = frequency68.getPct((java.lang.Object) (byte) 100);
        long long77 = frequency60.getCumFreq((java.lang.Object) (byte) 100);
        java.lang.String str78 = frequency60.toString();
        long long80 = frequency60.getCumFreq((int) (short) 0);
        frequency60.addValue((int) '#');
        frequency43.addValue((java.lang.Object) '#');
        frequency1.addValue((java.lang.Object) '#');
        long long86 = frequency1.getCount(0);
        long long88 = frequency1.getCumFreq('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n" + "'", str78, "Value \t Freq. \t Pct. \t Cum Pct. \n52\t1\t100%\t100%\n");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1L + "'", long88 == 1L);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        java.lang.String str11 = frequency1.toString();
        java.lang.String str12 = frequency1.toString();
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        long long18 = frequency14.getCount((java.lang.Object) 100.0f);
        double double20 = frequency14.getPct(1L);
        frequency14.clear();
        long long22 = frequency1.getCount((java.lang.Object) frequency14);
        frequency14.addValue((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            frequency14.addValue('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Value not comparable to existing values.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str11, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str12, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) (byte) -1);
        java.lang.String str8 = frequency1.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        java.util.Comparator comparator6 = null;
        org.apache.commons.math.stat.Frequency frequency7 = new org.apache.commons.math.stat.Frequency(comparator6);
        double double9 = frequency7.getCumPct((long) 10);
        long long11 = frequency7.getCumFreq((java.lang.Object) 1.0d);
        double double13 = frequency7.getCumPct((int) '4');
        long long14 = frequency7.getSumFreq();
        double double15 = frequency1.getCumPct((java.lang.Object) long14);
        double double17 = frequency1.getCumPct('#');
        java.util.Comparator comparator18 = null;
        org.apache.commons.math.stat.Frequency frequency19 = new org.apache.commons.math.stat.Frequency(comparator18);
        long long21 = frequency19.getCumFreq((java.lang.Object) (short) 10);
        double double22 = frequency1.getPct((java.lang.Object) frequency19);
        java.util.Comparator comparator23 = null;
        org.apache.commons.math.stat.Frequency frequency24 = new org.apache.commons.math.stat.Frequency(comparator23);
        double double26 = frequency24.getCumPct((long) 10);
        long long28 = frequency24.getCumFreq((java.lang.Object) 1.0d);
        double double30 = frequency24.getCumPct((int) '4');
        long long32 = frequency24.getCumFreq((int) (byte) 10);
        java.util.Comparator comparator33 = null;
        org.apache.commons.math.stat.Frequency frequency34 = new org.apache.commons.math.stat.Frequency(comparator33);
        double double36 = frequency34.getCumPct((long) 10);
        long long38 = frequency34.getCount((java.lang.Object) 100.0f);
        frequency34.addValue((java.lang.Integer) (-1));
        frequency34.addValue((java.lang.Integer) 10);
        double double44 = frequency34.getCumPct((long) '4');
        double double45 = frequency24.getCumPct((java.lang.Object) '4');
        frequency19.addValue((java.lang.Object) '4');
        java.util.Comparator comparator47 = null;
        org.apache.commons.math.stat.Frequency frequency48 = new org.apache.commons.math.stat.Frequency(comparator47);
        double double50 = frequency48.getCumPct((long) 10);
        long long52 = frequency48.getCount((java.lang.Object) 100.0f);
        frequency48.addValue((java.lang.Integer) (-1));
        double double55 = frequency19.getCumPct((java.lang.Object) frequency48);
        double double57 = frequency48.getCumPct((int) (short) 1);
        double double59 = frequency48.getPct(0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        frequency1.clear();
        long long10 = frequency1.getCumFreq((long) (byte) 1);
        frequency1.clear();
        double double13 = frequency1.getCumPct('#');
        frequency1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCumFreq((java.lang.Object) 1.0d);
        long long7 = frequency1.getCumFreq((java.lang.Object) (short) 10);
        java.util.Comparator comparator8 = null;
        org.apache.commons.math.stat.Frequency frequency9 = new org.apache.commons.math.stat.Frequency(comparator8);
        double double11 = frequency9.getCumPct((long) 10);
        double double13 = frequency9.getPct('#');
        double double15 = frequency9.getCumPct((int) '#');
        java.lang.String str16 = frequency9.toString();
        frequency9.addValue(' ');
        double double20 = frequency9.getPct('#');
        double double21 = frequency1.getCumPct((java.lang.Object) '#');
        java.util.Iterator iterator22 = frequency1.valuesIterator();
        double double24 = frequency1.getCumPct('4');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str16, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(iterator22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        double double5 = frequency1.getPct('#');
        double double7 = frequency1.getCumPct((int) '#');
        java.lang.String str8 = frequency1.toString();
        long long10 = frequency1.getCumFreq((long) '4');
        double double12 = frequency1.getPct(1L);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        double double16 = frequency14.getCumPct((long) 10);
        double double18 = frequency14.getPct('#');
        frequency14.clear();
        double double20 = frequency1.getPct((java.lang.Object) frequency14);
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        double double26 = frequency22.getPct('#');
        java.util.Comparator comparator27 = null;
        org.apache.commons.math.stat.Frequency frequency28 = new org.apache.commons.math.stat.Frequency(comparator27);
        double double30 = frequency28.getCumPct((long) 10);
        long long32 = frequency28.getCumFreq((java.lang.Object) 1.0d);
        double double34 = frequency28.getCumPct((int) '4');
        long long35 = frequency28.getSumFreq();
        double double36 = frequency22.getCumPct((java.lang.Object) long35);
        double double38 = frequency22.getCumPct('#');
        java.util.Comparator comparator39 = null;
        org.apache.commons.math.stat.Frequency frequency40 = new org.apache.commons.math.stat.Frequency(comparator39);
        long long42 = frequency40.getCumFreq((java.lang.Object) (short) 10);
        double double43 = frequency22.getPct((java.lang.Object) frequency40);
        long long45 = frequency40.getCount(0);
        frequency40.addValue((long) ' ');
        double double49 = frequency40.getCumPct(0);
        java.util.Comparator comparator50 = null;
        org.apache.commons.math.stat.Frequency frequency51 = new org.apache.commons.math.stat.Frequency(comparator50);
        double double53 = frequency51.getCumPct((long) 10);
        long long55 = frequency51.getCount((java.lang.Object) 100.0f);
        double double57 = frequency51.getPct(1L);
        long long59 = frequency51.getCumFreq((long) 0);
        double double61 = frequency51.getPct('a');
        double double63 = frequency51.getPct(1);
        double double65 = frequency51.getCumPct((long) (byte) 0);
        long long66 = frequency40.getCumFreq((java.lang.Object) frequency51);
        long long68 = frequency40.getCumFreq('a');
        frequency40.addValue((java.lang.Integer) 0);
        long long71 = frequency1.getCumFreq((java.lang.Object) frequency40);
        double double73 = frequency40.getCumPct('a');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Value \t Freq. \t Pct. \t Cum Pct. \n" + "'", str8, "Value \t Freq. \t Pct. \t Cum Pct. \n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        double double3 = frequency1.getCumPct((long) 10);
        long long5 = frequency1.getCount((java.lang.Object) 100.0f);
        double double7 = frequency1.getPct(1L);
        long long9 = frequency1.getCumFreq((long) 0);
        long long10 = frequency1.getSumFreq();
        double double12 = frequency1.getPct(1);
        long long14 = frequency1.getCumFreq((long) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        java.util.Comparator comparator0 = null;
        org.apache.commons.math.stat.Frequency frequency1 = new org.apache.commons.math.stat.Frequency(comparator0);
        java.util.Comparator comparator2 = null;
        org.apache.commons.math.stat.Frequency frequency3 = new org.apache.commons.math.stat.Frequency(comparator2);
        double double5 = frequency3.getCumPct((long) 10);
        long long7 = frequency3.getCount((java.lang.Object) 100.0f);
        double double9 = frequency3.getPct(1L);
        double double11 = frequency3.getCumPct((int) (short) -1);
        double double12 = frequency1.getCumPct((java.lang.Object) frequency3);
        java.util.Comparator comparator13 = null;
        org.apache.commons.math.stat.Frequency frequency14 = new org.apache.commons.math.stat.Frequency(comparator13);
        long long16 = frequency14.getCount('#');
        frequency14.addValue(0L);
        double double20 = frequency14.getCumPct('4');
        java.util.Comparator comparator21 = null;
        org.apache.commons.math.stat.Frequency frequency22 = new org.apache.commons.math.stat.Frequency(comparator21);
        double double24 = frequency22.getCumPct((long) 10);
        double double26 = frequency22.getPct('#');
        frequency22.addValue((int) '4');
        java.util.Comparator comparator29 = null;
        org.apache.commons.math.stat.Frequency frequency30 = new org.apache.commons.math.stat.Frequency(comparator29);
        double double32 = frequency30.getCumPct((long) 10);
        long long34 = frequency30.getCumFreq((java.lang.Object) 1.0d);
        long long36 = frequency30.getCumFreq((long) 'a');
        double double38 = frequency30.getPct((java.lang.Object) (byte) 100);
        long long39 = frequency22.getCumFreq((java.lang.Object) (byte) 100);
        long long40 = frequency14.getCount((java.lang.Object) long39);
        long long42 = frequency14.getCumFreq(' ');
        // The following exception was thrown during execution in test generation
        try {
            frequency3.addValue((java.lang.Object) frequency14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        int[] intArray6 = new int[] { (byte) -1, 10, (byte) 10, 'a', 10, 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -9,700,000 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 10, 10, 97, 10, 100]");
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray8 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = multidimensionalCounter4.getCount(intArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass7 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        int[] intArray0 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter1 = new org.apache.commons.math.util.MultidimensionalCounter(intArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = multidimensionalCounter7.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray8 = multidimensionalCounter4.getCounts((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        int[] intArray4 = new int[] { (byte) 100, ' ', (short) 0, (short) 0 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter5 = new org.apache.commons.math.util.MultidimensionalCounter(intArray4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 32, 0, 0]");
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = iterator7.getCount();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = iterator7.getCount((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter8 = new org.apache.commons.math.util.MultidimensionalCounter(intArray7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = iterator8.getCount((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        java.lang.Class<?> wildcardClass9 = iterator7.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        java.lang.Class<?> wildcardClass18 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = iterator7.getCount();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = iterator7.getCount(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        java.lang.Class<?> wildcardClass8 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = iterator7.getCounts();
        java.lang.Class<?> wildcardClass9 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = iterator7.getCounts();
        java.lang.Class<?> wildcardClass9 = iterator7.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = multidimensionalCounter4.getCount(intArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int int8 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter1 = new org.apache.commons.math.util.MultidimensionalCounter(intArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass10 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int[] intArray15 = multidimensionalCounter12.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int[] intArray17 = multidimensionalCounter12.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = multidimensionalCounter4.getCount(intArray17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        int[] intArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = multidimensionalCounter4.getCount(intArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int int19 = multidimensionalCounter14.getSize();
        int[] intArray20 = multidimensionalCounter14.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = multidimensionalCounter4.getCount(intArray20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        boolean boolean9 = iterator7.hasNext();
        int[] intArray10 = iterator7.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = iterator9.getCount(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        boolean boolean9 = iterator7.hasNext();
        int[] intArray10 = iterator7.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        boolean boolean7 = iterator6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = iterator6.getCount((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass11 = iterator10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = multidimensionalCounter4.getCount(intArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray26 = multidimensionalCounter23.getCounts((int) (short) 10);
        int int27 = multidimensionalCounter14.getCount(intArray26);
        int int28 = multidimensionalCounter4.getCount(intArray26);
        java.lang.Class<?> wildcardClass29 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass7 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) 'a');
        java.lang.Class<?> wildcardClass11 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getSize();
        java.lang.Class<?> wildcardClass8 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        boolean boolean9 = iterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = iterator9.getCount((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray9 = multidimensionalCounter4.getCounts((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        boolean boolean7 = iterator6.hasNext();
        int int8 = iterator6.getCount();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = iterator6.getCount((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = multidimensionalCounter4.getCounts(10);
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        boolean boolean7 = iterator6.hasNext();
        int[] intArray8 = iterator6.getCounts();
        int[] intArray9 = iterator6.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass9 = iterator8.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass8 = intSpliterator7.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 0);
        int int11 = multidimensionalCounter4.getSize();
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int int17 = multidimensionalCounter16.getSize();
        int[] intArray18 = multidimensionalCounter16.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = multidimensionalCounter4.getCount(intArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getSize();
        int[] intArray17 = multidimensionalCounter15.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter15.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter15.iterator();
        int[] intArray20 = multidimensionalCounter15.getSizes();
        int[] intArray21 = multidimensionalCounter15.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = multidimensionalCounter4.getCount(intArray21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int int17 = multidimensionalCounter16.getDimension();
        int[] intArray19 = multidimensionalCounter16.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter16.iterator();
        int[] intArray21 = iterator20.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = multidimensionalCounter11.getCount(intArray21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 0] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, -1]");
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = iterator7.getCount(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int int19 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter11.iterator();
        int int16 = multidimensionalCounter11.getSize();
        int[] intArray17 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = multidimensionalCounter4.getCount(intArray17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getSize();
        int[] intArray15 = multidimensionalCounter13.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter13.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter13.iterator();
        int[] intArray18 = multidimensionalCounter13.getSizes();
        int[] intArray19 = multidimensionalCounter13.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = multidimensionalCounter4.getCount(intArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray8 = multidimensionalCounter4.getCounts((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        java.lang.Class<?> wildcardClass13 = multidimensionalCounter11.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass13 = iterator12.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = iterator8.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = iterator6.getCount(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) 'a');
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray26 = multidimensionalCounter23.getCounts((int) (short) 10);
        int int27 = multidimensionalCounter14.getCount(intArray26);
        int int28 = multidimensionalCounter4.getCount(intArray26);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray30 = multidimensionalCounter4.getCounts((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        int[] intArray5 = new int[] { '#', (short) -1, (short) -1, (short) 0, 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter6 = new org.apache.commons.math.util.MultidimensionalCounter(intArray5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[35, -1, -1, 0, 100]");
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass11 = intSpliterator10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = iterator8.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = multidimensionalCounter13.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        java.lang.Class<?> wildcardClass12 = multidimensionalCounter11.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        int[] intArray3 = new int[] { 0, '#', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 35, 32]");
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        java.lang.Class<?> wildcardClass13 = iterator12.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray12 = multidimensionalCounter10.getCounts((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = multidimensionalCounter10.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass9 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        java.lang.Class<?> wildcardClass11 = intArray9.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        boolean boolean10 = iterator8.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray26 = multidimensionalCounter23.getCounts((int) (short) 10);
        int int27 = multidimensionalCounter14.getCount(intArray26);
        int int28 = multidimensionalCounter4.getCount(intArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter29 = new org.apache.commons.math.util.MultidimensionalCounter(intArray26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        java.lang.Class<?> wildcardClass8 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray26 = multidimensionalCounter23.getCounts((int) (short) 10);
        int int27 = multidimensionalCounter14.getCount(intArray26);
        int int28 = multidimensionalCounter4.getCount(intArray26);
        java.lang.Class<?> wildcardClass29 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        int int12 = iterator8.getCount((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = iterator8.getCount((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) (short) 0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = iterator9.getCount((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter11.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int int10 = iterator9.getCount();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = iterator9.getCount((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        boolean boolean7 = iterator6.hasNext();
        int[] intArray8 = iterator6.getCounts();
        int[] intArray9 = iterator6.getCounts();
        boolean boolean10 = iterator6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = iterator6.getCount(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass9 = iterator8.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int[] intArray13 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter12.iterator();
        int[] intArray15 = multidimensionalCounter12.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = multidimensionalCounter4.getCount(intArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = iterator6.getCount((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int8 = multidimensionalCounter4.getCount(intArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(iterator6);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray10 = multidimensionalCounter4.getCounts(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = iterator7.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator12.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        java.lang.Class<?> wildcardClass12 = intArray11.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = multidimensionalCounter11.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int int10 = multidimensionalCounter4.getDimension();
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getDimension();
        int[] intArray17 = multidimensionalCounter15.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter15.iterator();
        int[] intArray19 = multidimensionalCounter15.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = multidimensionalCounter4.getCount(intArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray8 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
        int[] intArray10 = multidimensionalCounter9.getSizes();
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getDimension();
        int[] intArray18 = multidimensionalCounter15.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter15.iterator();
        int[] intArray20 = multidimensionalCounter15.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int[] intArray22 = multidimensionalCounter21.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = multidimensionalCounter9.getCount(intArray22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = multidimensionalCounter4.getCounts(10);
        int[] intArray12 = multidimensionalCounter4.getCounts(1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 0);
        int int11 = multidimensionalCounter4.getSize();
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        java.util.Spliterator<java.lang.Integer> intSpliterator17 = multidimensionalCounter16.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter16.iterator();
        int[] intArray19 = multidimensionalCounter16.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = multidimensionalCounter4.getCount(intArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        int[] intArray9 = iterator7.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = multidimensionalCounter7.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        boolean boolean9 = iterator7.hasNext();
        int[] intArray10 = iterator7.getCounts();
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, 0, 0]");
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass7 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter8 = new org.apache.commons.math.util.MultidimensionalCounter(intArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = multidimensionalCounter8.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray10 = multidimensionalCounter7.getCounts((int) 'a');
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = multidimensionalCounter7.getCount(intArray14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter12.spliterator();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (byte) 1);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray25 = multidimensionalCounter23.getSizes();
        int[] intArray27 = multidimensionalCounter23.getCounts((int) 'a');
        int[] intArray29 = multidimensionalCounter23.getCounts((int) 'a');
        int int30 = multidimensionalCounter12.getCount(intArray29);
        int int31 = multidimensionalCounter4.getCount(intArray29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray13 = multidimensionalCounter11.getCounts((int) (short) 0);
        int[] intArray15 = multidimensionalCounter11.getCounts(10);
        int int16 = multidimensionalCounter4.getCount(intArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator39.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(iterator39);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter13.iterator();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getDimension();
        int[] intArray25 = multidimensionalCounter22.getCounts((int) (short) 10);
        int int26 = multidimensionalCounter13.getCount(intArray25);
        int int27 = multidimensionalCounter7.getCount(intArray25);
        java.lang.Class<?> wildcardClass28 = multidimensionalCounter7.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        boolean boolean7 = iterator6.hasNext();
        int[] intArray8 = iterator6.getCounts();
        int[] intArray9 = iterator6.getCounts();
        boolean boolean10 = iterator6.hasNext();
        java.lang.Class<?> wildcardClass11 = iterator6.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        boolean boolean11 = iterator8.hasNext();
        java.lang.Class<?> wildcardClass12 = iterator8.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray8 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
        int[] intArray10 = multidimensionalCounter9.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = multidimensionalCounter9.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray8 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        java.lang.Class<?> wildcardClass8 = intArray7.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass12 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int int39 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter7.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter7.spliterator();
        int[] intArray12 = multidimensionalCounter7.getCounts((int) (short) 10);
        java.lang.Class<?> wildcardClass13 = multidimensionalCounter7.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray11 = multidimensionalCounter4.getCounts(2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 2, 0]");
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        boolean boolean12 = iterator11.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = iterator11.getCount((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter6 = new org.apache.commons.math.util.MultidimensionalCounter(intArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = multidimensionalCounter6.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getCounts(0);
        java.lang.Class<?> wildcardClass10 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int int12 = multidimensionalCounter4.getDimension();
        java.lang.Class<?> wildcardClass13 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        boolean boolean7 = iterator6.hasNext();
        int int8 = iterator6.getCount();
        int[] intArray9 = iterator6.getCounts();
        boolean boolean10 = iterator6.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        boolean boolean9 = iterator7.hasNext();
        int[] intArray10 = iterator7.getCounts();
        int int12 = iterator7.getCount((int) (byte) 0);
        int int13 = iterator7.getCount();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        int int15 = multidimensionalCounter12.getSize();
        int[] intArray19 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        int int21 = multidimensionalCounter20.getSize();
        int[] intArray22 = multidimensionalCounter20.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator23 = multidimensionalCounter20.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter20.iterator();
        int int25 = multidimensionalCounter20.getSize();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getSize();
        int[] intArray32 = multidimensionalCounter30.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator33 = multidimensionalCounter30.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator34 = multidimensionalCounter30.iterator();
        int[] intArray38 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter39 = new org.apache.commons.math.util.MultidimensionalCounter(intArray38);
        int int40 = multidimensionalCounter39.getDimension();
        int[] intArray42 = multidimensionalCounter39.getCounts((int) (short) 10);
        int int43 = multidimensionalCounter30.getCount(intArray42);
        int int44 = multidimensionalCounter20.getCount(intArray42);
        int int45 = multidimensionalCounter12.getCount(intArray42);
        int int46 = multidimensionalCounter12.getSize();
        int[] intArray47 = multidimensionalCounter12.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int48 = multidimensionalCounter4.getCount(intArray47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator33);
        org.junit.Assert.assertNotNull(iterator34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[32, 10, 1]");
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int[] intArray12 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        java.lang.Class<?> wildcardClass14 = multidimensionalCounter11.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter11.spliterator();
        int[] intArray18 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter19 = new org.apache.commons.math.util.MultidimensionalCounter(intArray18);
        int int20 = multidimensionalCounter19.getDimension();
        int[] intArray22 = multidimensionalCounter19.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator23 = multidimensionalCounter19.iterator();
        int[] intArray25 = multidimensionalCounter19.getCounts((int) (short) 0);
        int int26 = multidimensionalCounter11.getCount(intArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter27 = new org.apache.commons.math.util.MultidimensionalCounter(intArray25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = multidimensionalCounter4.getCounts((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intSpliterator14);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        boolean boolean11 = iterator8.hasNext();
        int[] intArray12 = iterator8.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0]");
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter7.spliterator();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int[] intArray19 = multidimensionalCounter14.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = multidimensionalCounter7.getCount(intArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = iterator10.getCount((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int12 = multidimensionalCounter4.getSize();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        boolean boolean21 = iterator20.hasNext();
        int[] intArray22 = iterator20.getCounts();
        int int23 = multidimensionalCounter4.getCount(intArray22);
        java.lang.Class<?> wildcardClass24 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        int[] intArray9 = iterator7.getCounts();
        boolean boolean10 = iterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        java.lang.Class<?> wildcardClass10 = intArray9.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = iterator10.getCount((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(iterator10);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int12 = multidimensionalCounter4.getSize();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        boolean boolean21 = iterator20.hasNext();
        int[] intArray22 = iterator20.getCounts();
        int int23 = multidimensionalCounter4.getCount(intArray22);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = iterator24.getCount((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(iterator24);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getDimension();
        int[] intArray20 = multidimensionalCounter17.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter17.iterator();
        int[] intArray22 = iterator21.getCounts();
        int[] intArray23 = iterator21.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = multidimensionalCounter4.getCount(intArray23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 0] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, -1]");
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int12 = multidimensionalCounter4.getSize();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        boolean boolean21 = iterator20.hasNext();
        int[] intArray22 = iterator20.getCounts();
        int int23 = multidimensionalCounter4.getCount(intArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        boolean boolean9 = iterator7.hasNext();
        int[] intArray10 = iterator7.getCounts();
        int int12 = iterator7.getCount((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = iterator7.getCount((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getDimension();
        java.lang.Class<?> wildcardClass14 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int[] intArray24 = multidimensionalCounter23.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = multidimensionalCounter4.getCount(intArray24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int12 = iterator11.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray13 = multidimensionalCounter11.getCounts((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int int11 = multidimensionalCounter4.getSize();
        java.lang.Class<?> wildcardClass12 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter12.spliterator();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (byte) 1);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray25 = multidimensionalCounter23.getSizes();
        int[] intArray27 = multidimensionalCounter23.getCounts((int) 'a');
        int[] intArray29 = multidimensionalCounter23.getCounts((int) 'a');
        int int30 = multidimensionalCounter12.getCount(intArray29);
        int int31 = multidimensionalCounter4.getCount(intArray29);
        int[] intArray33 = multidimensionalCounter4.getCounts((int) (byte) 0);
        int int34 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getSizes();
        int int40 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator41 = multidimensionalCounter4.iterator();
        int[] intArray42 = multidimensionalCounter4.getSizes();
        int[] intArray46 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter47 = new org.apache.commons.math.util.MultidimensionalCounter(intArray46);
        int int48 = multidimensionalCounter47.getDimension();
        int[] intArray49 = multidimensionalCounter47.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator50 = multidimensionalCounter47.iterator();
        int int51 = multidimensionalCounter47.getSize();
        int[] intArray52 = multidimensionalCounter47.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int53 = multidimensionalCounter4.getCount(intArray52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 10, 1]");
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = iterator6.getCount((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass9 = intSpliterator8.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        boolean boolean9 = iterator8.hasNext();
        boolean boolean10 = iterator8.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int12 = multidimensionalCounter4.getSize();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        boolean boolean21 = iterator20.hasNext();
        int[] intArray22 = iterator20.getCounts();
        int int23 = multidimensionalCounter4.getCount(intArray22);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter4.iterator();
        int int25 = multidimensionalCounter4.getSize();
        java.lang.Class<?> wildcardClass26 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getSize();
        int[] intArray15 = multidimensionalCounter13.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter13.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter13.iterator();
        int[] intArray18 = multidimensionalCounter13.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter19 = new org.apache.commons.math.util.MultidimensionalCounter(intArray18);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = multidimensionalCounter4.getCount(intArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = iterator8.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        int int9 = iterator7.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        boolean boolean7 = iterator6.hasNext();
        int int8 = iterator6.getCount();
        int[] intArray9 = iterator6.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = iterator12.getCount();
        int int14 = iterator12.getCount();
        // The following exception was thrown during execution in test generation
        try {
            iterator12.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int11 = iterator8.getCount(0);
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getSizes();
        int int40 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator41 = multidimensionalCounter4.iterator();
        int[] intArray42 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, 10, 1]");
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getCounts((int) (byte) 10);
        java.lang.Class<?> wildcardClass10 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getDimension();
        int[] intArray17 = multidimensionalCounter15.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = multidimensionalCounter4.getCount(intArray17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter8 = new org.apache.commons.math.util.MultidimensionalCounter(intArray7);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = multidimensionalCounter9.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        boolean boolean7 = iterator6.hasNext();
        int[] intArray8 = iterator6.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0]");
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int11 = iterator8.getCount(0);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = iterator8.getCount((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray13 = multidimensionalCounter4.getCounts((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator11.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getSizes();
        int int40 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator41 = multidimensionalCounter4.iterator();
        int[] intArray42 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = multidimensionalCounter4.getCounts((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, 10, 1]");
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass10 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter13.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator14.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray10 = multidimensionalCounter4.getCounts((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int[] intArray12 = multidimensionalCounter4.getSizes();
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int[] intArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = multidimensionalCounter4.getCount(intArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter7.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = iterator10.getCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray19 = multidimensionalCounter4.getCounts((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 5, 0]");
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = iterator8.getCount();
        int int11 = iterator8.getCount((int) (byte) 0);
        int int12 = iterator8.getCount();
        int int13 = iterator8.getCount();
        boolean boolean14 = iterator8.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int int11 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        java.lang.Class<?> wildcardClass11 = multidimensionalCounter10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 1);
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int11 = multidimensionalCounter4.getCount(intArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        boolean boolean11 = iterator8.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray24 = multidimensionalCounter21.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter21.iterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        int int34 = multidimensionalCounter21.getCount(intArray33);
        int int35 = multidimensionalCounter15.getCount(intArray33);
        int int36 = multidimensionalCounter4.getCount(intArray33);
        int int37 = multidimensionalCounter4.getDimension();
        java.lang.Class<?> wildcardClass38 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray12 = iterator11.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, -1]");
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int[] intArray18 = multidimensionalCounter16.getCounts((int) (short) 0);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getSize();
        int int25 = multidimensionalCounter23.getDimension();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int[] intArray32 = multidimensionalCounter30.getCounts((int) (short) 0);
        int[] intArray34 = multidimensionalCounter30.getCounts(10);
        int int35 = multidimensionalCounter23.getCount(intArray34);
        int int36 = multidimensionalCounter16.getCount(intArray34);
        int int37 = multidimensionalCounter11.getCount(intArray34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter38 = new org.apache.commons.math.util.MultidimensionalCounter(intArray34);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = multidimensionalCounter4.getSize();
        int int14 = multidimensionalCounter4.getSize();
        int int15 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = iterator11.getCount((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int10 = iterator8.getCount(2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        java.lang.Class<?> wildcardClass15 = iterator14.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        int[] intArray9 = iterator7.getCounts();
        int int10 = iterator7.getCount();
        int int11 = iterator7.getCount();
        int int13 = iterator7.getCount((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int int19 = multidimensionalCounter4.getDimension();
        int int20 = multidimensionalCounter4.getDimension();
        int[] intArray24 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter25 = new org.apache.commons.math.util.MultidimensionalCounter(intArray24);
        int int26 = multidimensionalCounter25.getDimension();
        int[] intArray27 = multidimensionalCounter25.getSizes();
        int int28 = multidimensionalCounter25.getSize();
        int[] intArray30 = multidimensionalCounter25.getCounts(0);
        int[] intArray32 = multidimensionalCounter25.getCounts(100);
        int int33 = multidimensionalCounter4.getCount(intArray32);
        java.lang.Class<?> wildcardClass34 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray14 = multidimensionalCounter4.getCounts((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[5, 2, 0]");
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int11 = iterator8.getCount(0);
        int int12 = iterator8.getCount();
        java.lang.Class<?> wildcardClass13 = iterator8.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = iterator12.getCount(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = iterator12.getCount((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int int11 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray11 = multidimensionalCounter4.getCounts(2);
        java.lang.Class<?> wildcardClass12 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 2, 0]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = multidimensionalCounter4.getSize();
        int[] intArray17 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int int19 = multidimensionalCounter18.getSize();
        int[] intArray20 = multidimensionalCounter18.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter18.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator22 = multidimensionalCounter18.iterator();
        int[] intArray23 = multidimensionalCounter18.getSizes();
        int[] intArray24 = multidimensionalCounter18.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter25 = new org.apache.commons.math.util.MultidimensionalCounter(intArray24);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter25.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getSize();
        int[] intArray33 = multidimensionalCounter31.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator34 = multidimensionalCounter31.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator35 = multidimensionalCounter31.iterator();
        int int36 = multidimensionalCounter31.getSize();
        int[] intArray37 = multidimensionalCounter31.getSizes();
        int[] intArray39 = multidimensionalCounter31.getCounts((int) (byte) 1);
        int int40 = multidimensionalCounter25.getCount(intArray39);
        int int41 = multidimensionalCounter4.getCount(intArray39);
        int[] intArray45 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter46 = new org.apache.commons.math.util.MultidimensionalCounter(intArray45);
        int int47 = multidimensionalCounter46.getDimension();
        int[] intArray48 = multidimensionalCounter46.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator49 = multidimensionalCounter46.iterator();
        int[] intArray50 = multidimensionalCounter46.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int51 = multidimensionalCounter4.getCount(intArray50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(iterator22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator34);
        org.junit.Assert.assertNotNull(iterator35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, 10, 1]");
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 0);
        int int11 = multidimensionalCounter4.getSize();
        int[] intArray13 = multidimensionalCounter4.getCounts((int) (short) 1);
        java.lang.Class<?> wildcardClass14 = intArray13.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(iterator10);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter11.iterator();
        int[] intArray17 = multidimensionalCounter11.getCounts((int) 'a');
        int int18 = multidimensionalCounter4.getCount(intArray17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray10 = multidimensionalCounter7.getCounts((int) 'a');
        int[] intArray11 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter7.iterator();
        int int14 = iterator12.getCount(0);
        // The following exception was thrown during execution in test generation
        try {
            iterator12.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = iterator12.getCount();
        int int15 = iterator12.getCount((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = iterator12.getCount((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass11 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass12 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray12 = iterator11.getCounts();
        java.lang.Class<?> wildcardClass13 = iterator11.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass12 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator12);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = multidimensionalCounter4.getCounts((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = iterator13.getCount((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator13);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(iterator7);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int14 = iterator12.getCount(1);
        // The following exception was thrown during execution in test generation
        try {
            iterator12.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray10 = multidimensionalCounter7.getCounts((int) 'a');
        int[] intArray11 = multidimensionalCounter7.getSizes();
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int int17 = multidimensionalCounter16.getSize();
        int[] intArray19 = multidimensionalCounter16.getCounts((int) (short) 10);
        int[] intArray20 = multidimensionalCounter16.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = multidimensionalCounter7.getCount(intArray20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        boolean boolean10 = iterator8.hasNext();
        java.lang.Class<?> wildcardClass11 = iterator8.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int[] intArray18 = multidimensionalCounter16.getCounts((int) (short) 0);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getSize();
        int int25 = multidimensionalCounter23.getDimension();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int[] intArray32 = multidimensionalCounter30.getCounts((int) (short) 0);
        int[] intArray34 = multidimensionalCounter30.getCounts(10);
        int int35 = multidimensionalCounter23.getCount(intArray34);
        int int36 = multidimensionalCounter16.getCount(intArray34);
        int int37 = multidimensionalCounter11.getCount(intArray34);
        java.lang.Class<?> wildcardClass38 = multidimensionalCounter11.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int12 = multidimensionalCounter4.getSize();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        boolean boolean21 = iterator20.hasNext();
        int[] intArray22 = iterator20.getCounts();
        int int23 = multidimensionalCounter4.getCount(intArray22);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass25 = iterator24.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray10 = multidimensionalCounter7.getCounts((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = iterator8.getCount();
        int int11 = iterator8.getCount((int) (byte) 0);
        int int12 = iterator8.getCount();
        boolean boolean13 = iterator8.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter9.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        int[] intArray14 = multidimensionalCounter4.getCounts((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0]");
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass11 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.lang.Class<?> wildcardClass7 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        boolean boolean7 = iterator6.hasNext();
        int[] intArray8 = iterator6.getCounts();
        int[] intArray9 = iterator6.getCounts();
        boolean boolean10 = iterator6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        int int15 = iterator14.getCount();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = iterator14.getCount(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        int[] intArray9 = multidimensionalCounter7.getCounts((int) '4');
        java.lang.Class<?> wildcardClass10 = intArray9.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[5, 2, 0]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getSizes();
        int int40 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator41 = multidimensionalCounter4.iterator();
        int[] intArray42 = multidimensionalCounter4.getSizes();
        int int43 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter17.iterator();
        int int22 = multidimensionalCounter17.getSize();
        int[] intArray23 = multidimensionalCounter17.getSizes();
        int[] intArray25 = multidimensionalCounter17.getCounts((int) (byte) 1);
        int int26 = multidimensionalCounter11.getCount(intArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter27 = new org.apache.commons.math.util.MultidimensionalCounter(intArray25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        int int15 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray12 = multidimensionalCounter10.getCounts((int) (byte) 10);
        int[] intArray13 = multidimensionalCounter10.getSizes();
        java.lang.Class<?> wildcardClass14 = multidimensionalCounter10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = multidimensionalCounter11.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter17.iterator();
        int int22 = multidimensionalCounter17.getSize();
        int[] intArray23 = multidimensionalCounter17.getSizes();
        int[] intArray25 = multidimensionalCounter17.getCounts((int) (byte) 1);
        int int26 = multidimensionalCounter11.getCount(intArray25);
        int int27 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator28 = multidimensionalCounter11.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = multidimensionalCounter11.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(iterator28);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = iterator8.getCount();
        int int11 = iterator8.getCount((int) (byte) 0);
        int int12 = iterator8.getCount();
        int int13 = iterator8.getCount();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        java.lang.Class<?> wildcardClass10 = intArray9.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getDimension();
        int int16 = multidimensionalCounter14.getDimension();
        int int17 = multidimensionalCounter14.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int int27 = multidimensionalCounter22.getSize();
        int[] intArray31 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter32 = new org.apache.commons.math.util.MultidimensionalCounter(intArray31);
        int int33 = multidimensionalCounter32.getSize();
        int[] intArray34 = multidimensionalCounter32.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator35 = multidimensionalCounter32.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator36 = multidimensionalCounter32.iterator();
        int[] intArray40 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter41 = new org.apache.commons.math.util.MultidimensionalCounter(intArray40);
        int int42 = multidimensionalCounter41.getDimension();
        int[] intArray44 = multidimensionalCounter41.getCounts((int) (short) 10);
        int int45 = multidimensionalCounter32.getCount(intArray44);
        int int46 = multidimensionalCounter22.getCount(intArray44);
        int int47 = multidimensionalCounter14.getCount(intArray44);
        int int48 = multidimensionalCounter14.getSize();
        int[] intArray49 = multidimensionalCounter14.getSizes();
        int int50 = multidimensionalCounter14.getSize();
        int[] intArray51 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter52 = new org.apache.commons.math.util.MultidimensionalCounter(intArray51);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = multidimensionalCounter4.getCount(intArray51);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator35);
        org.junit.Assert.assertNotNull(iterator36);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[32, 10, 1]");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter12.spliterator();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (byte) 1);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray25 = multidimensionalCounter23.getSizes();
        int[] intArray27 = multidimensionalCounter23.getCounts((int) 'a');
        int[] intArray29 = multidimensionalCounter23.getCounts((int) 'a');
        int int30 = multidimensionalCounter12.getCount(intArray29);
        int int31 = multidimensionalCounter4.getCount(intArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter32 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        java.lang.Class<?> wildcardClass15 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = iterator8.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = iterator8.getCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray12 = multidimensionalCounter10.getCounts((int) (byte) 10);
        int[] intArray13 = multidimensionalCounter10.getSizes();
        int[] intArray17 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int int19 = multidimensionalCounter18.getDimension();
        int int20 = multidimensionalCounter18.getDimension();
        int int21 = multidimensionalCounter18.getSize();
        int[] intArray25 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter26 = new org.apache.commons.math.util.MultidimensionalCounter(intArray25);
        int int27 = multidimensionalCounter26.getSize();
        int[] intArray28 = multidimensionalCounter26.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator29 = multidimensionalCounter26.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator30 = multidimensionalCounter26.iterator();
        int int31 = multidimensionalCounter26.getSize();
        int[] intArray35 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter36 = new org.apache.commons.math.util.MultidimensionalCounter(intArray35);
        int int37 = multidimensionalCounter36.getSize();
        int[] intArray38 = multidimensionalCounter36.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter36.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator40 = multidimensionalCounter36.iterator();
        int[] intArray44 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter45 = new org.apache.commons.math.util.MultidimensionalCounter(intArray44);
        int int46 = multidimensionalCounter45.getDimension();
        int[] intArray48 = multidimensionalCounter45.getCounts((int) (short) 10);
        int int49 = multidimensionalCounter36.getCount(intArray48);
        int int50 = multidimensionalCounter26.getCount(intArray48);
        int int51 = multidimensionalCounter18.getCount(intArray48);
        int int52 = multidimensionalCounter18.getSize();
        int[] intArray53 = multidimensionalCounter18.getSizes();
        int int54 = multidimensionalCounter18.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator55 = multidimensionalCounter18.iterator();
        int[] intArray56 = multidimensionalCounter18.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int57 = multidimensionalCounter10.getCount(intArray56);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator29);
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(iterator40);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(iterator55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[32, 10, 1]");
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray11 = multidimensionalCounter7.getCounts((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[5, 2, 0]");
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = iterator7.getCount();
        int[] intArray9 = iterator7.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter7.spliterator();
        int[] intArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int11 = multidimensionalCounter7.getCount(intArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int int12 = multidimensionalCounter4.getSize();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int int19 = multidimensionalCounter17.getDimension();
        int[] intArray20 = multidimensionalCounter17.getSizes();
        int[] intArray22 = multidimensionalCounter17.getCounts(2);
        int[] intArray23 = multidimensionalCounter17.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = multidimensionalCounter4.getCount(intArray23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 2, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray13 = iterator12.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, -1]");
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int15 = multidimensionalCounter14.getDimension();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int[] intArray22 = multidimensionalCounter21.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = multidimensionalCounter14.getCount(intArray22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray12 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter17.iterator();
        int int22 = multidimensionalCounter17.getSize();
        int[] intArray23 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter24 = new org.apache.commons.math.util.MultidimensionalCounter(intArray23);
        int int25 = multidimensionalCounter24.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter24.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator27 = multidimensionalCounter24.spliterator();
        int[] intArray31 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter32 = new org.apache.commons.math.util.MultidimensionalCounter(intArray31);
        int int33 = multidimensionalCounter32.getDimension();
        int[] intArray35 = multidimensionalCounter32.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator36 = multidimensionalCounter32.iterator();
        int[] intArray38 = multidimensionalCounter32.getCounts((int) (short) 0);
        int int39 = multidimensionalCounter24.getCount(intArray38);
        int int40 = multidimensionalCounter4.getCount(intArray38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intSpliterator27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray11 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        int int13 = multidimensionalCounter11.getDimension();
        int[] intArray17 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int[] intArray20 = multidimensionalCounter18.getCounts((int) (short) 0);
        int[] intArray22 = multidimensionalCounter18.getCounts(10);
        int int23 = multidimensionalCounter11.getCount(intArray22);
        int int24 = multidimensionalCounter4.getCount(intArray22);
        int[] intArray28 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter29 = new org.apache.commons.math.util.MultidimensionalCounter(intArray28);
        int int30 = multidimensionalCounter29.getSize();
        int[] intArray31 = multidimensionalCounter29.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator32 = multidimensionalCounter29.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator33 = multidimensionalCounter29.iterator();
        int[] intArray34 = multidimensionalCounter29.getSizes();
        int[] intArray35 = multidimensionalCounter29.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter36 = new org.apache.commons.math.util.MultidimensionalCounter(intArray35);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter37 = new org.apache.commons.math.util.MultidimensionalCounter(intArray35);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter38 = new org.apache.commons.math.util.MultidimensionalCounter(intArray35);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter39 = new org.apache.commons.math.util.MultidimensionalCounter(intArray35);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = multidimensionalCounter4.getCount(intArray35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator32);
        org.junit.Assert.assertNotNull(iterator33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[32, 10, 1]");
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = iterator7.getCounts();
        boolean boolean9 = iterator7.hasNext();
        boolean boolean10 = iterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = iterator7.getCount((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass40 = iterator39.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter7.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = iterator7.getCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(iterator7);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        int[] intArray9 = iterator7.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int int11 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter12.spliterator();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (byte) 1);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray25 = multidimensionalCounter23.getSizes();
        int[] intArray27 = multidimensionalCounter23.getCounts((int) 'a');
        int[] intArray29 = multidimensionalCounter23.getCounts((int) 'a');
        int int30 = multidimensionalCounter12.getCount(intArray29);
        int int31 = multidimensionalCounter4.getCount(intArray29);
        int[] intArray33 = multidimensionalCounter4.getCounts((int) (byte) 0);
        int int34 = multidimensionalCounter4.getDimension();
        int[] intArray38 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter39 = new org.apache.commons.math.util.MultidimensionalCounter(intArray38);
        int int40 = multidimensionalCounter39.getSize();
        int[] intArray41 = multidimensionalCounter39.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator42 = multidimensionalCounter39.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator43 = multidimensionalCounter39.iterator();
        int int44 = multidimensionalCounter39.getSize();
        int[] intArray48 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter49 = new org.apache.commons.math.util.MultidimensionalCounter(intArray48);
        int int50 = multidimensionalCounter49.getSize();
        int[] intArray51 = multidimensionalCounter49.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator52 = multidimensionalCounter49.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator53 = multidimensionalCounter49.iterator();
        int[] intArray57 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter58 = new org.apache.commons.math.util.MultidimensionalCounter(intArray57);
        int int59 = multidimensionalCounter58.getDimension();
        int[] intArray61 = multidimensionalCounter58.getCounts((int) (short) 10);
        int int62 = multidimensionalCounter49.getCount(intArray61);
        int int63 = multidimensionalCounter39.getCount(intArray61);
        int int64 = multidimensionalCounter4.getCount(intArray61);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter65 = new org.apache.commons.math.util.MultidimensionalCounter(intArray61);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator42);
        org.junit.Assert.assertNotNull(iterator43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator52);
        org.junit.Assert.assertNotNull(iterator53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        boolean boolean9 = iterator7.hasNext();
        int[] intArray10 = iterator7.getCounts();
        int int12 = iterator7.getCount((int) (byte) 0);
        boolean boolean13 = iterator7.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = multidimensionalCounter4.getSize();
        int[] intArray17 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int int19 = multidimensionalCounter18.getSize();
        int[] intArray20 = multidimensionalCounter18.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter18.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator22 = multidimensionalCounter18.iterator();
        int[] intArray23 = multidimensionalCounter18.getSizes();
        int[] intArray24 = multidimensionalCounter18.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter25 = new org.apache.commons.math.util.MultidimensionalCounter(intArray24);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter25.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getSize();
        int[] intArray33 = multidimensionalCounter31.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator34 = multidimensionalCounter31.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator35 = multidimensionalCounter31.iterator();
        int int36 = multidimensionalCounter31.getSize();
        int[] intArray37 = multidimensionalCounter31.getSizes();
        int[] intArray39 = multidimensionalCounter31.getCounts((int) (byte) 1);
        int int40 = multidimensionalCounter25.getCount(intArray39);
        int int41 = multidimensionalCounter4.getCount(intArray39);
        java.util.Spliterator<java.lang.Integer> intSpliterator42 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = multidimensionalCounter4.getCounts((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(iterator22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator34);
        org.junit.Assert.assertNotNull(iterator35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(intSpliterator42);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        boolean boolean11 = iterator8.hasNext();
        int[] intArray12 = iterator8.getCounts();
        int[] intArray13 = iterator8.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = iterator8.getCount((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0]");
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter7.spliterator();
        int[] intArray11 = multidimensionalCounter7.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int int9 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intSpliterator10);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int12 = multidimensionalCounter4.getSize();
        int int13 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        int int15 = iterator14.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = iterator9.getCount((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        boolean boolean9 = iterator8.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass8 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        boolean boolean9 = iterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = iterator7.getCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass11 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        int int13 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        int[] intArray15 = iterator14.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = multidimensionalCounter4.getCount(intArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 0] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, -1]");
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        int[] intArray11 = iterator8.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, -1]");
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray12 = multidimensionalCounter4.getCounts((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[9, 7, 0]");
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = iterator9.getCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter8 = new org.apache.commons.math.util.MultidimensionalCounter(intArray7);
        java.lang.Class<?> wildcardClass9 = multidimensionalCounter8.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter13.iterator();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getDimension();
        int[] intArray25 = multidimensionalCounter22.getCounts((int) (short) 10);
        int int26 = multidimensionalCounter13.getCount(intArray25);
        int int27 = multidimensionalCounter7.getCount(intArray25);
        int[] intArray29 = multidimensionalCounter7.getCounts((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[5, 2, 0]");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int[] intArray12 = multidimensionalCounter4.getCounts(100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, 0, 0]");
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = iterator8.getCounts();
        java.lang.Class<?> wildcardClass10 = iterator8.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = iterator8.getCount();
        int[] intArray10 = iterator8.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, -1]");
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        int int15 = multidimensionalCounter11.getDimension();
        int int16 = multidimensionalCounter11.getDimension();
        int[] intArray18 = multidimensionalCounter11.getCounts((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[3, 2, 0]");
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int int11 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intSpliterator12);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int int19 = multidimensionalCounter14.getSize();
        int[] intArray20 = multidimensionalCounter14.getSizes();
        int[] intArray22 = multidimensionalCounter14.getCounts((int) (byte) 1);
        int[] intArray23 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter24 = new org.apache.commons.math.util.MultidimensionalCounter(intArray23);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = multidimensionalCounter4.getCount(intArray23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getCounts(100);
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getSize();
        int[] intArray17 = multidimensionalCounter15.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter15.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter15.iterator();
        int int20 = multidimensionalCounter15.getSize();
        int[] intArray21 = multidimensionalCounter15.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = multidimensionalCounter4.getCount(intArray21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter12.spliterator();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (short) 10);
        int int19 = multidimensionalCounter4.getCount(intArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator20 = multidimensionalCounter4.spliterator();
        int int21 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertNotNull(intSpliterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        int[] intArray9 = iterator7.getCounts();
        int[] intArray10 = iterator7.getCounts();
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = multidimensionalCounter4.getCounts(10);
        int[] intArray12 = multidimensionalCounter4.getCounts(1);
        int[] intArray13 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = multidimensionalCounter14.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        int int12 = iterator8.getCount((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = iterator8.getCount((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) (short) 0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass10 = iterator9.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getDimension();
        int int19 = multidimensionalCounter17.getDimension();
        int int20 = multidimensionalCounter17.getSize();
        int[] intArray24 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter25 = new org.apache.commons.math.util.MultidimensionalCounter(intArray24);
        int int26 = multidimensionalCounter25.getSize();
        int[] intArray27 = multidimensionalCounter25.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator28 = multidimensionalCounter25.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator29 = multidimensionalCounter25.iterator();
        int int30 = multidimensionalCounter25.getSize();
        int[] intArray34 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter35 = new org.apache.commons.math.util.MultidimensionalCounter(intArray34);
        int int36 = multidimensionalCounter35.getSize();
        int[] intArray37 = multidimensionalCounter35.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator38 = multidimensionalCounter35.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter35.iterator();
        int[] intArray43 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter44 = new org.apache.commons.math.util.MultidimensionalCounter(intArray43);
        int int45 = multidimensionalCounter44.getDimension();
        int[] intArray47 = multidimensionalCounter44.getCounts((int) (short) 10);
        int int48 = multidimensionalCounter35.getCount(intArray47);
        int int49 = multidimensionalCounter25.getCount(intArray47);
        int int50 = multidimensionalCounter17.getCount(intArray47);
        int int51 = multidimensionalCounter17.getSize();
        int[] intArray52 = multidimensionalCounter17.getSizes();
        int int53 = multidimensionalCounter17.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator54 = multidimensionalCounter17.iterator();
        int[] intArray55 = multidimensionalCounter17.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int56 = multidimensionalCounter4.getCount(intArray55);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator28);
        org.junit.Assert.assertNotNull(iterator29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator38);
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(iterator54);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[32, 10, 1]");
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int[] intArray15 = multidimensionalCounter4.getCounts((int) (short) 1);
        int[] intArray19 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        int int21 = multidimensionalCounter20.getSize();
        int[] intArray22 = multidimensionalCounter20.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter23.iterator();
        int[] intArray26 = multidimensionalCounter23.getCounts((int) 'a');
        int[] intArray27 = multidimensionalCounter23.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator28 = multidimensionalCounter23.iterator();
        int int30 = iterator28.getCount(0);
        int[] intArray31 = iterator28.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = multidimensionalCounter4.getCount(intArray31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 0] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, -1]");
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray10 = multidimensionalCounter7.getCounts((int) 'a');
        int[] intArray12 = multidimensionalCounter7.getCounts((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, 0, 0]");
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass14 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter11.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 0);
        java.lang.Class<?> wildcardClass11 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (short) 10);
        int int13 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray24 = multidimensionalCounter21.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter21.iterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        int int34 = multidimensionalCounter21.getCount(intArray33);
        int int35 = multidimensionalCounter15.getCount(intArray33);
        int int36 = multidimensionalCounter4.getCount(intArray33);
        int[] intArray38 = multidimensionalCounter4.getCounts((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter39 = new org.apache.commons.math.util.MultidimensionalCounter(intArray38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 0, 0]");
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int int12 = multidimensionalCounter4.getSize();
        int int13 = multidimensionalCounter4.getSize();
        int[] intArray17 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int[] intArray20 = multidimensionalCounter18.getCounts((int) (short) 0);
        int[] intArray22 = multidimensionalCounter18.getCounts((int) '#');
        int[] intArray24 = multidimensionalCounter18.getCounts(10);
        int[] intArray26 = multidimensionalCounter18.getCounts(1);
        int[] intArray27 = multidimensionalCounter18.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter28 = new org.apache.commons.math.util.MultidimensionalCounter(intArray27);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = multidimensionalCounter4.getCount(intArray27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 1]");
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 10);
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter40 = new org.apache.commons.math.util.MultidimensionalCounter(intArray39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = multidimensionalCounter40.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intSpliterator8);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts(0);
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        int int8 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass9 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter7.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = iterator9.getCount((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = multidimensionalCounter4.getCounts(10);
        int[] intArray12 = multidimensionalCounter4.getCounts(1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int int13 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter11.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = multidimensionalCounter11.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator12);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter7.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter7.spliterator();
        int[] intArray12 = multidimensionalCounter7.getCounts((int) (short) 10);
        int int13 = multidimensionalCounter7.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts(10);
        int int9 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getCounts((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 0, 0]");
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        int int11 = multidimensionalCounter4.getDimension();
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int int17 = multidimensionalCounter16.getDimension();
        int int18 = multidimensionalCounter16.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter16.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator20 = multidimensionalCounter16.spliterator();
        int[] intArray21 = multidimensionalCounter16.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = multidimensionalCounter4.getCount(intArray21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertNotNull(intSpliterator20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int12 = multidimensionalCounter4.getSize();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        boolean boolean21 = iterator20.hasNext();
        int[] intArray22 = iterator20.getCounts();
        int int23 = multidimensionalCounter4.getCount(intArray22);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter4.iterator();
        int[] intArray28 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter29 = new org.apache.commons.math.util.MultidimensionalCounter(intArray28);
        int int30 = multidimensionalCounter29.getSize();
        int[] intArray32 = multidimensionalCounter29.getCounts((int) (short) 10);
        int[] intArray33 = multidimensionalCounter29.getSizes();
        int[] intArray35 = multidimensionalCounter29.getCounts(100);
        int int36 = multidimensionalCounter4.getCount(intArray35);
        int[] intArray40 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter41 = new org.apache.commons.math.util.MultidimensionalCounter(intArray40);
        int int42 = multidimensionalCounter41.getDimension();
        int[] intArray43 = multidimensionalCounter41.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator44 = multidimensionalCounter41.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator45 = multidimensionalCounter41.spliterator();
        int[] intArray47 = multidimensionalCounter41.getCounts((int) (short) 10);
        int[] intArray48 = multidimensionalCounter41.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int49 = multidimensionalCounter4.getCount(intArray48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator44);
        org.junit.Assert.assertNotNull(intSpliterator45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, 10, 1]");
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        boolean boolean7 = iterator6.hasNext();
        int[] intArray8 = iterator6.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = iterator6.getCount((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0]");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray19 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator20 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator20);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray14 = multidimensionalCounter12.getCounts(0);
        int int15 = multidimensionalCounter12.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass11 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = iterator6.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, -1]");
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = iterator7.getCount();
        int[] intArray9 = iterator7.getCounts();
        int[] intArray10 = iterator7.getCounts();
        boolean boolean11 = iterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = iterator7.getCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getDimension();
        int int14 = multidimensionalCounter4.getSize();
        int int15 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator16.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(iterator16);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts(0);
        int[] intArray12 = multidimensionalCounter4.getCounts((int) '4');
        int[] intArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int14 = multidimensionalCounter4.getCount(intArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[5, 2, 0]");
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray9 = multidimensionalCounter4.getCounts((int) (byte) 0);
        int int10 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        boolean boolean9 = iterator7.hasNext();
        int[] intArray10 = iterator7.getCounts();
        int int12 = iterator7.getCount((int) (byte) 0);
        int int13 = iterator7.getCount();
        int int14 = iterator7.getCount();
        boolean boolean15 = iterator7.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray10 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray11 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = iterator13.getCount((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(iterator13);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = iterator8.getCounts();
        int[] intArray10 = iterator8.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, -1]");
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int int10 = iterator9.getCount();
        boolean boolean11 = iterator9.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter11.iterator();
        int[] intArray16 = multidimensionalCounter11.getSizes();
        int[] intArray18 = multidimensionalCounter11.getCounts(0);
        int int19 = multidimensionalCounter4.getCount(intArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        boolean boolean11 = iterator10.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = iterator10.getCount(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        boolean boolean9 = iterator7.hasNext();
        int[] intArray10 = iterator7.getCounts();
        int int12 = iterator7.getCount(2);
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter11.iterator();
        java.lang.Class<?> wildcardClass17 = multidimensionalCounter11.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        int int16 = iterator14.getCount(0);
        // The following exception was thrown during execution in test generation
        try {
            iterator14.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int int8 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int[] intArray11 = multidimensionalCounter4.getCounts((int) (byte) 0);
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator12);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass10 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = iterator7.getCounts();
        boolean boolean9 = iterator7.hasNext();
        boolean boolean10 = iterator7.hasNext();
        boolean boolean11 = iterator7.hasNext();
        int int12 = iterator7.getCount();
        boolean boolean13 = iterator7.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray10 = multidimensionalCounter7.getCounts((int) 'a');
        int[] intArray11 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter7.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = iterator12.getCount(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass9 = iterator8.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator12.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int int19 = multidimensionalCounter4.getDimension();
        int int20 = multidimensionalCounter4.getDimension();
        int[] intArray24 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter25 = new org.apache.commons.math.util.MultidimensionalCounter(intArray24);
        int int26 = multidimensionalCounter25.getDimension();
        int[] intArray27 = multidimensionalCounter25.getSizes();
        int int28 = multidimensionalCounter25.getSize();
        int[] intArray30 = multidimensionalCounter25.getCounts(0);
        int[] intArray32 = multidimensionalCounter25.getCounts(100);
        int int33 = multidimensionalCounter4.getCount(intArray32);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray35 = multidimensionalCounter4.getCounts((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        boolean boolean12 = iterator11.hasNext();
        int[] intArray13 = iterator11.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0]");
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator12.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass8 = intSpliterator7.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = iterator7.getCounts();
        boolean boolean9 = iterator7.hasNext();
        boolean boolean10 = iterator7.hasNext();
        boolean boolean11 = iterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        int int15 = multidimensionalCounter11.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = multidimensionalCounter11.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int int10 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(intSpliterator11);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        int[] intArray15 = multidimensionalCounter11.getCounts((int) (byte) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter11.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator16.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator16);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int11 = iterator8.getCount(0);
        int int12 = iterator8.getCount();
        int int13 = iterator8.getCount();
        int int14 = iterator8.getCount();
        int int15 = iterator8.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray10 = multidimensionalCounter7.getCounts((int) 'a');
        int[] intArray11 = multidimensionalCounter7.getSizes();
        java.lang.Class<?> wildcardClass12 = multidimensionalCounter7.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = iterator7.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = iterator8.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        int int16 = iterator14.getCount(0);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = iterator14.getCount((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray10 = multidimensionalCounter7.getCounts(10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = iterator7.getCount();
        boolean boolean9 = iterator7.hasNext();
        int int10 = iterator7.getCount();
        java.lang.Class<?> wildcardClass11 = iterator7.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int[] intArray12 = multidimensionalCounter4.getSizes();
        int[] intArray14 = multidimensionalCounter4.getCounts(100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 0, 0]");
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts(10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        int[] intArray9 = iterator7.getCounts();
        boolean boolean10 = iterator7.hasNext();
        int[] intArray11 = iterator7.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 1, 0]");
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        boolean boolean10 = iterator8.hasNext();
        int int11 = iterator8.getCount();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter8 = new org.apache.commons.math.util.MultidimensionalCounter(intArray7);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray7);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = multidimensionalCounter10.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter11.iterator();
        int[] intArray16 = multidimensionalCounter11.getSizes();
        int[] intArray18 = multidimensionalCounter11.getCounts(0);
        int int19 = multidimensionalCounter4.getCount(intArray18);
        int[] intArray20 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = multidimensionalCounter21.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getDimension();
        int int14 = multidimensionalCounter4.getSize();
        int int15 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass17 = iterator16.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getCounts(0);
        int[] intArray11 = multidimensionalCounter4.getCounts(100);
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator12);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = multidimensionalCounter4.getSize();
        int int14 = multidimensionalCounter4.getSize();
        int int15 = multidimensionalCounter4.getDimension();
        int int16 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        int int15 = iterator14.getCount();
        int int16 = iterator14.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = iterator8.getCount();
        int int11 = iterator8.getCount((int) (byte) 0);
        int int12 = iterator8.getCount();
        int int13 = iterator8.getCount();
        int int15 = iterator8.getCount((int) (short) 0);
        boolean boolean16 = iterator8.hasNext();
        int int17 = iterator8.getCount();
        boolean boolean18 = iterator8.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = iterator8.getCount();
        int int11 = iterator8.getCount((int) (byte) 0);
        int int12 = iterator8.getCount();
        int int13 = iterator8.getCount();
        int int15 = iterator8.getCount((int) (short) 0);
        boolean boolean16 = iterator8.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = iterator8.getCount((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter10.iterator();
        int int12 = multidimensionalCounter10.getDimension();
        java.lang.Class<?> wildcardClass13 = multidimensionalCounter10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int int11 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, 0, 0]");
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        boolean boolean9 = iterator7.hasNext();
        int[] intArray10 = iterator7.getCounts();
        int[] intArray11 = iterator7.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 1, 0]");
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        int int11 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass13 = iterator12.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        int[] intArray9 = iterator7.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter17.iterator();
        int[] intArray22 = multidimensionalCounter17.getSizes();
        int[] intArray24 = multidimensionalCounter17.getCounts(0);
        int[] intArray25 = multidimensionalCounter17.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = multidimensionalCounter4.getCount(intArray25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray13 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray15 = multidimensionalCounter4.getCounts((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[3, 2, 0]");
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        int[] intArray11 = multidimensionalCounter4.getSizes();
        int[] intArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = multidimensionalCounter4.getCount(intArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int11 = iterator8.getCount((int) (short) 1);
        int int12 = iterator8.getCount();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int[] intArray17 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int int19 = multidimensionalCounter18.getDimension();
        int[] intArray20 = multidimensionalCounter18.getSizes();
        int[] intArray22 = multidimensionalCounter18.getCounts((int) 'a');
        int int23 = multidimensionalCounter18.getSize();
        int int24 = multidimensionalCounter18.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter18.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter18.iterator();
        int int27 = multidimensionalCounter18.getSize();
        int[] intArray28 = multidimensionalCounter18.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = multidimensionalCounter4.getCount(intArray28);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, 10, 1]");
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass9 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray17 = iterator16.getCounts();
        int int18 = iterator16.getCount();
        boolean boolean19 = iterator16.hasNext();
        int[] intArray20 = iterator16.getCounts();
        int int21 = multidimensionalCounter4.getCount(intArray20);
        int[] intArray22 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator23 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator23);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray11 = multidimensionalCounter4.getCounts(2);
        int[] intArray12 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 2, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator13);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray12 = multidimensionalCounter10.getCounts((int) (byte) 10);
        int int13 = multidimensionalCounter10.getSize();
        int[] intArray15 = multidimensionalCounter10.getCounts((int) (short) 0);
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter10.spliterator();
        int int17 = multidimensionalCounter10.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter10.iterator();
        int int19 = iterator18.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray24 = multidimensionalCounter21.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter21.iterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        int int34 = multidimensionalCounter21.getCount(intArray33);
        int int35 = multidimensionalCounter15.getCount(intArray33);
        int int36 = multidimensionalCounter4.getCount(intArray33);
        java.util.Spliterator<java.lang.Integer> intSpliterator37 = multidimensionalCounter4.spliterator();
        int[] intArray41 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter42 = new org.apache.commons.math.util.MultidimensionalCounter(intArray41);
        int int43 = multidimensionalCounter42.getSize();
        int[] intArray44 = multidimensionalCounter42.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator45 = multidimensionalCounter42.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator46 = multidimensionalCounter42.iterator();
        int int47 = multidimensionalCounter42.getSize();
        int[] intArray48 = multidimensionalCounter42.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int49 = multidimensionalCounter4.getCount(intArray48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intSpliterator37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator45);
        org.junit.Assert.assertNotNull(iterator46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, 10, 1]");
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray9 = multidimensionalCounter4.getCounts((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = iterator7.getCounts();
        int int10 = iterator7.getCount((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = iterator7.getCount(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray12 = multidimensionalCounter10.getCounts((int) (byte) 10);
        int int13 = multidimensionalCounter10.getSize();
        int[] intArray15 = multidimensionalCounter10.getCounts((int) (short) 0);
        int int16 = multidimensionalCounter10.getDimension();
        int[] intArray17 = multidimensionalCounter10.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = iterator11.getCount((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = iterator6.getCounts();
        int int9 = iterator6.getCount(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray14 = multidimensionalCounter4.getCounts((int) ' ');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        int[] intArray16 = iterator15.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[3, 2, 0]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, -1]");
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray11 = multidimensionalCounter4.getCounts((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = iterator7.getCounts();
        boolean boolean9 = iterator7.hasNext();
        boolean boolean10 = iterator7.hasNext();
        boolean boolean11 = iterator7.hasNext();
        int int12 = iterator7.getCount();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = iterator7.getCount(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int int19 = multidimensionalCounter4.getSize();
        int int20 = multidimensionalCounter4.getDimension();
        int[] intArray21 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        boolean boolean9 = iterator7.hasNext();
        int[] intArray10 = iterator7.getCounts();
        boolean boolean11 = iterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int int12 = multidimensionalCounter4.getSize();
        int[] intArray13 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray15 = multidimensionalCounter4.getCounts((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter11.spliterator();
        int[] intArray17 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int[] intArray20 = multidimensionalCounter18.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator21 = multidimensionalCounter18.spliterator();
        int[] intArray25 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter26 = new org.apache.commons.math.util.MultidimensionalCounter(intArray25);
        int int27 = multidimensionalCounter26.getDimension();
        int int28 = multidimensionalCounter26.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator29 = multidimensionalCounter26.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator30 = multidimensionalCounter26.spliterator();
        int[] intArray32 = multidimensionalCounter26.getCounts((int) (byte) 1);
        int[] intArray36 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter37 = new org.apache.commons.math.util.MultidimensionalCounter(intArray36);
        int int38 = multidimensionalCounter37.getDimension();
        int[] intArray39 = multidimensionalCounter37.getSizes();
        int[] intArray41 = multidimensionalCounter37.getCounts((int) 'a');
        int[] intArray43 = multidimensionalCounter37.getCounts((int) 'a');
        int int44 = multidimensionalCounter26.getCount(intArray43);
        int int45 = multidimensionalCounter18.getCount(intArray43);
        int[] intArray47 = multidimensionalCounter18.getCounts((int) (byte) 0);
        int int48 = multidimensionalCounter18.getDimension();
        int[] intArray52 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter53 = new org.apache.commons.math.util.MultidimensionalCounter(intArray52);
        int int54 = multidimensionalCounter53.getSize();
        int[] intArray55 = multidimensionalCounter53.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator56 = multidimensionalCounter53.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator57 = multidimensionalCounter53.iterator();
        int int58 = multidimensionalCounter53.getSize();
        int[] intArray62 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter63 = new org.apache.commons.math.util.MultidimensionalCounter(intArray62);
        int int64 = multidimensionalCounter63.getSize();
        int[] intArray65 = multidimensionalCounter63.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator66 = multidimensionalCounter63.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator67 = multidimensionalCounter63.iterator();
        int[] intArray71 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter72 = new org.apache.commons.math.util.MultidimensionalCounter(intArray71);
        int int73 = multidimensionalCounter72.getDimension();
        int[] intArray75 = multidimensionalCounter72.getCounts((int) (short) 10);
        int int76 = multidimensionalCounter63.getCount(intArray75);
        int int77 = multidimensionalCounter53.getCount(intArray75);
        int int78 = multidimensionalCounter18.getCount(intArray75);
        int int79 = multidimensionalCounter11.getCount(intArray75);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter80 = new org.apache.commons.math.util.MultidimensionalCounter(intArray75);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator21);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(iterator29);
        org.junit.Assert.assertNotNull(intSpliterator30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNotNull(iterator57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator66);
        org.junit.Assert.assertNotNull(iterator67);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 0);
        int int11 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        int[] intArray9 = multidimensionalCounter4.getCounts(2);
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        int[] intArray12 = multidimensionalCounter4.getCounts(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 2, 0]");
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = iterator7.getCount();
        boolean boolean9 = iterator7.hasNext();
        boolean boolean10 = iterator7.hasNext();
        int int11 = iterator7.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        int int8 = multidimensionalCounter7.getDimension();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getSize();
        int[] intArray15 = multidimensionalCounter13.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter13.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter13.iterator();
        int int18 = multidimensionalCounter13.getSize();
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getSize();
        int[] intArray25 = multidimensionalCounter23.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter23.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator27 = multidimensionalCounter23.iterator();
        int[] intArray31 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter32 = new org.apache.commons.math.util.MultidimensionalCounter(intArray31);
        int int33 = multidimensionalCounter32.getDimension();
        int[] intArray35 = multidimensionalCounter32.getCounts((int) (short) 10);
        int int36 = multidimensionalCounter23.getCount(intArray35);
        int int37 = multidimensionalCounter13.getCount(intArray35);
        int int38 = multidimensionalCounter7.getCount(intArray35);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(iterator27);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = iterator7.getCount();
        int int9 = iterator7.getCount();
        int int10 = iterator7.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter7.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = multidimensionalCounter4.getSize();
        int int14 = multidimensionalCounter4.getSize();
        int[] intArray18 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter19 = new org.apache.commons.math.util.MultidimensionalCounter(intArray18);
        int int20 = multidimensionalCounter19.getSize();
        int[] intArray21 = multidimensionalCounter19.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator22 = multidimensionalCounter19.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator23 = multidimensionalCounter19.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter19.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator25 = multidimensionalCounter19.spliterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator34 = multidimensionalCounter30.iterator();
        int[] intArray36 = multidimensionalCounter30.getCounts((int) (short) 0);
        int[] intArray40 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter41 = new org.apache.commons.math.util.MultidimensionalCounter(intArray40);
        int[] intArray43 = multidimensionalCounter41.getCounts((int) (short) 0);
        int[] intArray47 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter48 = new org.apache.commons.math.util.MultidimensionalCounter(intArray47);
        int int49 = multidimensionalCounter48.getSize();
        int int50 = multidimensionalCounter48.getDimension();
        int[] intArray54 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter55 = new org.apache.commons.math.util.MultidimensionalCounter(intArray54);
        int[] intArray57 = multidimensionalCounter55.getCounts((int) (short) 0);
        int[] intArray59 = multidimensionalCounter55.getCounts(10);
        int int60 = multidimensionalCounter48.getCount(intArray59);
        int int61 = multidimensionalCounter41.getCount(intArray59);
        int int62 = multidimensionalCounter30.getCount(intArray59);
        int int63 = multidimensionalCounter19.getCount(intArray59);
        int int64 = multidimensionalCounter4.getCount(intArray59);
        int int65 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator22);
        org.junit.Assert.assertNotNull(intSpliterator23);
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(intSpliterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        int[] intArray9 = multidimensionalCounter4.getCounts(2);
        int int10 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 2, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = iterator12.getCount();
        int int14 = iterator12.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = iterator7.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = iterator7.getCount((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getDimension();
        int[] intArray17 = multidimensionalCounter15.getSizes();
        int[] intArray19 = multidimensionalCounter15.getCounts((int) 'a');
        int[] intArray21 = multidimensionalCounter15.getCounts((int) 'a');
        int int22 = multidimensionalCounter4.getCount(intArray21);
        int[] intArray26 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter27 = new org.apache.commons.math.util.MultidimensionalCounter(intArray26);
        int int28 = multidimensionalCounter27.getSize();
        int[] intArray29 = multidimensionalCounter27.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator31 = multidimensionalCounter30.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator32 = multidimensionalCounter30.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator33 = multidimensionalCounter30.spliterator();
        int[] intArray35 = multidimensionalCounter30.getCounts((int) (short) 10);
        int[] intArray37 = multidimensionalCounter30.getCounts(0);
        int int38 = multidimensionalCounter4.getCount(intArray37);
        int[] intArray39 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertNotNull(intSpliterator32);
        org.junit.Assert.assertNotNull(intSpliterator33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        int[] intArray15 = multidimensionalCounter11.getCounts((int) (byte) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter11.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = iterator16.getCount(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator16);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int11 = iterator8.getCount(0);
        int int12 = iterator8.getCount();
        boolean boolean13 = iterator8.hasNext();
        boolean boolean14 = iterator8.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = iterator8.getCount((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter6 = new org.apache.commons.math.util.MultidimensionalCounter(intArray5);
        int int7 = multidimensionalCounter6.getDimension();
        int int8 = multidimensionalCounter6.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getSizes();
        int int40 = multidimensionalCounter4.getSize();
        int int41 = multidimensionalCounter4.getDimension();
        java.lang.Class<?> wildcardClass42 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray13 = multidimensionalCounter4.getCounts((int) 'a');
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intSpliterator14);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getSizes();
        int int40 = multidimensionalCounter4.getSize();
        int[] intArray42 = multidimensionalCounter4.getCounts(97);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter43 = new org.apache.commons.math.util.MultidimensionalCounter(intArray42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[9, 7, 0]");
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = iterator7.getCount();
        boolean boolean9 = iterator7.hasNext();
        boolean boolean10 = iterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray14 = multidimensionalCounter12.getCounts(0);
        int[] intArray16 = multidimensionalCounter12.getCounts((int) '#');
        int[] intArray17 = multidimensionalCounter12.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter10.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter10.iterator();
        boolean boolean13 = iterator12.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int[] intArray12 = multidimensionalCounter4.getSizes();
        int[] intArray14 = multidimensionalCounter4.getCounts(100);
        java.lang.Class<?> wildcardClass15 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter4.spliterator();
        int[] intArray14 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray19 = multidimensionalCounter4.getCounts((int) '#');
        int int20 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator21 = multidimensionalCounter4.spliterator();
        int int22 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intSpliterator21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray17 = iterator16.getCounts();
        int int18 = iterator16.getCount();
        boolean boolean19 = iterator16.hasNext();
        int[] intArray20 = iterator16.getCounts();
        int int21 = multidimensionalCounter4.getCount(intArray20);
        int[] intArray22 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator23 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator24 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(intSpliterator24);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = iterator8.getCount();
        int int11 = iterator8.getCount((int) (byte) 0);
        int[] intArray12 = iterator8.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, -1]");
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = multidimensionalCounter4.getSize();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int int8 = multidimensionalCounter4.getDimension();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getSize();
        int[] intArray15 = multidimensionalCounter13.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter13.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter13.iterator();
        int int18 = multidimensionalCounter13.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator19 = multidimensionalCounter13.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter13.iterator();
        int[] intArray22 = multidimensionalCounter13.getCounts((int) 'a');
        int int23 = multidimensionalCounter4.getCount(intArray22);
        int[] intArray25 = multidimensionalCounter4.getCounts((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intSpliterator19);
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[5, 2, 0]");
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        int[] intArray9 = iterator7.getCounts();
        int int10 = iterator7.getCount();
        java.lang.Class<?> wildcardClass11 = iterator7.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray14 = multidimensionalCounter4.getCounts((int) '4');
        int int15 = multidimensionalCounter4.getSize();
        int[] intArray17 = multidimensionalCounter4.getCounts((int) 'a');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[5, 2, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[9, 7, 0]");
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter12.spliterator();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (byte) 1);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray25 = multidimensionalCounter23.getSizes();
        int[] intArray27 = multidimensionalCounter23.getCounts((int) 'a');
        int[] intArray29 = multidimensionalCounter23.getCounts((int) 'a');
        int int30 = multidimensionalCounter12.getCount(intArray29);
        int int31 = multidimensionalCounter4.getCount(intArray29);
        int[] intArray33 = multidimensionalCounter4.getCounts((int) (byte) 0);
        int int34 = multidimensionalCounter4.getDimension();
        int[] intArray38 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter39 = new org.apache.commons.math.util.MultidimensionalCounter(intArray38);
        int int40 = multidimensionalCounter39.getSize();
        int[] intArray41 = multidimensionalCounter39.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator42 = multidimensionalCounter39.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator43 = multidimensionalCounter39.iterator();
        int int44 = multidimensionalCounter39.getSize();
        int[] intArray48 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter49 = new org.apache.commons.math.util.MultidimensionalCounter(intArray48);
        int int50 = multidimensionalCounter49.getSize();
        int[] intArray51 = multidimensionalCounter49.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator52 = multidimensionalCounter49.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator53 = multidimensionalCounter49.iterator();
        int[] intArray57 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter58 = new org.apache.commons.math.util.MultidimensionalCounter(intArray57);
        int int59 = multidimensionalCounter58.getDimension();
        int[] intArray61 = multidimensionalCounter58.getCounts((int) (short) 10);
        int int62 = multidimensionalCounter49.getCount(intArray61);
        int int63 = multidimensionalCounter39.getCount(intArray61);
        int int64 = multidimensionalCounter4.getCount(intArray61);
        int int65 = multidimensionalCounter4.getDimension();
        int[] intArray67 = multidimensionalCounter4.getCounts((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter68 = new org.apache.commons.math.util.MultidimensionalCounter(intArray67);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator42);
        org.junit.Assert.assertNotNull(iterator43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator52);
        org.junit.Assert.assertNotNull(iterator53);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 0, 0]");
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(iterator10);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) (short) 0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray10 = iterator9.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, -1]");
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        int int12 = multidimensionalCounter7.getSize();
        java.lang.Class<?> wildcardClass13 = multidimensionalCounter7.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getDimension();
        int int8 = multidimensionalCounter4.getDimension();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter11.spliterator();
        int int15 = multidimensionalCounter11.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = multidimensionalCounter11.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter11.spliterator();
        java.lang.Class<?> wildcardClass14 = multidimensionalCounter11.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int int11 = multidimensionalCounter4.getDimension();
        int[] intArray13 = multidimensionalCounter4.getCounts(10);
        int[] intArray15 = multidimensionalCounter4.getCounts((int) (byte) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator16);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray12 = multidimensionalCounter10.getCounts((int) (byte) 10);
        int int13 = multidimensionalCounter10.getSize();
        int[] intArray15 = multidimensionalCounter10.getCounts((int) (short) 0);
        int int16 = multidimensionalCounter10.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator17 = multidimensionalCounter10.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intSpliterator17);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray17 = iterator16.getCounts();
        int int18 = iterator16.getCount();
        boolean boolean19 = iterator16.hasNext();
        int[] intArray20 = iterator16.getCounts();
        int int21 = multidimensionalCounter4.getCount(intArray20);
        int[] intArray22 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator23 = multidimensionalCounter4.iterator();
        int int24 = multidimensionalCounter4.getDimension();
        java.lang.Class<?> wildcardClass25 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        int[] intArray16 = multidimensionalCounter4.getCounts((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 0, 0]");
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        java.lang.Class<?> wildcardClass10 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int int8 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int int10 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int int11 = multidimensionalCounter4.getDimension();
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int int17 = multidimensionalCounter16.getDimension();
        int[] intArray18 = multidimensionalCounter16.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter16.iterator();
        int[] intArray20 = multidimensionalCounter16.getSizes();
        int int21 = multidimensionalCounter16.getDimension();
        int[] intArray22 = multidimensionalCounter16.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = multidimensionalCounter4.getCount(intArray22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter12.spliterator();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (byte) 1);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray25 = multidimensionalCounter23.getSizes();
        int[] intArray27 = multidimensionalCounter23.getCounts((int) 'a');
        int[] intArray29 = multidimensionalCounter23.getCounts((int) 'a');
        int int30 = multidimensionalCounter12.getCount(intArray29);
        int int31 = multidimensionalCounter4.getCount(intArray29);
        int[] intArray33 = multidimensionalCounter4.getCounts((int) (byte) 0);
        int[] intArray35 = multidimensionalCounter4.getCounts((int) (short) 100);
        java.lang.Class<?> wildcardClass36 = intArray35.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getSize();
        int[] intArray15 = multidimensionalCounter13.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter13.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter13.iterator();
        int[] intArray18 = multidimensionalCounter13.getSizes();
        int[] intArray20 = multidimensionalCounter13.getCounts(0);
        int[] intArray21 = multidimensionalCounter13.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = multidimensionalCounter4.getCount(intArray21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter4.spliterator();
        int[] intArray14 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator15.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = multidimensionalCounter4.getSize();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray15 = multidimensionalCounter13.getSizes();
        int[] intArray17 = multidimensionalCounter13.getCounts((int) 'a');
        int int18 = multidimensionalCounter13.getSize();
        int int19 = multidimensionalCounter13.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter13.iterator();
        int[] intArray21 = iterator20.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = multidimensionalCounter4.getCount(intArray21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 0] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, -1]");
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        int[] intArray9 = multidimensionalCounter4.getCounts(2);
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter17.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator19 = multidimensionalCounter17.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator20 = multidimensionalCounter17.spliterator();
        int[] intArray22 = multidimensionalCounter17.getCounts((int) (short) 10);
        int int23 = multidimensionalCounter4.getCount(intArray22);
        int int24 = multidimensionalCounter4.getDimension();
        java.lang.Class<?> wildcardClass25 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 2, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intSpliterator19);
        org.junit.Assert.assertNotNull(intSpliterator20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intSpliterator7);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int int11 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int int10 = iterator9.getCount();
        // The following exception was thrown during execution in test generation
        try {
            iterator9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter7.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = iterator9.getCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) (short) 100);
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int int10 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts(10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = iterator9.getCount(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getDimension();
        int[] intArray17 = multidimensionalCounter15.getSizes();
        int[] intArray19 = multidimensionalCounter15.getCounts((int) 'a');
        int[] intArray21 = multidimensionalCounter15.getCounts((int) 'a');
        int int22 = multidimensionalCounter4.getCount(intArray21);
        int[] intArray26 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter27 = new org.apache.commons.math.util.MultidimensionalCounter(intArray26);
        int int28 = multidimensionalCounter27.getSize();
        int[] intArray29 = multidimensionalCounter27.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator31 = multidimensionalCounter30.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator32 = multidimensionalCounter30.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator33 = multidimensionalCounter30.spliterator();
        int[] intArray35 = multidimensionalCounter30.getCounts((int) (short) 10);
        int[] intArray37 = multidimensionalCounter30.getCounts(0);
        int int38 = multidimensionalCounter4.getCount(intArray37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter39 = new org.apache.commons.math.util.MultidimensionalCounter(intArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertNotNull(intSpliterator32);
        org.junit.Assert.assertNotNull(intSpliterator33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = iterator7.getCount();
        int[] intArray9 = iterator7.getCounts();
        int[] intArray10 = iterator7.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = iterator7.getCount(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, -1]");
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray12 = iterator11.getCounts();
        int[] intArray13 = iterator11.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, -1]");
    }
}


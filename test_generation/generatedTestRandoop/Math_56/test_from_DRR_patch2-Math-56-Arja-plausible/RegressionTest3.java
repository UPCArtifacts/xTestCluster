import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int int39 = multidimensionalCounter4.getSize();
        int[] intArray40 = multidimensionalCounter4.getSizes();
        int int41 = multidimensionalCounter4.getSize();
        int int42 = multidimensionalCounter4.getDimension();
        int int43 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getSize();
        int[] intArray17 = multidimensionalCounter15.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        java.util.Spliterator<java.lang.Integer> intSpliterator19 = multidimensionalCounter18.spliterator();
        int[] intArray20 = multidimensionalCounter18.getSizes();
        int[] intArray22 = multidimensionalCounter18.getCounts((int) '4');
        int int23 = multidimensionalCounter4.getCount(intArray22);
        int int24 = multidimensionalCounter4.getSize();
        int[] intArray25 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass26 = intArray25.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[5, 2, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray26 = multidimensionalCounter23.getCounts((int) (short) 10);
        int int27 = multidimensionalCounter14.getCount(intArray26);
        int int28 = multidimensionalCounter4.getCount(intArray26);
        int int29 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator30 = multidimensionalCounter4.spliterator();
        int int31 = multidimensionalCounter4.getDimension();
        int[] intArray33 = multidimensionalCounter4.getCounts(97);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter34 = new org.apache.commons.math.util.MultidimensionalCounter(intArray33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intSpliterator30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[9, 7, 0]");
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int int8 = multidimensionalCounter4.getDimension();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int[] intArray15 = multidimensionalCounter13.getCounts((int) (short) 0);
        int[] intArray17 = multidimensionalCounter13.getCounts((int) '#');
        int[] intArray19 = multidimensionalCounter13.getCounts(10);
        int int20 = multidimensionalCounter4.getCount(intArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getSizes();
        int int40 = multidimensionalCounter4.getSize();
        int[] intArray41 = multidimensionalCounter4.getSizes();
        int[] intArray43 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator44 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator44);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getCounts(0);
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int int11 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter4.iterator();
        int int15 = iterator13.getCount(2);
        int int16 = iterator13.getCount();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = iterator13.getCount(35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getCounts((int) (byte) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int13 = iterator11.getCount((int) (byte) 0);
        int[] intArray14 = iterator11.getCounts();
        int[] intArray15 = iterator11.getCounts();
        int int16 = iterator11.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray24 = multidimensionalCounter21.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter21.iterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        int int34 = multidimensionalCounter21.getCount(intArray33);
        int int35 = multidimensionalCounter15.getCount(intArray33);
        int int36 = multidimensionalCounter4.getCount(intArray33);
        int int37 = multidimensionalCounter4.getDimension();
        int[] intArray39 = multidimensionalCounter4.getCounts(1);
        int int40 = multidimensionalCounter4.getSize();
        int int41 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator42 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator43 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(intSpliterator42);
        org.junit.Assert.assertNotNull(iterator43);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray13 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int[] intArray15 = multidimensionalCounter14.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int int13 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(iterator14);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray9 = multidimensionalCounter4.getCounts(0);
        int[] intArray11 = multidimensionalCounter4.getCounts(1);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray13 = multidimensionalCounter4.getCounts((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 1, 0]");
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = multidimensionalCounter4.getCounts(10);
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter20.iterator();
        int[] intArray25 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter26 = new org.apache.commons.math.util.MultidimensionalCounter(intArray25);
        int int27 = multidimensionalCounter26.getDimension();
        int[] intArray29 = multidimensionalCounter26.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator30 = multidimensionalCounter26.iterator();
        int[] intArray34 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter35 = new org.apache.commons.math.util.MultidimensionalCounter(intArray34);
        int int36 = multidimensionalCounter35.getDimension();
        int[] intArray38 = multidimensionalCounter35.getCounts((int) (short) 10);
        int int39 = multidimensionalCounter26.getCount(intArray38);
        int int40 = multidimensionalCounter20.getCount(intArray38);
        int int41 = multidimensionalCounter4.getCount(intArray38);
        int[] intArray42 = multidimensionalCounter4.getSizes();
        int int43 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int[] intArray15 = multidimensionalCounter13.getCounts((int) (short) 0);
        int[] intArray17 = multidimensionalCounter13.getCounts((int) '#');
        int[] intArray19 = multidimensionalCounter13.getCounts(10);
        int int20 = multidimensionalCounter4.getCount(intArray19);
        int[] intArray21 = multidimensionalCounter4.getSizes();
        int[] intArray23 = multidimensionalCounter4.getCounts(4);
        java.util.Spliterator<java.lang.Integer> intSpliterator24 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass25 = intSpliterator24.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 4, 0]");
        org.junit.Assert.assertNotNull(intSpliterator24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        int int11 = iterator8.getCount();
        int int12 = iterator8.getCount();
        int[] intArray13 = iterator8.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, -1]");
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = iterator8.getCount();
        int int11 = iterator8.getCount((int) (byte) 0);
        int int12 = iterator8.getCount();
        boolean boolean13 = iterator8.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int[] intArray18 = multidimensionalCounter16.getCounts((int) (short) 0);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getSize();
        int int25 = multidimensionalCounter23.getDimension();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int[] intArray32 = multidimensionalCounter30.getCounts((int) (short) 0);
        int[] intArray34 = multidimensionalCounter30.getCounts(10);
        int int35 = multidimensionalCounter23.getCount(intArray34);
        int int36 = multidimensionalCounter16.getCount(intArray34);
        int int37 = multidimensionalCounter11.getCount(intArray34);
        java.util.Spliterator<java.lang.Integer> intSpliterator38 = multidimensionalCounter11.spliterator();
        int[] intArray39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int40 = multidimensionalCounter11.getCount(intArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(intSpliterator38);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int int11 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass13 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int int9 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        int int12 = multidimensionalCounter7.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter7.iterator();
        int int14 = multidimensionalCounter7.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int[] intArray20 = multidimensionalCounter4.getCounts(1);
        int int21 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int[] intArray20 = multidimensionalCounter4.getCounts(10);
        int[] intArray22 = multidimensionalCounter4.getCounts((int) ' ');
        int int23 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[3, 2, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        int[] intArray18 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter19 = new org.apache.commons.math.util.MultidimensionalCounter(intArray18);
        int int20 = multidimensionalCounter19.getSize();
        int[] intArray21 = multidimensionalCounter19.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator22 = multidimensionalCounter19.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator23 = multidimensionalCounter19.iterator();
        int int24 = multidimensionalCounter19.getSize();
        int[] intArray25 = multidimensionalCounter19.getSizes();
        int[] intArray27 = multidimensionalCounter19.getCounts((int) (byte) 1);
        int int28 = multidimensionalCounter11.getCount(intArray27);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator29 = multidimensionalCounter11.iterator();
        int[] intArray30 = iterator29.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator22);
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(iterator29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, -1]");
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        int int12 = multidimensionalCounter7.getDimension();
        int[] intArray13 = multidimensionalCounter7.getSizes();
        int int14 = multidimensionalCounter7.getDimension();
        int int15 = multidimensionalCounter7.getSize();
        int int16 = multidimensionalCounter7.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        boolean boolean11 = iterator8.hasNext();
        int[] intArray12 = iterator8.getCounts();
        boolean boolean13 = iterator8.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator8.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = multidimensionalCounter12.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray11 = multidimensionalCounter10.getSizes();
        java.lang.Class<?> wildcardClass12 = multidimensionalCounter10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int int14 = multidimensionalCounter4.getDimension();
        int[] intArray18 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter19 = new org.apache.commons.math.util.MultidimensionalCounter(intArray18);
        int int20 = multidimensionalCounter19.getDimension();
        int[] intArray22 = multidimensionalCounter19.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator23 = multidimensionalCounter19.iterator();
        int[] intArray24 = multidimensionalCounter19.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter25 = new org.apache.commons.math.util.MultidimensionalCounter(intArray24);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter25.iterator();
        int int27 = multidimensionalCounter25.getDimension();
        int[] intArray29 = multidimensionalCounter25.getCounts(4);
        int int30 = multidimensionalCounter4.getCount(intArray29);
        int[] intArray34 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter35 = new org.apache.commons.math.util.MultidimensionalCounter(intArray34);
        int int36 = multidimensionalCounter35.getSize();
        int[] intArray37 = multidimensionalCounter35.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter38 = new org.apache.commons.math.util.MultidimensionalCounter(intArray37);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter38.iterator();
        int[] intArray41 = multidimensionalCounter38.getCounts((int) 'a');
        int[] intArray42 = multidimensionalCounter38.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator43 = multidimensionalCounter38.iterator();
        int[] intArray44 = iterator43.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = multidimensionalCounter4.getCount(intArray44);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 0] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 4, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, -1]");
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        int[] intArray16 = multidimensionalCounter4.getCounts(3);
        int[] intArray17 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 3, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter7.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter7.spliterator();
        int[] intArray12 = multidimensionalCounter7.getCounts((int) (short) 10);
        int[] intArray13 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter7.iterator();
        int[] intArray15 = iterator14.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, -1]");
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts(10);
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int int11 = iterator10.getCount();
        // The following exception was thrown during execution in test generation
        try {
            iterator10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[3, 5, 0]");
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        int int15 = multidimensionalCounter12.getSize();
        int[] intArray19 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        int int21 = multidimensionalCounter20.getSize();
        int[] intArray22 = multidimensionalCounter20.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator23 = multidimensionalCounter20.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter20.iterator();
        int int25 = multidimensionalCounter20.getSize();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getSize();
        int[] intArray32 = multidimensionalCounter30.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator33 = multidimensionalCounter30.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator34 = multidimensionalCounter30.iterator();
        int[] intArray38 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter39 = new org.apache.commons.math.util.MultidimensionalCounter(intArray38);
        int int40 = multidimensionalCounter39.getDimension();
        int[] intArray42 = multidimensionalCounter39.getCounts((int) (short) 10);
        int int43 = multidimensionalCounter30.getCount(intArray42);
        int int44 = multidimensionalCounter20.getCount(intArray42);
        int int45 = multidimensionalCounter12.getCount(intArray42);
        int int46 = multidimensionalCounter12.getSize();
        int int47 = multidimensionalCounter12.getSize();
        int[] intArray49 = multidimensionalCounter12.getCounts(10);
        int int50 = multidimensionalCounter4.getCount(intArray49);
        int[] intArray51 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator52 = multidimensionalCounter4.iterator();
        int int53 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator33);
        org.junit.Assert.assertNotNull(iterator34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = iterator7.getCount();
        int[] intArray9 = iterator7.getCounts();
        int int10 = iterator7.getCount();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = iterator7.getCount(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter11.iterator();
        int[] intArray17 = multidimensionalCounter11.getCounts((int) 'a');
        int int18 = multidimensionalCounter4.getCount(intArray17);
        int int19 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getDimension();
        int int11 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int14 = iterator12.getCount((int) (byte) 1);
        int[] intArray15 = iterator12.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, -1]");
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int int12 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator15.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(iterator15);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray24 = multidimensionalCounter21.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter21.iterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        int int34 = multidimensionalCounter21.getCount(intArray33);
        int int35 = multidimensionalCounter15.getCount(intArray33);
        int int36 = multidimensionalCounter4.getCount(intArray33);
        int int37 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator38 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter4.iterator();
        int[] intArray40 = iterator39.getCounts();
        boolean boolean41 = iterator39.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(iterator38);
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = iterator8.getCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(iterator8);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        int int12 = multidimensionalCounter7.getDimension();
        int[] intArray13 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts(10);
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getDimension();
        int[] intArray17 = multidimensionalCounter15.getSizes();
        int[] intArray19 = multidimensionalCounter15.getCounts((int) 'a');
        int int20 = multidimensionalCounter15.getSize();
        int int21 = multidimensionalCounter15.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator22 = multidimensionalCounter15.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator23 = multidimensionalCounter15.iterator();
        int int24 = multidimensionalCounter15.getDimension();
        int[] intArray26 = multidimensionalCounter15.getCounts(0);
        int int27 = multidimensionalCounter4.getCount(intArray26);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray29 = multidimensionalCounter4.getCounts((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(iterator22);
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter7.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        int[] intArray12 = multidimensionalCounter7.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray14 = multidimensionalCounter4.getCounts(10);
        int[] intArray15 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int[] intArray10 = iterator8.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, -1]");
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        boolean boolean9 = iterator8.hasNext();
        java.lang.Class<?> wildcardClass10 = iterator8.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getCounts(10);
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int[] intArray14 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int[] intArray19 = multidimensionalCounter17.getCounts((int) '#');
        int int20 = multidimensionalCounter4.getCount(intArray19);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        int[] intArray16 = multidimensionalCounter4.getCounts((int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 1, 0]");
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
        int[] intArray10 = multidimensionalCounter9.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int int8 = multidimensionalCounter4.getDimension();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int[] intArray15 = multidimensionalCounter13.getCounts((int) (short) 0);
        int[] intArray17 = multidimensionalCounter13.getCounts((int) '#');
        int[] intArray19 = multidimensionalCounter13.getCounts(10);
        int int20 = multidimensionalCounter4.getCount(intArray19);
        java.util.Spliterator<java.lang.Integer> intSpliterator21 = multidimensionalCounter4.spliterator();
        int[] intArray23 = multidimensionalCounter4.getCounts((int) (short) 100);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter4.iterator();
        boolean boolean25 = iterator24.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(intSpliterator21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int[] intArray15 = multidimensionalCounter4.getCounts(100);
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter4.spliterator();
        int[] intArray17 = multidimensionalCounter4.getSizes();
        int[] intArray18 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray26 = multidimensionalCounter23.getCounts((int) (short) 10);
        int int27 = multidimensionalCounter14.getCount(intArray26);
        int int28 = multidimensionalCounter4.getCount(intArray26);
        int int29 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator30 = multidimensionalCounter4.iterator();
        int[] intArray32 = multidimensionalCounter4.getCounts(1);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator33 = multidimensionalCounter4.iterator();
        int int34 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(iterator33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray8 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
        int int10 = multidimensionalCounter9.getDimension();
        int int11 = multidimensionalCounter9.getDimension();
        int int12 = multidimensionalCounter9.getSize();
        int int13 = multidimensionalCounter9.getDimension();
        int int14 = multidimensionalCounter9.getSize();
        int[] intArray15 = multidimensionalCounter9.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getSize();
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        int[] intArray18 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter19 = new org.apache.commons.math.util.MultidimensionalCounter(intArray18);
        int int20 = multidimensionalCounter19.getDimension();
        int[] intArray21 = multidimensionalCounter19.getSizes();
        int[] intArray23 = multidimensionalCounter19.getCounts((int) 'a');
        int int24 = multidimensionalCounter19.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter19.iterator();
        int[] intArray26 = iterator25.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = multidimensionalCounter4.getCount(intArray26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 0] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, -1]");
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int12 = iterator11.getCount();
        int int13 = iterator11.getCount();
        int[] intArray14 = iterator11.getCounts();
        boolean boolean15 = iterator11.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(97);
        int[] intArray13 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray15 = multidimensionalCounter4.getCounts((int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 0, 0]");
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        int int6 = multidimensionalCounter4.getSize();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) (short) 100);
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int[] intArray19 = multidimensionalCounter14.getSizes();
        int[] intArray21 = multidimensionalCounter14.getCounts(0);
        int int22 = multidimensionalCounter14.getSize();
        int int23 = multidimensionalCounter14.getSize();
        int[] intArray25 = multidimensionalCounter14.getCounts((int) ' ');
        int int26 = multidimensionalCounter4.getCount(intArray25);
        int int27 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[3, 2, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = iterator7.getCount();
        int[] intArray9 = iterator7.getCounts();
        boolean boolean10 = iterator7.hasNext();
        boolean boolean11 = iterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = iterator7.getCount(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter7.iterator();
        int[] intArray10 = iterator9.getCounts();
        int int11 = iterator9.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter6 = new org.apache.commons.math.util.MultidimensionalCounter(intArray5);
        int int7 = multidimensionalCounter6.getDimension();
        int int8 = multidimensionalCounter6.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter6.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intSpliterator9);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int[] intArray17 = multidimensionalCounter16.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter16.iterator();
        int int19 = multidimensionalCounter16.getSize();
        int[] intArray21 = multidimensionalCounter16.getCounts(10);
        int int22 = multidimensionalCounter4.getCount(intArray21);
        int[] intArray23 = multidimensionalCounter4.getSizes();
        int[] intArray24 = multidimensionalCounter4.getSizes();
        int int25 = multidimensionalCounter4.getSize();
        java.lang.Class<?> wildcardClass26 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        int[] intArray12 = multidimensionalCounter4.getCounts(52);
        int int13 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = iterator15.getCount((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[5, 2, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(iterator15);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int int9 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int int11 = iterator10.getCount();
        int[] intArray12 = iterator10.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, -1]");
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray24 = multidimensionalCounter21.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter21.iterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        int int34 = multidimensionalCounter21.getCount(intArray33);
        int int35 = multidimensionalCounter15.getCount(intArray33);
        int int36 = multidimensionalCounter4.getCount(intArray33);
        int int37 = multidimensionalCounter4.getDimension();
        int int38 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter4.iterator();
        int int40 = iterator39.getCount();
        boolean boolean41 = iterator39.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = iterator6.getCounts();
        int[] intArray8 = iterator6.getCounts();
        boolean boolean9 = iterator6.hasNext();
        boolean boolean10 = iterator6.hasNext();
        boolean boolean11 = iterator6.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter7.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = multidimensionalCounter7.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator6 = multidimensionalCounter4.spliterator();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray9 = multidimensionalCounter4.getCounts(0);
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int int11 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intSpliterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray17 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int int19 = multidimensionalCounter18.getDimension();
        int[] intArray20 = multidimensionalCounter18.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter18.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator22 = multidimensionalCounter18.spliterator();
        int int23 = multidimensionalCounter18.getDimension();
        int[] intArray24 = multidimensionalCounter18.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter25 = new org.apache.commons.math.util.MultidimensionalCounter(intArray24);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = multidimensionalCounter13.getCount(intArray24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(intSpliterator22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter12.spliterator();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (byte) 1);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray25 = multidimensionalCounter23.getSizes();
        int[] intArray27 = multidimensionalCounter23.getCounts((int) 'a');
        int[] intArray29 = multidimensionalCounter23.getCounts((int) 'a');
        int int30 = multidimensionalCounter12.getCount(intArray29);
        int int31 = multidimensionalCounter4.getCount(intArray29);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator32 = multidimensionalCounter4.iterator();
        int int33 = multidimensionalCounter4.getSize();
        int[] intArray35 = multidimensionalCounter4.getCounts((int) (byte) 0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator36 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(iterator32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator36);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int int39 = multidimensionalCounter4.getSize();
        int[] intArray40 = multidimensionalCounter4.getSizes();
        int int41 = multidimensionalCounter4.getSize();
        int int42 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        int int12 = iterator8.getCount((int) (byte) 1);
        boolean boolean13 = iterator8.hasNext();
        boolean boolean14 = iterator8.hasNext();
        int[] intArray15 = iterator8.getCounts();
        int int16 = iterator8.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int11 = iterator8.getCount((int) (byte) 1);
        boolean boolean12 = iterator8.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator11.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(iterator11);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray14 = multidimensionalCounter12.getCounts((int) (byte) 10);
        java.lang.Class<?> wildcardClass15 = multidimensionalCounter12.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        int int13 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 10);
        int int13 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intSpliterator14);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator6 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass7 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intSpliterator6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        int int13 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator15 = multidimensionalCounter11.spliterator();
        int[] intArray17 = multidimensionalCounter11.getCounts((int) (byte) 1);
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getDimension();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        int[] intArray26 = multidimensionalCounter22.getCounts((int) 'a');
        int[] intArray28 = multidimensionalCounter22.getCounts((int) 'a');
        int int29 = multidimensionalCounter11.getCount(intArray28);
        int int30 = multidimensionalCounter4.getCount(intArray28);
        java.lang.Class<?> wildcardClass31 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intSpliterator15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = iterator15.getCount(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(iterator15);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter11.spliterator();
        int int14 = multidimensionalCounter11.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter11.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(iterator15);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray19 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator20 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator20);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (short) 10);
        int int13 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(iterator14);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getCounts(10);
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(iterator13);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        boolean boolean9 = iterator7.hasNext();
        int[] intArray10 = iterator7.getCounts();
        int[] intArray11 = iterator7.getCounts();
        boolean boolean12 = iterator7.hasNext();
        boolean boolean13 = iterator7.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = iterator6.getCounts();
        boolean boolean8 = iterator6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray12 = multidimensionalCounter10.getCounts((int) (byte) 10);
        int[] intArray14 = multidimensionalCounter10.getCounts((int) (short) 100);
        int[] intArray15 = multidimensionalCounter10.getSizes();
        int[] intArray17 = multidimensionalCounter10.getCounts((int) '4');
        int int18 = multidimensionalCounter10.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[5, 2, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray8 = multidimensionalCounter4.getCounts((int) (byte) 10);
        int int9 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(iterator10);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        int int12 = multidimensionalCounter4.getDimension();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getDimension();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator21 = multidimensionalCounter17.spliterator();
        int[] intArray23 = multidimensionalCounter17.getCounts((int) (short) 10);
        int int24 = multidimensionalCounter4.getCount(intArray23);
        int int25 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter4.iterator();
        int[] intArray27 = iterator26.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(intSpliterator21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -1]");
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        java.lang.Class<?> wildcardClass11 = multidimensionalCounter10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter5 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int6 = multidimensionalCounter5.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter5.iterator();
        int int9 = iterator7.getCount((int) (short) 1);
        int int10 = iterator7.getCount();
        boolean boolean11 = iterator7.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getSize();
        int int14 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator15 = multidimensionalCounter4.spliterator();
        int int16 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter4.iterator();
        int int18 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intSpliterator15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter11.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter11.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(intSpliterator14);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts(10);
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int int11 = multidimensionalCounter10.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter10.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = iterator6.getCounts();
        int[] intArray8 = iterator6.getCounts();
        boolean boolean9 = iterator6.hasNext();
        boolean boolean10 = iterator6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int int39 = multidimensionalCounter4.getSize();
        int[] intArray41 = multidimensionalCounter4.getCounts(10);
        int[] intArray42 = multidimensionalCounter4.getSizes();
        int int43 = multidimensionalCounter4.getSize();
        int[] intArray45 = multidimensionalCounter4.getCounts(0);
        int[] intArray47 = multidimensionalCounter4.getCounts((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0]");
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 10);
        int int13 = multidimensionalCounter4.getDimension();
        int int14 = multidimensionalCounter4.getSize();
        int[] intArray16 = multidimensionalCounter4.getCounts(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0]");
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray10 = multidimensionalCounter7.getCounts((int) 'a');
        int[] intArray11 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter7.iterator();
        int int13 = multidimensionalCounter7.getSize();
        int int14 = multidimensionalCounter7.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray12 = multidimensionalCounter11.getSizes();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) (short) 100);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        boolean boolean10 = iterator9.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getDimension();
        int[] intArray17 = multidimensionalCounter14.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray26 = multidimensionalCounter23.getCounts((int) (short) 10);
        int int27 = multidimensionalCounter14.getCount(intArray26);
        int int28 = multidimensionalCounter4.getCount(intArray26);
        int int29 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter6 = new org.apache.commons.math.util.MultidimensionalCounter(intArray5);
        int int7 = multidimensionalCounter6.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter6.iterator();
        int int9 = iterator8.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter7.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter7.spliterator();
        int[] intArray12 = multidimensionalCounter7.getCounts((int) (short) 10);
        int[] intArray13 = multidimensionalCounter7.getSizes();
        int int14 = multidimensionalCounter7.getSize();
        int[] intArray15 = multidimensionalCounter7.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = multidimensionalCounter4.getCounts(10);
        int[] intArray12 = multidimensionalCounter4.getCounts(1);
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        boolean boolean15 = iterator14.hasNext();
        boolean boolean16 = iterator14.hasNext();
        int int17 = iterator14.getCount();
        int int18 = iterator14.getCount();
        // The following exception was thrown during execution in test generation
        try {
            iterator14.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (short) 10);
        int int13 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        int[] intArray16 = iterator15.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, -1]");
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int[] intArray19 = multidimensionalCounter4.getSizes();
        int[] intArray20 = multidimensionalCounter4.getSizes();
        int int21 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getDimension();
        int int8 = multidimensionalCounter4.getDimension();
        int int9 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int[] intArray20 = multidimensionalCounter4.getCounts(10);
        int[] intArray21 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator22 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = iterator22.getCount((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator22);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray13 = multidimensionalCounter11.getCounts(0);
        int int14 = multidimensionalCounter11.getDimension();
        int int15 = multidimensionalCounter11.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        int int11 = iterator8.getCount();
        boolean boolean12 = iterator8.hasNext();
        boolean boolean13 = iterator8.hasNext();
        boolean boolean14 = iterator8.hasNext();
        int int15 = iterator8.getCount();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = iterator8.getCount((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        boolean boolean9 = iterator7.hasNext();
        int[] intArray10 = iterator7.getCounts();
        int[] intArray11 = iterator7.getCounts();
        boolean boolean12 = iterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = iterator7.getCount((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        int int13 = multidimensionalCounter11.getDimension();
        int int14 = multidimensionalCounter11.getSize();
        int[] intArray15 = multidimensionalCounter11.getSizes();
        int[] intArray19 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        int int21 = multidimensionalCounter20.getDimension();
        int int22 = multidimensionalCounter20.getDimension();
        int int23 = multidimensionalCounter20.getSize();
        int[] intArray27 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter28 = new org.apache.commons.math.util.MultidimensionalCounter(intArray27);
        int int29 = multidimensionalCounter28.getSize();
        int[] intArray30 = multidimensionalCounter28.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator31 = multidimensionalCounter28.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator32 = multidimensionalCounter28.iterator();
        int int33 = multidimensionalCounter28.getSize();
        int[] intArray37 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter38 = new org.apache.commons.math.util.MultidimensionalCounter(intArray37);
        int int39 = multidimensionalCounter38.getSize();
        int[] intArray40 = multidimensionalCounter38.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator41 = multidimensionalCounter38.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator42 = multidimensionalCounter38.iterator();
        int[] intArray46 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter47 = new org.apache.commons.math.util.MultidimensionalCounter(intArray46);
        int int48 = multidimensionalCounter47.getDimension();
        int[] intArray50 = multidimensionalCounter47.getCounts((int) (short) 10);
        int int51 = multidimensionalCounter38.getCount(intArray50);
        int int52 = multidimensionalCounter28.getCount(intArray50);
        int int53 = multidimensionalCounter20.getCount(intArray50);
        int int54 = multidimensionalCounter20.getSize();
        int[] intArray55 = multidimensionalCounter20.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator56 = multidimensionalCounter20.iterator();
        int[] intArray58 = multidimensionalCounter20.getCounts(100);
        int int59 = multidimensionalCounter11.getCount(intArray58);
        int int60 = multidimensionalCounter11.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertNotNull(iterator32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(iterator42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        int[] intArray16 = multidimensionalCounter4.getCounts(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0]");
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray10 = multidimensionalCounter7.getCounts((int) 'a');
        int[] intArray11 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter7.iterator();
        int int13 = multidimensionalCounter7.getDimension();
        int[] intArray14 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) 'a');
        int int11 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intSpliterator12);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getCounts(10);
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int int14 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter19 = new org.apache.commons.math.util.MultidimensionalCounter(intArray18);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter19.iterator();
        int int21 = multidimensionalCounter19.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        java.util.Spliterator<java.lang.Integer> intSpliterator38 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator40 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(intSpliterator38);
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(iterator40);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int int10 = multidimensionalCounter7.getDimension();
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getDimension();
        int[] intArray18 = multidimensionalCounter15.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter15.iterator();
        int[] intArray20 = multidimensionalCounter15.getSizes();
        int int21 = multidimensionalCounter15.getSize();
        int[] intArray22 = multidimensionalCounter15.getSizes();
        int[] intArray23 = multidimensionalCounter15.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter24 = new org.apache.commons.math.util.MultidimensionalCounter(intArray23);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter25 = new org.apache.commons.math.util.MultidimensionalCounter(intArray23);
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getSize();
        int[] intArray32 = multidimensionalCounter30.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator33 = multidimensionalCounter30.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator34 = multidimensionalCounter30.iterator();
        int int35 = multidimensionalCounter30.getSize();
        int[] intArray36 = multidimensionalCounter30.getSizes();
        int[] intArray38 = multidimensionalCounter30.getCounts((int) (byte) 1);
        int int39 = multidimensionalCounter25.getCount(intArray38);
        int int40 = multidimensionalCounter7.getCount(intArray38);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator41 = multidimensionalCounter7.iterator();
        int[] intArray42 = multidimensionalCounter7.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator43 = multidimensionalCounter7.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator33);
        org.junit.Assert.assertNotNull(iterator34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator43);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray12 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter11.iterator();
        int[] intArray16 = multidimensionalCounter11.getSizes();
        int[] intArray18 = multidimensionalCounter11.getCounts(0);
        int int19 = multidimensionalCounter4.getCount(intArray18);
        int int20 = multidimensionalCounter4.getSize();
        int[] intArray22 = multidimensionalCounter4.getCounts((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator23 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator23);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
        java.lang.Class<?> wildcardClass10 = multidimensionalCounter9.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter7.spliterator();
        int int12 = multidimensionalCounter7.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = iterator7.getCount(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = iterator8.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray10 = iterator9.getCounts();
        boolean boolean11 = iterator9.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray26 = multidimensionalCounter23.getCounts((int) (short) 10);
        int int27 = multidimensionalCounter14.getCount(intArray26);
        int int28 = multidimensionalCounter4.getCount(intArray26);
        int int29 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator30 = multidimensionalCounter4.spliterator();
        int int31 = multidimensionalCounter4.getDimension();
        int[] intArray33 = multidimensionalCounter4.getCounts(97);
        java.util.Spliterator<java.lang.Integer> intSpliterator34 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator35 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator36 = multidimensionalCounter4.spliterator();
        int[] intArray37 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator38 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intSpliterator30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intSpliterator34);
        org.junit.Assert.assertNotNull(intSpliterator35);
        org.junit.Assert.assertNotNull(intSpliterator36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator38);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray11 = multidimensionalCounter10.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray17 = iterator16.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, -1]");
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray10 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray24 = multidimensionalCounter21.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter21.iterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        int int34 = multidimensionalCounter21.getCount(intArray33);
        int int35 = multidimensionalCounter15.getCount(intArray33);
        int int36 = multidimensionalCounter4.getCount(intArray33);
        java.util.Spliterator<java.lang.Integer> intSpliterator37 = multidimensionalCounter4.spliterator();
        int int38 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter4.iterator();
        int[] intArray40 = multidimensionalCounter4.getSizes();
        int[] intArray41 = multidimensionalCounter4.getSizes();
        int int42 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intSpliterator37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int int19 = multidimensionalCounter4.getDimension();
        int int20 = multidimensionalCounter4.getSize();
        int[] intArray22 = multidimensionalCounter4.getCounts(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 0, 0]");
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        int[] intArray16 = multidimensionalCounter4.getCounts(0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray18 = multidimensionalCounter4.getCounts((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0]");
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int[] intArray19 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter7.spliterator();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        int[] intArray11 = multidimensionalCounter7.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter7.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int[] intArray11 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter13.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator14);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int int8 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int int10 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) ' ');
        int[] intArray14 = multidimensionalCounter4.getCounts((int) (short) 100);
        int int15 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[3, 2, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray12 = multidimensionalCounter10.getCounts((int) (byte) 10);
        int int13 = multidimensionalCounter10.getSize();
        int[] intArray17 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int int19 = multidimensionalCounter18.getDimension();
        int[] intArray20 = multidimensionalCounter18.getSizes();
        int[] intArray22 = multidimensionalCounter18.getCounts((int) 'a');
        int int23 = multidimensionalCounter18.getSize();
        int int24 = multidimensionalCounter18.getSize();
        int int25 = multidimensionalCounter18.getSize();
        int[] intArray27 = multidimensionalCounter18.getCounts(4);
        int int28 = multidimensionalCounter10.getCount(intArray27);
        int[] intArray32 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter33 = new org.apache.commons.math.util.MultidimensionalCounter(intArray32);
        int int34 = multidimensionalCounter33.getSize();
        int[] intArray35 = multidimensionalCounter33.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator36 = multidimensionalCounter33.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator37 = multidimensionalCounter33.iterator();
        int[] intArray38 = multidimensionalCounter33.getSizes();
        int[] intArray39 = multidimensionalCounter33.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter40 = new org.apache.commons.math.util.MultidimensionalCounter(intArray39);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter41 = new org.apache.commons.math.util.MultidimensionalCounter(intArray39);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter42 = new org.apache.commons.math.util.MultidimensionalCounter(intArray39);
        int[] intArray43 = multidimensionalCounter42.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int44 = multidimensionalCounter10.getCount(intArray43);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 4, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator36);
        org.junit.Assert.assertNotNull(iterator37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[32, 10, 1]");
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        java.util.Spliterator<java.lang.Integer> intSpliterator15 = multidimensionalCounter14.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator15);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        int[] intArray19 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        int int21 = multidimensionalCounter20.getSize();
        int[] intArray22 = multidimensionalCounter20.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter23.iterator();
        int[] intArray28 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter29 = new org.apache.commons.math.util.MultidimensionalCounter(intArray28);
        int int30 = multidimensionalCounter29.getDimension();
        int[] intArray32 = multidimensionalCounter29.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator33 = multidimensionalCounter29.iterator();
        int[] intArray37 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter38 = new org.apache.commons.math.util.MultidimensionalCounter(intArray37);
        int int39 = multidimensionalCounter38.getDimension();
        int[] intArray41 = multidimensionalCounter38.getCounts((int) (short) 10);
        int int42 = multidimensionalCounter29.getCount(intArray41);
        int int43 = multidimensionalCounter23.getCount(intArray41);
        int int44 = multidimensionalCounter12.getCount(intArray41);
        int int45 = multidimensionalCounter4.getCount(intArray41);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter46 = new org.apache.commons.math.util.MultidimensionalCounter(intArray41);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter12.spliterator();
        int int14 = multidimensionalCounter12.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int int8 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        boolean boolean10 = iterator9.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray8 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
        int[] intArray10 = multidimensionalCounter9.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter11.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator12);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int int13 = multidimensionalCounter4.getSize();
        int int14 = multidimensionalCounter4.getSize();
        int[] intArray16 = multidimensionalCounter4.getCounts(10);
        java.lang.Class<?> wildcardClass17 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        int int13 = multidimensionalCounter11.getDimension();
        int[] intArray17 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int[] intArray20 = multidimensionalCounter18.getCounts((int) (short) 0);
        int[] intArray22 = multidimensionalCounter18.getCounts(10);
        int int23 = multidimensionalCounter11.getCount(intArray22);
        int int24 = multidimensionalCounter4.getCount(intArray22);
        int[] intArray25 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator26 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator26);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 100);
        int int11 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray10 = multidimensionalCounter7.getCounts((int) 'a');
        int[] intArray12 = multidimensionalCounter7.getCounts((int) (byte) 100);
        int[] intArray14 = multidimensionalCounter7.getCounts(4);
        int[] intArray15 = multidimensionalCounter7.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = multidimensionalCounter7.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 4, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int[] intArray13 = multidimensionalCounter12.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = multidimensionalCounter4.getCount(intArray13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        int[] intArray14 = iterator13.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, -1]");
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator40 = multidimensionalCounter4.spliterator();
        int[] intArray42 = multidimensionalCounter4.getCounts((int) (short) 1);
        int int43 = multidimensionalCounter4.getSize();
        java.lang.Class<?> wildcardClass44 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(intSpliterator40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int[] intArray15 = multidimensionalCounter13.getCounts((int) (short) 0);
        int[] intArray17 = multidimensionalCounter13.getCounts((int) '#');
        int[] intArray19 = multidimensionalCounter13.getCounts(10);
        int int20 = multidimensionalCounter4.getCount(intArray19);
        int[] intArray24 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter25 = new org.apache.commons.math.util.MultidimensionalCounter(intArray24);
        int int26 = multidimensionalCounter25.getSize();
        int[] intArray27 = multidimensionalCounter25.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter28 = new org.apache.commons.math.util.MultidimensionalCounter(intArray27);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator29 = multidimensionalCounter28.iterator();
        int[] intArray31 = multidimensionalCounter28.getCounts((int) 'a');
        int[] intArray33 = multidimensionalCounter28.getCounts((int) (byte) 100);
        int[] intArray35 = multidimensionalCounter28.getCounts(4);
        int int36 = multidimensionalCounter4.getCount(intArray35);
        int int37 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 4, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        int[] intArray12 = iterator11.getCounts();
        int int13 = iterator11.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        int[] intArray14 = multidimensionalCounter4.getCounts(0);
        int int15 = multidimensionalCounter4.getSize();
        int[] intArray17 = multidimensionalCounter4.getCounts(52);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int int19 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[5, 2, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int int12 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter4.spliterator();
        int[] intArray17 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int int19 = multidimensionalCounter18.getDimension();
        int[] intArray20 = multidimensionalCounter18.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter18.iterator();
        int[] intArray22 = iterator21.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = multidimensionalCounter4.getCount(intArray22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 0] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, -1]");
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        int int12 = iterator8.getCount((int) (byte) 1);
        boolean boolean13 = iterator8.hasNext();
        boolean boolean14 = iterator8.hasNext();
        boolean boolean15 = iterator8.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getCounts((int) (byte) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        boolean boolean12 = iterator11.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getSize();
        int int14 = multidimensionalCounter4.getDimension();
        int[] intArray15 = multidimensionalCounter4.getSizes();
        int int16 = multidimensionalCounter4.getSize();
        int int17 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(iterator18);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getDimension();
        int[] intArray17 = multidimensionalCounter15.getSizes();
        int[] intArray19 = multidimensionalCounter15.getCounts((int) 'a');
        int[] intArray21 = multidimensionalCounter15.getCounts((int) 'a');
        int int22 = multidimensionalCounter4.getCount(intArray21);
        int[] intArray26 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter27 = new org.apache.commons.math.util.MultidimensionalCounter(intArray26);
        int[] intArray28 = multidimensionalCounter27.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator29 = multidimensionalCounter27.iterator();
        int int30 = multidimensionalCounter27.getSize();
        int[] intArray34 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter35 = new org.apache.commons.math.util.MultidimensionalCounter(intArray34);
        int int36 = multidimensionalCounter35.getDimension();
        int int37 = multidimensionalCounter35.getDimension();
        int int38 = multidimensionalCounter35.getSize();
        int[] intArray42 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter43 = new org.apache.commons.math.util.MultidimensionalCounter(intArray42);
        int int44 = multidimensionalCounter43.getSize();
        int[] intArray45 = multidimensionalCounter43.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator46 = multidimensionalCounter43.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator47 = multidimensionalCounter43.iterator();
        int int48 = multidimensionalCounter43.getSize();
        int[] intArray52 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter53 = new org.apache.commons.math.util.MultidimensionalCounter(intArray52);
        int int54 = multidimensionalCounter53.getSize();
        int[] intArray55 = multidimensionalCounter53.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator56 = multidimensionalCounter53.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator57 = multidimensionalCounter53.iterator();
        int[] intArray61 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter62 = new org.apache.commons.math.util.MultidimensionalCounter(intArray61);
        int int63 = multidimensionalCounter62.getDimension();
        int[] intArray65 = multidimensionalCounter62.getCounts((int) (short) 10);
        int int66 = multidimensionalCounter53.getCount(intArray65);
        int int67 = multidimensionalCounter43.getCount(intArray65);
        int int68 = multidimensionalCounter35.getCount(intArray65);
        int int69 = multidimensionalCounter35.getSize();
        int int70 = multidimensionalCounter35.getSize();
        int[] intArray72 = multidimensionalCounter35.getCounts(10);
        int int73 = multidimensionalCounter27.getCount(intArray72);
        int int74 = multidimensionalCounter4.getCount(intArray72);
        int int75 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator46);
        org.junit.Assert.assertNotNull(iterator47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNotNull(iterator57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int int13 = multidimensionalCounter4.getSize();
        int int14 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(iterator15);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        int[] intArray16 = iterator15.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = iterator15.getCount((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, -1]");
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter7.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        boolean boolean12 = iterator11.hasNext();
        int int14 = iterator11.getCount(0);
        boolean boolean15 = iterator11.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter20.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator22 = multidimensionalCounter20.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator23 = multidimensionalCounter20.spliterator();
        int[] intArray25 = multidimensionalCounter20.getCounts((int) (short) 10);
        int int26 = multidimensionalCounter4.getCount(intArray25);
        int[] intArray28 = multidimensionalCounter4.getCounts(3);
        int[] intArray29 = multidimensionalCounter4.getSizes();
        int[] intArray31 = multidimensionalCounter4.getCounts((int) 'a');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(intSpliterator22);
        org.junit.Assert.assertNotNull(intSpliterator23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 3, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[9, 7, 0]");
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray24 = multidimensionalCounter21.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter21.iterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        int int34 = multidimensionalCounter21.getCount(intArray33);
        int int35 = multidimensionalCounter15.getCount(intArray33);
        int int36 = multidimensionalCounter4.getCount(intArray33);
        java.util.Spliterator<java.lang.Integer> intSpliterator37 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator38 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intSpliterator37);
        org.junit.Assert.assertNotNull(iterator38);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter4.iterator();
        int int40 = multidimensionalCounter4.getSize();
        int[] intArray44 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter45 = new org.apache.commons.math.util.MultidimensionalCounter(intArray44);
        int int46 = multidimensionalCounter45.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator47 = multidimensionalCounter45.iterator();
        int int48 = multidimensionalCounter45.getSize();
        int[] intArray52 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter53 = new org.apache.commons.math.util.MultidimensionalCounter(intArray52);
        int int54 = multidimensionalCounter53.getDimension();
        int int55 = multidimensionalCounter53.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator56 = multidimensionalCounter53.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator57 = multidimensionalCounter53.spliterator();
        int[] intArray59 = multidimensionalCounter53.getCounts((int) (byte) 1);
        int int60 = multidimensionalCounter53.getDimension();
        int[] intArray62 = multidimensionalCounter53.getCounts(4);
        int int63 = multidimensionalCounter45.getCount(intArray62);
        int int64 = multidimensionalCounter4.getCount(intArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter65 = new org.apache.commons.math.util.MultidimensionalCounter(intArray62);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(iterator47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNotNull(intSpliterator57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 4, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter10.iterator();
        int int12 = multidimensionalCounter10.getDimension();
        int int13 = multidimensionalCounter10.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter10.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = iterator14.getCount((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(iterator14);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator7);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter4.iterator();
        int int40 = multidimensionalCounter4.getSize();
        int int41 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator42 = multidimensionalCounter4.spliterator();
        int[] intArray43 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator44 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intSpliterator42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator44);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter20.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator22 = multidimensionalCounter20.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator23 = multidimensionalCounter20.spliterator();
        int[] intArray25 = multidimensionalCounter20.getCounts((int) (short) 10);
        int int26 = multidimensionalCounter4.getCount(intArray25);
        int[] intArray28 = multidimensionalCounter4.getCounts(3);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator29 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = iterator29.getCount(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(intSpliterator22);
        org.junit.Assert.assertNotNull(intSpliterator23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 3, 0]");
        org.junit.Assert.assertNotNull(iterator29);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray10 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int13 = iterator11.getCount((int) (byte) 1);
        int[] intArray14 = iterator11.getCounts();
        boolean boolean15 = iterator11.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int[] intArray15 = multidimensionalCounter13.getCounts((int) (short) 0);
        int[] intArray17 = multidimensionalCounter13.getCounts((int) '#');
        int[] intArray19 = multidimensionalCounter13.getCounts(10);
        int int20 = multidimensionalCounter4.getCount(intArray19);
        int[] intArray22 = multidimensionalCounter4.getCounts((int) (short) 1);
        int int23 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter4.spliterator();
        int int14 = multidimensionalCounter4.getSize();
        int[] intArray16 = multidimensionalCounter4.getCounts((int) '4');
        java.util.Spliterator<java.lang.Integer> intSpliterator17 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[5, 2, 0]");
        org.junit.Assert.assertNotNull(intSpliterator17);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        boolean boolean10 = iterator9.hasNext();
        int int11 = iterator9.getCount();
        int[] intArray12 = iterator9.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = iterator9.getCount(4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, -1]");
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray9 = multidimensionalCounter4.getCounts(0);
        int[] intArray11 = multidimensionalCounter4.getCounts(1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 1, 0]");
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray9 = multidimensionalCounter4.getCounts(0);
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = multidimensionalCounter4.getCounts(10);
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter20.iterator();
        int[] intArray25 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter26 = new org.apache.commons.math.util.MultidimensionalCounter(intArray25);
        int int27 = multidimensionalCounter26.getDimension();
        int[] intArray29 = multidimensionalCounter26.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator30 = multidimensionalCounter26.iterator();
        int[] intArray34 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter35 = new org.apache.commons.math.util.MultidimensionalCounter(intArray34);
        int int36 = multidimensionalCounter35.getDimension();
        int[] intArray38 = multidimensionalCounter35.getCounts((int) (short) 10);
        int int39 = multidimensionalCounter26.getCount(intArray38);
        int int40 = multidimensionalCounter20.getCount(intArray38);
        int int41 = multidimensionalCounter4.getCount(intArray38);
        int[] intArray42 = multidimensionalCounter4.getSizes();
        int[] intArray43 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter44 = new org.apache.commons.math.util.MultidimensionalCounter(intArray43);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[32, 10, 1]");
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray13 = multidimensionalCounter11.getCounts((int) (short) 0);
        int[] intArray14 = multidimensionalCounter11.getSizes();
        int[] intArray16 = multidimensionalCounter11.getCounts((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = multidimensionalCounter11.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 0, 0]");
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts((int) ' ');
        int[] intArray13 = multidimensionalCounter4.getCounts(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[3, 2, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 1, 0]");
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) (short) 100);
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int int10 = multidimensionalCounter4.getDimension();
        int int11 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray11 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter12.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator13);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        boolean boolean9 = iterator8.hasNext();
        int int10 = iterator8.getCount();
        int[] intArray11 = iterator8.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, -1]");
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter7.iterator();
        int int13 = multidimensionalCounter7.getSize();
        int int14 = multidimensionalCounter7.getSize();
        int[] intArray16 = multidimensionalCounter7.getCounts((int) (short) 100);
        java.lang.Class<?> wildcardClass17 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter10.iterator();
        int int12 = multidimensionalCounter10.getDimension();
        int[] intArray13 = multidimensionalCounter10.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        int int10 = iterator7.getCount(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(2);
        int int12 = multidimensionalCounter4.getDimension();
        int[] intArray13 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 2, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) '4');
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        int[] intArray15 = iterator14.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[5, 2, 0]");
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, -1]");
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray10 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int int17 = multidimensionalCounter16.getSize();
        int[] intArray18 = multidimensionalCounter16.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter19 = new org.apache.commons.math.util.MultidimensionalCounter(intArray18);
        java.util.Spliterator<java.lang.Integer> intSpliterator20 = multidimensionalCounter19.spliterator();
        int[] intArray21 = multidimensionalCounter19.getSizes();
        int[] intArray22 = multidimensionalCounter19.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator23 = multidimensionalCounter19.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter19.iterator();
        int[] intArray28 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter29 = new org.apache.commons.math.util.MultidimensionalCounter(intArray28);
        int[] intArray31 = multidimensionalCounter29.getCounts((int) (short) 0);
        int[] intArray33 = multidimensionalCounter29.getCounts((int) (byte) 10);
        int int34 = multidimensionalCounter19.getCount(intArray33);
        int[] intArray36 = multidimensionalCounter19.getCounts((int) (byte) 100);
        int int37 = multidimensionalCounter4.getCount(intArray36);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 10);
        int[] intArray14 = multidimensionalCounter4.getCounts((int) 'a');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[9, 7, 0]");
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int9 = iterator7.getCount(1);
        boolean boolean10 = iterator7.hasNext();
        int int11 = iterator7.getCount();
        int int13 = iterator7.getCount((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getCounts(10);
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getSize();
        int int12 = multidimensionalCounter4.getSize();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getDimension();
        int int19 = multidimensionalCounter17.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator21 = multidimensionalCounter17.spliterator();
        int[] intArray23 = multidimensionalCounter17.getCounts((int) (byte) 1);
        int[] intArray27 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter28 = new org.apache.commons.math.util.MultidimensionalCounter(intArray27);
        int int29 = multidimensionalCounter28.getDimension();
        int[] intArray30 = multidimensionalCounter28.getSizes();
        int[] intArray32 = multidimensionalCounter28.getCounts((int) 'a');
        int[] intArray34 = multidimensionalCounter28.getCounts((int) 'a');
        int int35 = multidimensionalCounter17.getCount(intArray34);
        int[] intArray39 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter40 = new org.apache.commons.math.util.MultidimensionalCounter(intArray39);
        int[] intArray41 = multidimensionalCounter40.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator42 = multidimensionalCounter40.iterator();
        int int43 = multidimensionalCounter40.getSize();
        int[] intArray47 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter48 = new org.apache.commons.math.util.MultidimensionalCounter(intArray47);
        int int49 = multidimensionalCounter48.getDimension();
        int int50 = multidimensionalCounter48.getDimension();
        int int51 = multidimensionalCounter48.getSize();
        int[] intArray55 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter56 = new org.apache.commons.math.util.MultidimensionalCounter(intArray55);
        int int57 = multidimensionalCounter56.getSize();
        int[] intArray58 = multidimensionalCounter56.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator59 = multidimensionalCounter56.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator60 = multidimensionalCounter56.iterator();
        int int61 = multidimensionalCounter56.getSize();
        int[] intArray65 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter66 = new org.apache.commons.math.util.MultidimensionalCounter(intArray65);
        int int67 = multidimensionalCounter66.getSize();
        int[] intArray68 = multidimensionalCounter66.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator69 = multidimensionalCounter66.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator70 = multidimensionalCounter66.iterator();
        int[] intArray74 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter75 = new org.apache.commons.math.util.MultidimensionalCounter(intArray74);
        int int76 = multidimensionalCounter75.getDimension();
        int[] intArray78 = multidimensionalCounter75.getCounts((int) (short) 10);
        int int79 = multidimensionalCounter66.getCount(intArray78);
        int int80 = multidimensionalCounter56.getCount(intArray78);
        int int81 = multidimensionalCounter48.getCount(intArray78);
        int int82 = multidimensionalCounter48.getSize();
        int int83 = multidimensionalCounter48.getSize();
        int[] intArray85 = multidimensionalCounter48.getCounts(10);
        int int86 = multidimensionalCounter40.getCount(intArray85);
        int int87 = multidimensionalCounter17.getCount(intArray85);
        int int88 = multidimensionalCounter4.getCount(intArray85);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(intSpliterator21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator59);
        org.junit.Assert.assertNotNull(iterator60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator69);
        org.junit.Assert.assertNotNull(iterator70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter7.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter7.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter7.spliterator();
        int[] intArray12 = multidimensionalCounter7.getSizes();
        int int13 = multidimensionalCounter7.getDimension();
        int[] intArray15 = multidimensionalCounter7.getCounts((int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[5, 2, 0]");
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter4.iterator();
        int int14 = multidimensionalCounter4.getDimension();
        int[] intArray16 = multidimensionalCounter4.getCounts((int) (byte) 10);
        int int17 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter17.iterator();
        int[] intArray25 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter26 = new org.apache.commons.math.util.MultidimensionalCounter(intArray25);
        int int27 = multidimensionalCounter26.getDimension();
        int[] intArray29 = multidimensionalCounter26.getCounts((int) (short) 10);
        int int30 = multidimensionalCounter17.getCount(intArray29);
        int int31 = multidimensionalCounter11.getCount(intArray29);
        java.util.Spliterator<java.lang.Integer> intSpliterator32 = multidimensionalCounter11.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(intSpliterator32);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        int[] intArray14 = multidimensionalCounter4.getCounts(0);
        int int15 = multidimensionalCounter4.getSize();
        int[] intArray17 = multidimensionalCounter4.getCounts(52);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter19 = new org.apache.commons.math.util.MultidimensionalCounter(intArray18);
        int int20 = multidimensionalCounter19.getSize();
        int[] intArray21 = multidimensionalCounter19.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[5, 2, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray11 = multidimensionalCounter10.getSizes();
        int[] intArray12 = multidimensionalCounter10.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter10.spliterator();
        int[] intArray14 = multidimensionalCounter10.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter10.iterator();
        int[] intArray16 = iterator15.getCounts();
        int[] intArray17 = iterator15.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, -1]");
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = iterator6.getCount();
        int int8 = iterator6.getCount();
        int[] intArray9 = iterator6.getCounts();
        int[] intArray10 = iterator6.getCounts();
        boolean boolean11 = iterator6.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = iterator8.getCounts();
        int[] intArray10 = iterator8.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, -1]");
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        java.util.Spliterator<java.lang.Integer> intSpliterator38 = multidimensionalCounter4.spliterator();
        int[] intArray40 = multidimensionalCounter4.getCounts(35);
        int[] intArray41 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int42 = multidimensionalCounter4.getCount(intArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(intSpliterator38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[3, 5, 0]");
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator40 = multidimensionalCounter4.iterator();
        int[] intArray41 = iterator40.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, -1]");
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getCounts(10);
        int int10 = multidimensionalCounter4.getDimension();
        int int11 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getDimension();
        int int19 = multidimensionalCounter17.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator21 = multidimensionalCounter17.spliterator();
        int[] intArray23 = multidimensionalCounter17.getCounts((int) (byte) 1);
        int int24 = multidimensionalCounter17.getDimension();
        int[] intArray26 = multidimensionalCounter17.getCounts(4);
        int int27 = multidimensionalCounter4.getCount(intArray26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(intSpliterator21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 4, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        boolean boolean11 = iterator8.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = iterator8.getCount(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = multidimensionalCounter4.getDimension();
        int[] intArray15 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator16);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter7.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter7.iterator();
        int int14 = multidimensionalCounter7.getDimension();
        int[] intArray16 = multidimensionalCounter7.getCounts(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0]");
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        int[] intArray12 = multidimensionalCounter4.getCounts(52);
        int int13 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        int int16 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[5, 2, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = iterator12.getCount();
        int int15 = iterator12.getCount((int) (byte) 0);
        boolean boolean16 = iterator12.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter5 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter6 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int7 = multidimensionalCounter6.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = multidimensionalCounter6.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = multidimensionalCounter4.getCounts(10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray13 = multidimensionalCounter4.getCounts((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0]");
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        int int13 = multidimensionalCounter11.getDimension();
        int[] intArray15 = multidimensionalCounter11.getCounts(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = multidimensionalCounter11.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        boolean boolean7 = iterator6.hasNext();
        boolean boolean8 = iterator6.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int int10 = multidimensionalCounter7.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter7.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter7.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intSpliterator12);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter12.spliterator();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (byte) 1);
        int int19 = multidimensionalCounter12.getDimension();
        int[] intArray21 = multidimensionalCounter12.getCounts(4);
        int int22 = multidimensionalCounter4.getCount(intArray21);
        java.util.Spliterator<java.lang.Integer> intSpliterator23 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 4, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(intSpliterator23);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        int int14 = multidimensionalCounter11.getSize();
        int[] intArray15 = multidimensionalCounter11.getSizes();
        java.lang.Class<?> wildcardClass16 = multidimensionalCounter11.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter12.spliterator();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (byte) 1);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray25 = multidimensionalCounter23.getSizes();
        int[] intArray27 = multidimensionalCounter23.getCounts((int) 'a');
        int[] intArray29 = multidimensionalCounter23.getCounts((int) 'a');
        int int30 = multidimensionalCounter12.getCount(intArray29);
        int int31 = multidimensionalCounter4.getCount(intArray29);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator32 = multidimensionalCounter4.iterator();
        int int33 = multidimensionalCounter4.getSize();
        int[] intArray34 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter35 = new org.apache.commons.math.util.MultidimensionalCounter(intArray34);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(iterator32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, 10, 1]");
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = multidimensionalCounter4.getCounts(10);
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter20.iterator();
        int[] intArray25 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter26 = new org.apache.commons.math.util.MultidimensionalCounter(intArray25);
        int int27 = multidimensionalCounter26.getDimension();
        int[] intArray29 = multidimensionalCounter26.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator30 = multidimensionalCounter26.iterator();
        int[] intArray34 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter35 = new org.apache.commons.math.util.MultidimensionalCounter(intArray34);
        int int36 = multidimensionalCounter35.getDimension();
        int[] intArray38 = multidimensionalCounter35.getCounts((int) (short) 10);
        int int39 = multidimensionalCounter26.getCount(intArray38);
        int int40 = multidimensionalCounter20.getCount(intArray38);
        int int41 = multidimensionalCounter4.getCount(intArray38);
        int[] intArray45 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter46 = new org.apache.commons.math.util.MultidimensionalCounter(intArray45);
        int[] intArray48 = multidimensionalCounter46.getCounts((int) (short) 0);
        int[] intArray50 = multidimensionalCounter46.getCounts(10);
        int[] intArray51 = multidimensionalCounter46.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter52 = new org.apache.commons.math.util.MultidimensionalCounter(intArray51);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = multidimensionalCounter4.getCount(intArray51);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[32, 10, 1]");
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int[] intArray15 = multidimensionalCounter4.getCounts(100);
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter4.spliterator();
        int[] intArray18 = multidimensionalCounter4.getCounts(97);
        java.util.Spliterator<java.lang.Integer> intSpliterator19 = multidimensionalCounter4.spliterator();
        int int20 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator21 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intSpliterator19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intSpliterator21);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray12 = multidimensionalCounter11.getSizes();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        java.lang.Class<?> wildcardClass15 = multidimensionalCounter11.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        int int13 = multidimensionalCounter11.getDimension();
        int[] intArray17 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int[] intArray20 = multidimensionalCounter18.getCounts((int) (short) 0);
        int[] intArray22 = multidimensionalCounter18.getCounts(10);
        int int23 = multidimensionalCounter11.getCount(intArray22);
        int int24 = multidimensionalCounter4.getCount(intArray22);
        java.util.Spliterator<java.lang.Integer> intSpliterator25 = multidimensionalCounter4.spliterator();
        int int26 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intSpliterator25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        int int11 = multidimensionalCounter4.getSize();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray8 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
        int int10 = multidimensionalCounter9.getDimension();
        int[] intArray12 = multidimensionalCounter9.getCounts((int) (byte) 10);
        int int13 = multidimensionalCounter9.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter9.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter9.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator15.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(iterator15);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray8 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
        int int10 = multidimensionalCounter9.getDimension();
        int[] intArray12 = multidimensionalCounter9.getCounts((int) (byte) 10);
        int int13 = multidimensionalCounter9.getDimension();
        int int14 = multidimensionalCounter9.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator15 = multidimensionalCounter9.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intSpliterator15);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getDimension();
        int int11 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intSpliterator13);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) (short) 0);
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getDimension();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator18 = multidimensionalCounter14.spliterator();
        int int19 = multidimensionalCounter14.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator20 = multidimensionalCounter14.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter14.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator22 = multidimensionalCounter14.spliterator();
        int int23 = multidimensionalCounter14.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter14.iterator();
        int[] intArray25 = iterator24.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = multidimensionalCounter4.getCount(intArray25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 0] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(intSpliterator18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(intSpliterator20);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(intSpliterator22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, -1]");
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray24 = multidimensionalCounter21.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter21.iterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        int int34 = multidimensionalCounter21.getCount(intArray33);
        int int35 = multidimensionalCounter15.getCount(intArray33);
        int int36 = multidimensionalCounter4.getCount(intArray33);
        java.util.Spliterator<java.lang.Integer> intSpliterator37 = multidimensionalCounter4.spliterator();
        int[] intArray38 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter39 = new org.apache.commons.math.util.MultidimensionalCounter(intArray38);
        int int40 = multidimensionalCounter39.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intSpliterator37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator40 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator41 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator40);
        org.junit.Assert.assertNotNull(iterator41);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        int int8 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 0);
        int int11 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = iterator8.getCounts();
        int[] intArray10 = iterator8.getCounts();
        int int11 = iterator8.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        int[] intArray4 = new int[] { 100, (byte) 10, 2, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter5 = new org.apache.commons.math.util.MultidimensionalCounter(intArray4);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter6 = new org.apache.commons.math.util.MultidimensionalCounter(intArray4);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray4);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, 10, 2, 1]");
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray10 = multidimensionalCounter4.getCounts((int) 'a');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter7.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter7.iterator();
        java.lang.Class<?> wildcardClass14 = iterator13.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int[] intArray19 = multidimensionalCounter4.getSizes();
        int[] intArray21 = multidimensionalCounter4.getCounts((int) ' ');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator22 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator22.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[3, 2, 0]");
        org.junit.Assert.assertNotNull(iterator22);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 0);
        int int11 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator5 = multidimensionalCounter4.iterator();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getDimension();
        int int10 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intSpliterator12);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        int int13 = multidimensionalCounter11.getDimension();
        int[] intArray17 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int[] intArray20 = multidimensionalCounter18.getCounts((int) (short) 0);
        int[] intArray22 = multidimensionalCounter18.getCounts(10);
        int int23 = multidimensionalCounter11.getCount(intArray22);
        int int24 = multidimensionalCounter4.getCount(intArray22);
        int[] intArray25 = multidimensionalCounter4.getSizes();
        int[] intArray26 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, 10, 1]");
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter7.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter7.spliterator();
        int[] intArray12 = multidimensionalCounter7.getCounts((int) (short) 10);
        int[] intArray13 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter7.iterator();
        int[] intArray15 = iterator14.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = iterator14.getCount(4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, -1]");
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(35);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[3, 5, 0]");
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter4.iterator();
        boolean boolean20 = iterator19.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator19.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        int int8 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int int10 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = multidimensionalCounter4.getCounts((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int int8 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 10);
        int int11 = multidimensionalCounter4.getDimension();
        int[] intArray13 = multidimensionalCounter4.getCounts(97);
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intSpliterator14);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter7.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter7.spliterator();
        int[] intArray12 = multidimensionalCounter7.getCounts((int) (short) 10);
        int[] intArray13 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator15 = multidimensionalCounter7.spliterator();
        int[] intArray19 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        int int21 = multidimensionalCounter20.getDimension();
        int[] intArray23 = multidimensionalCounter20.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter20.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator25 = multidimensionalCounter20.spliterator();
        int[] intArray26 = multidimensionalCounter20.getSizes();
        int[] intArray28 = multidimensionalCounter20.getCounts(52);
        int int29 = multidimensionalCounter7.getCount(intArray28);
        java.util.Spliterator<java.lang.Integer> intSpliterator30 = multidimensionalCounter7.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intSpliterator15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(intSpliterator25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[5, 2, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(intSpliterator30);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        int int8 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        boolean boolean10 = iterator9.hasNext();
        boolean boolean11 = iterator9.hasNext();
        boolean boolean12 = iterator9.hasNext();
        int int13 = iterator9.getCount();
        // The following exception was thrown during execution in test generation
        try {
            iterator9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter12.spliterator();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (byte) 1);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray25 = multidimensionalCounter23.getSizes();
        int[] intArray27 = multidimensionalCounter23.getCounts((int) 'a');
        int[] intArray29 = multidimensionalCounter23.getCounts((int) 'a');
        int int30 = multidimensionalCounter12.getCount(intArray29);
        int int31 = multidimensionalCounter4.getCount(intArray29);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator32 = multidimensionalCounter4.iterator();
        int int33 = multidimensionalCounter4.getSize();
        int[] intArray37 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter38 = new org.apache.commons.math.util.MultidimensionalCounter(intArray37);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter38.iterator();
        int int40 = multidimensionalCounter38.getDimension();
        int[] intArray42 = multidimensionalCounter38.getCounts((int) 'a');
        int int43 = multidimensionalCounter4.getCount(intArray42);
        java.util.Spliterator<java.lang.Integer> intSpliterator44 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(iterator32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(intSpliterator44);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(iterator10);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter13.iterator();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getDimension();
        int[] intArray25 = multidimensionalCounter22.getCounts((int) (short) 10);
        int int26 = multidimensionalCounter13.getCount(intArray25);
        int int27 = multidimensionalCounter7.getCount(intArray25);
        int int28 = multidimensionalCounter7.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator29 = multidimensionalCounter7.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator30 = multidimensionalCounter7.iterator();
        int int31 = iterator30.getCount();
        int int33 = iterator30.getCount(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intSpliterator29);
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        int int10 = iterator7.getCount((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int14 = multidimensionalCounter13.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = multidimensionalCounter13.getCounts((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 10);
        int int13 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        int int15 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        int int12 = multidimensionalCounter4.getDimension();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getDimension();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator21 = multidimensionalCounter17.spliterator();
        int[] intArray23 = multidimensionalCounter17.getCounts((int) (short) 10);
        int int24 = multidimensionalCounter4.getCount(intArray23);
        int[] intArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int26 = multidimensionalCounter4.getCount(intArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(intSpliterator21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        int[] intArray15 = multidimensionalCounter11.getCounts((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        int[] intArray17 = multidimensionalCounter4.getCounts(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0]");
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getDimension();
        int[] intArray17 = multidimensionalCounter15.getSizes();
        int[] intArray19 = multidimensionalCounter15.getCounts((int) 'a');
        int[] intArray21 = multidimensionalCounter15.getCounts((int) 'a');
        int int22 = multidimensionalCounter4.getCount(intArray21);
        int[] intArray26 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter27 = new org.apache.commons.math.util.MultidimensionalCounter(intArray26);
        int[] intArray28 = multidimensionalCounter27.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator29 = multidimensionalCounter27.iterator();
        int int30 = multidimensionalCounter27.getSize();
        int[] intArray34 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter35 = new org.apache.commons.math.util.MultidimensionalCounter(intArray34);
        int int36 = multidimensionalCounter35.getDimension();
        int int37 = multidimensionalCounter35.getDimension();
        int int38 = multidimensionalCounter35.getSize();
        int[] intArray42 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter43 = new org.apache.commons.math.util.MultidimensionalCounter(intArray42);
        int int44 = multidimensionalCounter43.getSize();
        int[] intArray45 = multidimensionalCounter43.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator46 = multidimensionalCounter43.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator47 = multidimensionalCounter43.iterator();
        int int48 = multidimensionalCounter43.getSize();
        int[] intArray52 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter53 = new org.apache.commons.math.util.MultidimensionalCounter(intArray52);
        int int54 = multidimensionalCounter53.getSize();
        int[] intArray55 = multidimensionalCounter53.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator56 = multidimensionalCounter53.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator57 = multidimensionalCounter53.iterator();
        int[] intArray61 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter62 = new org.apache.commons.math.util.MultidimensionalCounter(intArray61);
        int int63 = multidimensionalCounter62.getDimension();
        int[] intArray65 = multidimensionalCounter62.getCounts((int) (short) 10);
        int int66 = multidimensionalCounter53.getCount(intArray65);
        int int67 = multidimensionalCounter43.getCount(intArray65);
        int int68 = multidimensionalCounter35.getCount(intArray65);
        int int69 = multidimensionalCounter35.getSize();
        int int70 = multidimensionalCounter35.getSize();
        int[] intArray72 = multidimensionalCounter35.getCounts(10);
        int int73 = multidimensionalCounter27.getCount(intArray72);
        int int74 = multidimensionalCounter4.getCount(intArray72);
        int[] intArray76 = multidimensionalCounter4.getCounts((int) (short) 1);
        int[] intArray78 = multidimensionalCounter4.getCounts(35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter79 = new org.apache.commons.math.util.MultidimensionalCounter(intArray78);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator46);
        org.junit.Assert.assertNotNull(iterator47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNotNull(iterator57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[3, 5, 0]");
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray13 = multidimensionalCounter11.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        int[] intArray15 = multidimensionalCounter11.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray9 = multidimensionalCounter4.getCounts(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        int int13 = multidimensionalCounter11.getDimension();
        int int14 = multidimensionalCounter11.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator15 = multidimensionalCounter11.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intSpliterator15);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getSize();
        int int8 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        int int12 = multidimensionalCounter7.getDimension();
        int[] intArray13 = multidimensionalCounter7.getSizes();
        int[] intArray14 = multidimensionalCounter7.getSizes();
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        int int6 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int int13 = multidimensionalCounter4.getSize();
        int int14 = multidimensionalCounter4.getSize();
        int[] intArray16 = multidimensionalCounter4.getCounts(10);
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray23 = multidimensionalCounter21.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter21.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator25 = multidimensionalCounter21.spliterator();
        int[] intArray27 = multidimensionalCounter21.getCounts((int) (short) 10);
        int[] intArray29 = multidimensionalCounter21.getCounts((int) (byte) 10);
        int int30 = multidimensionalCounter4.getCount(intArray29);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator31 = multidimensionalCounter4.iterator();
        int int32 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(intSpliterator25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getDimension();
        int int8 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = iterator6.getCount();
        int int8 = iterator6.getCount();
        int[] intArray9 = iterator6.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter7.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter7.spliterator();
        int[] intArray12 = multidimensionalCounter7.getCounts((int) (short) 10);
        int[] intArray13 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator15 = multidimensionalCounter7.spliterator();
        int[] intArray19 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        int int21 = multidimensionalCounter20.getDimension();
        int[] intArray23 = multidimensionalCounter20.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter20.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator25 = multidimensionalCounter20.spliterator();
        int[] intArray26 = multidimensionalCounter20.getSizes();
        int[] intArray28 = multidimensionalCounter20.getCounts(52);
        int int29 = multidimensionalCounter7.getCount(intArray28);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray28);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intSpliterator15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(intSpliterator25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[5, 2, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter7.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter7.spliterator();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter17.iterator();
        int int22 = multidimensionalCounter17.getSize();
        int[] intArray23 = multidimensionalCounter17.getSizes();
        int[] intArray25 = multidimensionalCounter17.getCounts((int) (byte) 1);
        int int26 = multidimensionalCounter17.getSize();
        int int27 = multidimensionalCounter17.getSize();
        int int28 = multidimensionalCounter17.getDimension();
        int[] intArray30 = multidimensionalCounter17.getCounts((int) (byte) 10);
        int[] intArray34 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter35 = new org.apache.commons.math.util.MultidimensionalCounter(intArray34);
        int int36 = multidimensionalCounter35.getSize();
        int[] intArray37 = multidimensionalCounter35.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator38 = multidimensionalCounter35.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter35.iterator();
        int int40 = multidimensionalCounter35.getSize();
        int[] intArray41 = multidimensionalCounter35.getSizes();
        int[] intArray43 = multidimensionalCounter35.getCounts((int) (byte) 1);
        int[] intArray44 = multidimensionalCounter35.getSizes();
        int[] intArray46 = multidimensionalCounter35.getCounts(100);
        int int47 = multidimensionalCounter35.getDimension();
        int[] intArray49 = multidimensionalCounter35.getCounts(32);
        int int50 = multidimensionalCounter17.getCount(intArray49);
        int int51 = multidimensionalCounter7.getCount(intArray49);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator38);
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[3, 2, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        int int12 = iterator8.getCount((int) (byte) 1);
        boolean boolean13 = iterator8.hasNext();
        boolean boolean14 = iterator8.hasNext();
        int[] intArray15 = iterator8.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, -1]");
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int int8 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int int10 = iterator9.getCount();
        int[] intArray11 = iterator9.getCounts();
        boolean boolean12 = iterator9.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getSize();
        int[] intArray15 = multidimensionalCounter13.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter13.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter13.iterator();
        int[] intArray19 = multidimensionalCounter13.getCounts((int) 'a');
        int[] intArray21 = multidimensionalCounter13.getCounts(97);
        int[] intArray22 = multidimensionalCounter13.getSizes();
        int[] intArray23 = multidimensionalCounter13.getSizes();
        int[] intArray24 = multidimensionalCounter13.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = multidimensionalCounter4.getCount(intArray24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int12 = multidimensionalCounter4.getSize();
        int int13 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getCounts(10);
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass13 = intSpliterator12.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        int[] intArray14 = multidimensionalCounter4.getCounts(4);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 4, 0]");
        org.junit.Assert.assertNotNull(iterator15);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int int10 = multidimensionalCounter4.getDimension();
        int int11 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        int int11 = multidimensionalCounter4.getSize();
        int int12 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = iterator6.getCount();
        int int8 = iterator6.getCount();
        int[] intArray9 = iterator6.getCounts();
        int[] intArray10 = iterator6.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, -1]");
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray24 = multidimensionalCounter21.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter21.iterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        int int34 = multidimensionalCounter21.getCount(intArray33);
        int int35 = multidimensionalCounter15.getCount(intArray33);
        int int36 = multidimensionalCounter4.getCount(intArray33);
        int int37 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator38 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter4.iterator();
        int[] intArray40 = iterator39.getCounts();
        int int42 = iterator39.getCount((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(iterator38);
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int int11 = multidimensionalCounter4.getSize();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getCounts((int) (byte) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int int11 = iterator10.getCount();
        int[] intArray12 = iterator10.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, -1]");
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int[] intArray17 = multidimensionalCounter15.getCounts((int) (short) 0);
        int[] intArray19 = multidimensionalCounter15.getCounts((int) '#');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter15.iterator();
        int int21 = iterator20.getCount();
        int int22 = iterator20.getCount();
        int int23 = iterator20.getCount();
        int int24 = iterator20.getCount();
        int[] intArray25 = iterator20.getCounts();
        int[] intArray26 = iterator20.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = multidimensionalCounter10.getCount(intArray26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 0] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, -1]");
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int int12 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        int[] intArray15 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass16 = intArray15.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int int13 = multidimensionalCounter4.getSize();
        int int14 = multidimensionalCounter4.getSize();
        int[] intArray16 = multidimensionalCounter4.getCounts(10);
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray23 = multidimensionalCounter21.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter21.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator25 = multidimensionalCounter21.spliterator();
        int[] intArray27 = multidimensionalCounter21.getCounts((int) (short) 10);
        int[] intArray29 = multidimensionalCounter21.getCounts((int) (byte) 10);
        int int30 = multidimensionalCounter4.getCount(intArray29);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator31 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass32 = iterator31.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(intSpliterator25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        int[] intArray14 = multidimensionalCounter11.getCounts((int) (short) 100);
        int[] intArray16 = multidimensionalCounter11.getCounts(97);
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getSize();
        int[] intArray23 = multidimensionalCounter21.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter21.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator25 = multidimensionalCounter21.spliterator();
        int[] intArray26 = multidimensionalCounter21.getSizes();
        int[] intArray28 = multidimensionalCounter21.getCounts(10);
        int int29 = multidimensionalCounter11.getCount(intArray28);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(intSpliterator25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 10);
        int int13 = multidimensionalCounter4.getSize();
        int int14 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator15 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intSpliterator15);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter7.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter7.spliterator();
        int[] intArray12 = multidimensionalCounter7.getCounts((int) (short) 10);
        int[] intArray13 = multidimensionalCounter7.getSizes();
        int[] intArray15 = multidimensionalCounter7.getCounts(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = iterator7.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        int int8 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int int10 = multidimensionalCounter4.getSize();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[3, 5, 0]");
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts(10);
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getSizes();
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int int17 = multidimensionalCounter16.getSize();
        int[] intArray18 = multidimensionalCounter16.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter16.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter16.iterator();
        int int21 = multidimensionalCounter16.getSize();
        int[] intArray23 = multidimensionalCounter16.getCounts((int) (byte) 1);
        java.util.Spliterator<java.lang.Integer> intSpliterator24 = multidimensionalCounter16.spliterator();
        int[] intArray26 = multidimensionalCounter16.getCounts((int) (byte) 1);
        int int27 = multidimensionalCounter4.getCount(intArray26);
        int int28 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intSpliterator24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getSize();
        int int13 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass15 = iterator14.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        int int8 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int int10 = iterator9.getCount();
        // The following exception was thrown during execution in test generation
        try {
            iterator9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int int14 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int[] intArray13 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter12.iterator();
        int int15 = multidimensionalCounter12.getSize();
        int int16 = multidimensionalCounter12.getSize();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (short) 10);
        int int19 = multidimensionalCounter4.getCount(intArray18);
        java.lang.Class<?> wildcardClass20 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray10 = multidimensionalCounter7.getCounts((int) 'a');
        int[] intArray11 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter7.iterator();
        int int13 = multidimensionalCounter7.getDimension();
        int[] intArray14 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int[] intArray17 = multidimensionalCounter15.getCounts(0);
        int int18 = multidimensionalCounter15.getSize();
        int int19 = multidimensionalCounter15.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts((int) '#');
        int int12 = multidimensionalCounter4.getSize();
        int[] intArray14 = multidimensionalCounter4.getCounts((int) ' ');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[3, 2, 0]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int int11 = multidimensionalCounter4.getSize();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator13);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int int10 = iterator9.getCount();
        int int11 = iterator9.getCount();
        int int12 = iterator9.getCount();
        int int13 = iterator9.getCount();
        int[] intArray14 = iterator9.getCounts();
        int[] intArray15 = iterator9.getCounts();
        int[] intArray16 = iterator9.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, -1]");
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter11.iterator();
        int[] intArray16 = multidimensionalCounter11.getSizes();
        int[] intArray18 = multidimensionalCounter11.getCounts(0);
        int int19 = multidimensionalCounter4.getCount(intArray18);
        int[] intArray20 = multidimensionalCounter4.getSizes();
        int[] intArray22 = multidimensionalCounter4.getCounts((int) (byte) 0);
        int[] intArray23 = multidimensionalCounter4.getSizes();
        int int24 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter11.iterator();
        int int16 = iterator15.getCount();
        boolean boolean17 = iterator15.hasNext();
        int int18 = iterator15.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray11 = multidimensionalCounter10.getSizes();
        int[] intArray12 = multidimensionalCounter10.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter10.spliterator();
        int[] intArray14 = multidimensionalCounter10.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter10.iterator();
        int[] intArray16 = multidimensionalCounter10.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = multidimensionalCounter10.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int int39 = multidimensionalCounter4.getSize();
        int[] intArray40 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator41 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int43 = iterator41.getCount(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator41);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getDimension();
        int int19 = multidimensionalCounter17.getDimension();
        int int20 = multidimensionalCounter17.getSize();
        int int21 = multidimensionalCounter17.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator22 = multidimensionalCounter17.spliterator();
        int[] intArray24 = multidimensionalCounter17.getCounts((int) (byte) 10);
        int int25 = multidimensionalCounter4.getCount(intArray24);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(intSpliterator22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int int10 = multidimensionalCounter4.getDimension();
        int[] intArray11 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) ' ');
        int[] intArray14 = multidimensionalCounter4.getCounts((int) (short) 100);
        java.util.Spliterator<java.lang.Integer> intSpliterator15 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter4.spliterator();
        java.lang.Class<?> wildcardClass17 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[3, 2, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter20.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator22 = multidimensionalCounter20.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator23 = multidimensionalCounter20.spliterator();
        int[] intArray25 = multidimensionalCounter20.getCounts((int) (short) 10);
        int int26 = multidimensionalCounter4.getCount(intArray25);
        int[] intArray28 = multidimensionalCounter4.getCounts(3);
        int[] intArray29 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator30 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertNotNull(intSpliterator22);
        org.junit.Assert.assertNotNull(intSpliterator23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 3, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator30);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int[] intArray15 = multidimensionalCounter13.getCounts((int) (short) 0);
        int[] intArray17 = multidimensionalCounter13.getCounts((int) '#');
        int[] intArray19 = multidimensionalCounter13.getCounts(10);
        int int20 = multidimensionalCounter4.getCount(intArray19);
        int[] intArray21 = multidimensionalCounter4.getSizes();
        int int22 = multidimensionalCounter4.getDimension();
        int int23 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int14 = multidimensionalCounter13.getSize();
        int int15 = multidimensionalCounter13.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter13.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator16.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(iterator16);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator6 = multidimensionalCounter4.spliterator();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray9 = multidimensionalCounter4.getCounts(0);
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getSizes();
        int[] intArray13 = multidimensionalCounter4.getCounts((int) '#');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intSpliterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[3, 5, 0]");
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = iterator8.getCount();
        int int11 = iterator8.getCount((int) (byte) 0);
        int[] intArray12 = iterator8.getCounts();
        int int13 = iterator8.getCount();
        boolean boolean14 = iterator8.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = iterator8.getCount((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int int11 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray14 = multidimensionalCounter4.getCounts((int) (short) 1);
        int int15 = multidimensionalCounter4.getDimension();
        int[] intArray17 = multidimensionalCounter4.getCounts((int) (byte) 100);
        java.lang.Class<?> wildcardClass18 = intArray17.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int int12 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass16 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int[] intArray19 = multidimensionalCounter4.getSizes();
        int[] intArray20 = multidimensionalCounter4.getSizes();
        int[] intArray21 = multidimensionalCounter4.getSizes();
        int[] intArray23 = multidimensionalCounter4.getCounts((int) ' ');
        int int24 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[3, 2, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        int[] intArray14 = multidimensionalCounter4.getCounts(0);
        int int15 = multidimensionalCounter4.getSize();
        int[] intArray17 = multidimensionalCounter4.getCounts(52);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        java.lang.Class<?> wildcardClass19 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[5, 2, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter7.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter7.iterator();
        int int14 = multidimensionalCounter7.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = multidimensionalCounter7.getCounts((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter8 = new org.apache.commons.math.util.MultidimensionalCounter(intArray7);
        int int9 = multidimensionalCounter8.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter8.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(iterator10);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int int18 = multidimensionalCounter4.getDimension();
        int[] intArray19 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator20 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator20);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getCounts((int) '4');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[5, 2, 0]");
        org.junit.Assert.assertNotNull(iterator10);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) (short) 1);
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 0);
        int int11 = multidimensionalCounter4.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getDimension();
        int int17 = multidimensionalCounter15.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter15.iterator();
        int[] intArray20 = multidimensionalCounter15.getCounts(0);
        int[] intArray21 = multidimensionalCounter15.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = multidimensionalCounter4.getCount(intArray21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = multidimensionalCounter10.getCounts((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 320] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int12 = iterator11.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intSpliterator14);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray12 = iterator11.getCounts();
        int int13 = iterator11.getCount();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = iterator11.getCount((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int int10 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getSizes();
        int[] intArray41 = multidimensionalCounter4.getCounts(100);
        int int42 = multidimensionalCounter4.getSize();
        int[] intArray44 = multidimensionalCounter4.getCounts((int) (short) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[10, 0, 0]");
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int int10 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int int17 = multidimensionalCounter16.getDimension();
        int int18 = multidimensionalCounter16.getDimension();
        int int19 = multidimensionalCounter16.getSize();
        int[] intArray23 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter24 = new org.apache.commons.math.util.MultidimensionalCounter(intArray23);
        int int25 = multidimensionalCounter24.getSize();
        int[] intArray26 = multidimensionalCounter24.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator27 = multidimensionalCounter24.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator28 = multidimensionalCounter24.iterator();
        int int29 = multidimensionalCounter24.getSize();
        int[] intArray33 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter34 = new org.apache.commons.math.util.MultidimensionalCounter(intArray33);
        int int35 = multidimensionalCounter34.getSize();
        int[] intArray36 = multidimensionalCounter34.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator37 = multidimensionalCounter34.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator38 = multidimensionalCounter34.iterator();
        int[] intArray42 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter43 = new org.apache.commons.math.util.MultidimensionalCounter(intArray42);
        int int44 = multidimensionalCounter43.getDimension();
        int[] intArray46 = multidimensionalCounter43.getCounts((int) (short) 10);
        int int47 = multidimensionalCounter34.getCount(intArray46);
        int int48 = multidimensionalCounter24.getCount(intArray46);
        int int49 = multidimensionalCounter16.getCount(intArray46);
        int int50 = multidimensionalCounter16.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator51 = multidimensionalCounter16.iterator();
        int int52 = multidimensionalCounter16.getDimension();
        int[] intArray54 = multidimensionalCounter16.getCounts(97);
        int int55 = multidimensionalCounter16.getDimension();
        int[] intArray57 = multidimensionalCounter16.getCounts(35);
        int int58 = multidimensionalCounter4.getCount(intArray57);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator27);
        org.junit.Assert.assertNotNull(iterator28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator37);
        org.junit.Assert.assertNotNull(iterator38);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(iterator51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray11 = multidimensionalCounter10.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter12.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter12.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(iterator14);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts(3);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 3, 0]");
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int int9 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int int11 = iterator10.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        int[] intArray14 = multidimensionalCounter4.getCounts((int) (byte) 1);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(iterator15);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter9 = new org.apache.commons.math.util.MultidimensionalCounter(intArray8);
        int[] intArray10 = multidimensionalCounter9.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = multidimensionalCounter9.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter4.iterator();
        int[] intArray20 = iterator19.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator19.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, -1]");
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int10 = iterator8.getCount();
        int int11 = iterator8.getCount();
        boolean boolean12 = iterator8.hasNext();
        int int13 = iterator8.getCount();
        boolean boolean14 = iterator8.hasNext();
        int[] intArray15 = iterator8.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, -1]");
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts(52);
        int int13 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[5, 2, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts(10);
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter10.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts((int) (byte) 1);
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        int[] intArray14 = multidimensionalCounter4.getCounts((int) (byte) 1);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = multidimensionalCounter4.getCounts(10);
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int[] intArray18 = multidimensionalCounter16.getCounts((int) (short) 0);
        int[] intArray20 = multidimensionalCounter16.getCounts((int) '#');
        int int21 = multidimensionalCounter16.getSize();
        int[] intArray23 = multidimensionalCounter16.getCounts(3);
        int int24 = multidimensionalCounter4.getCount(intArray23);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 3, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int[] intArray13 = multidimensionalCounter4.getCounts(32);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[3, 2, 0]");
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray12 = multidimensionalCounter10.getCounts((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int[] intArray15 = multidimensionalCounter4.getCounts(100);
        int[] intArray17 = multidimensionalCounter4.getCounts(3);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 3, 0]");
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int12 = iterator11.getCount();
        int int13 = iterator11.getCount();
        // The following exception was thrown during execution in test generation
        try {
            iterator11.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter12.spliterator();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (byte) 1);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray25 = multidimensionalCounter23.getSizes();
        int[] intArray27 = multidimensionalCounter23.getCounts((int) 'a');
        int[] intArray29 = multidimensionalCounter23.getCounts((int) 'a');
        int int30 = multidimensionalCounter12.getCount(intArray29);
        int int31 = multidimensionalCounter4.getCount(intArray29);
        int[] intArray33 = multidimensionalCounter4.getCounts((int) (byte) 0);
        int int34 = multidimensionalCounter4.getSize();
        int[] intArray35 = multidimensionalCounter4.getSizes();
        int int36 = multidimensionalCounter4.getSize();
        int int37 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getCounts(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0]");
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        int int16 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray24 = multidimensionalCounter21.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter21.iterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        int int34 = multidimensionalCounter21.getCount(intArray33);
        int int35 = multidimensionalCounter15.getCount(intArray33);
        int int36 = multidimensionalCounter4.getCount(intArray33);
        int int37 = multidimensionalCounter4.getDimension();
        int int38 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter4.iterator();
        int int40 = iterator39.getCount();
        int[] intArray41 = iterator39.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, -1]");
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        int[] intArray9 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int int11 = multidimensionalCounter10.getSize();
        int int12 = multidimensionalCounter10.getDimension();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int[] intArray19 = multidimensionalCounter17.getCounts((int) (short) 0);
        int[] intArray21 = multidimensionalCounter17.getCounts(10);
        int int22 = multidimensionalCounter10.getCount(intArray21);
        int int23 = multidimensionalCounter4.getCount(intArray21);
        int int24 = multidimensionalCounter4.getSize();
        int[] intArray26 = multidimensionalCounter4.getCounts((int) (short) 1);
        int int27 = multidimensionalCounter4.getDimension();
        int[] intArray31 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter32 = new org.apache.commons.math.util.MultidimensionalCounter(intArray31);
        int int33 = multidimensionalCounter32.getDimension();
        int[] intArray35 = multidimensionalCounter32.getCounts((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator36 = multidimensionalCounter32.spliterator();
        int[] intArray38 = multidimensionalCounter32.getCounts((int) (byte) 10);
        int[] intArray40 = multidimensionalCounter32.getCounts(3);
        int int41 = multidimensionalCounter4.getCount(intArray40);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator42 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator43 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 3, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(iterator42);
        org.junit.Assert.assertNotNull(iterator43);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray13 = multidimensionalCounter4.getCounts((int) '4');
        int[] intArray15 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray16 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[5, 2, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int[] intArray15 = multidimensionalCounter13.getCounts((int) (short) 0);
        int[] intArray17 = multidimensionalCounter13.getCounts((int) '#');
        int[] intArray19 = multidimensionalCounter13.getCounts(10);
        int int20 = multidimensionalCounter4.getCount(intArray19);
        int int21 = multidimensionalCounter4.getSize();
        int[] intArray23 = multidimensionalCounter4.getCounts(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0]");
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator6 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int10 = iterator8.getCount(0);
        boolean boolean11 = iterator8.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intSpliterator6);
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter11.iterator();
        int[] intArray16 = multidimensionalCounter11.getSizes();
        int[] intArray18 = multidimensionalCounter11.getCounts(0);
        int int19 = multidimensionalCounter4.getCount(intArray18);
        int int20 = multidimensionalCounter4.getSize();
        int[] intArray22 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray26 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter27 = new org.apache.commons.math.util.MultidimensionalCounter(intArray26);
        int int28 = multidimensionalCounter27.getSize();
        int[] intArray29 = multidimensionalCounter27.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator30 = multidimensionalCounter27.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator31 = multidimensionalCounter27.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator32 = multidimensionalCounter27.iterator();
        boolean boolean33 = iterator32.hasNext();
        int[] intArray34 = iterator32.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int35 = multidimensionalCounter4.getCount(intArray34);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 0] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertNotNull(iterator32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, -1]");
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter5 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter6 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray8 = multidimensionalCounter6.getCounts(52);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[5, 2, 0]");
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 10);
        int int11 = multidimensionalCounter4.getSize();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getSize();
        int[] intArray19 = multidimensionalCounter17.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        java.util.Spliterator<java.lang.Integer> intSpliterator21 = multidimensionalCounter20.spliterator();
        int[] intArray22 = multidimensionalCounter20.getSizes();
        int[] intArray23 = multidimensionalCounter20.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter24 = new org.apache.commons.math.util.MultidimensionalCounter(intArray23);
        int[] intArray25 = multidimensionalCounter24.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter26 = new org.apache.commons.math.util.MultidimensionalCounter(intArray25);
        int[] intArray28 = multidimensionalCounter26.getCounts((int) '4');
        int int29 = multidimensionalCounter4.getCount(intArray28);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[5, 2, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int int18 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter4.iterator();
        int[] intArray20 = iterator19.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, -1]");
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter11.spliterator();
        int[] intArray16 = multidimensionalCounter11.getCounts(32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[3, 2, 0]");
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator5 = multidimensionalCounter4.iterator();
        int int6 = iterator5.getCount();
        int[] intArray7 = iterator5.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter8 = new org.apache.commons.math.util.MultidimensionalCounter(intArray7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, -1]");
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray12 = multidimensionalCounter4.getCounts(97);
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int[] intArray14 = multidimensionalCounter4.getSizes();
        int[] intArray16 = multidimensionalCounter4.getCounts(1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 1, 0]");
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator12.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int int11 = multidimensionalCounter10.getDimension();
        int int12 = multidimensionalCounter10.getSize();
        int int13 = multidimensionalCounter10.getSize();
        int[] intArray15 = multidimensionalCounter10.getCounts(10);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1, 0, 0]");
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int int9 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        java.util.Spliterator<java.lang.Integer> intSpliterator18 = multidimensionalCounter17.spliterator();
        int int19 = multidimensionalCounter17.getSize();
        int[] intArray21 = multidimensionalCounter17.getCounts((int) (short) 100);
        int int22 = multidimensionalCounter11.getCount(intArray21);
        int[] intArray24 = multidimensionalCounter11.getCounts((int) '4');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter11.iterator();
        java.lang.Class<?> wildcardClass26 = iterator25.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[5, 2, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int int10 = multidimensionalCounter4.getDimension();
        int[] intArray11 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getSize();
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        int int16 = iterator14.getCount((int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray11 = multidimensionalCounter10.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter14.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = multidimensionalCounter4.getCounts(10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int int17 = multidimensionalCounter16.getSize();
        int[] intArray18 = multidimensionalCounter16.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter16.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter16.iterator();
        int[] intArray21 = multidimensionalCounter16.getSizes();
        int[] intArray22 = multidimensionalCounter16.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter23.iterator();
        int int25 = multidimensionalCounter23.getDimension();
        int int26 = multidimensionalCounter23.getSize();
        int[] intArray27 = multidimensionalCounter23.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = multidimensionalCounter4.getCount(intArray27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 1]");
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        int[] intArray9 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int int11 = multidimensionalCounter10.getSize();
        int int12 = multidimensionalCounter10.getDimension();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int[] intArray19 = multidimensionalCounter17.getCounts((int) (short) 0);
        int[] intArray21 = multidimensionalCounter17.getCounts(10);
        int int22 = multidimensionalCounter10.getCount(intArray21);
        int int23 = multidimensionalCounter4.getCount(intArray21);
        int int24 = multidimensionalCounter4.getDimension();
        int int25 = multidimensionalCounter4.getSize();
        int int26 = multidimensionalCounter4.getDimension();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator35 = multidimensionalCounter31.iterator();
        int[] intArray39 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter40 = new org.apache.commons.math.util.MultidimensionalCounter(intArray39);
        int int41 = multidimensionalCounter40.getDimension();
        int[] intArray43 = multidimensionalCounter40.getCounts((int) (short) 10);
        int int44 = multidimensionalCounter31.getCount(intArray43);
        int[] intArray45 = multidimensionalCounter31.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator46 = multidimensionalCounter31.iterator();
        int int47 = multidimensionalCounter31.getDimension();
        int[] intArray48 = multidimensionalCounter31.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int49 = multidimensionalCounter4.getCount(intArray48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, 10, 1]");
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = multidimensionalCounter4.getSize();
        int int14 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator15 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intSpliterator15);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = multidimensionalCounter4.getCounts(10);
        int[] intArray12 = multidimensionalCounter4.getCounts(1);
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator15 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intSpliterator15);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray24 = multidimensionalCounter21.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter21.iterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        int int34 = multidimensionalCounter21.getCount(intArray33);
        int int35 = multidimensionalCounter15.getCount(intArray33);
        int int36 = multidimensionalCounter4.getCount(intArray33);
        int int37 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator38 = multidimensionalCounter4.iterator();
        int int40 = iterator38.getCount(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(iterator38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int[] intArray19 = multidimensionalCounter4.getSizes();
        int[] intArray20 = multidimensionalCounter4.getSizes();
        int[] intArray21 = multidimensionalCounter4.getSizes();
        int[] intArray23 = multidimensionalCounter4.getCounts((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 1, 0]");
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator14.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray8 = iterator7.getCounts();
        java.lang.Class<?> wildcardClass9 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray10 = multidimensionalCounter4.getCounts(0);
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray11 = multidimensionalCounter10.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int[] intArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = multidimensionalCounter16.getCount(intArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int int8 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 2, 0]");
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter40 = new org.apache.commons.math.util.MultidimensionalCounter(intArray39);
        int[] intArray42 = multidimensionalCounter40.getCounts(32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter43 = new org.apache.commons.math.util.MultidimensionalCounter(intArray42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[3, 2, 0]");
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getSizes();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int[] intArray15 = multidimensionalCounter13.getCounts((int) (short) 0);
        int[] intArray17 = multidimensionalCounter13.getCounts((int) '#');
        int[] intArray19 = multidimensionalCounter13.getCounts(10);
        int int20 = multidimensionalCounter4.getCount(intArray19);
        int[] intArray22 = multidimensionalCounter4.getCounts((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 1, 0]");
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray9 = iterator8.getCounts();
        int int11 = iterator8.getCount(0);
        int[] intArray12 = iterator8.getCounts();
        boolean boolean13 = iterator8.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts(52);
        int[] intArray14 = multidimensionalCounter4.getCounts(10);
        int[] intArray18 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter19 = new org.apache.commons.math.util.MultidimensionalCounter(intArray18);
        int int20 = multidimensionalCounter19.getDimension();
        int int21 = multidimensionalCounter19.getDimension();
        int int22 = multidimensionalCounter19.getSize();
        int[] intArray26 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter27 = new org.apache.commons.math.util.MultidimensionalCounter(intArray26);
        int int28 = multidimensionalCounter27.getSize();
        int[] intArray29 = multidimensionalCounter27.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator30 = multidimensionalCounter27.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator31 = multidimensionalCounter27.iterator();
        int int32 = multidimensionalCounter27.getSize();
        int[] intArray36 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter37 = new org.apache.commons.math.util.MultidimensionalCounter(intArray36);
        int int38 = multidimensionalCounter37.getSize();
        int[] intArray39 = multidimensionalCounter37.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator40 = multidimensionalCounter37.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator41 = multidimensionalCounter37.iterator();
        int[] intArray45 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter46 = new org.apache.commons.math.util.MultidimensionalCounter(intArray45);
        int int47 = multidimensionalCounter46.getDimension();
        int[] intArray49 = multidimensionalCounter46.getCounts((int) (short) 10);
        int int50 = multidimensionalCounter37.getCount(intArray49);
        int int51 = multidimensionalCounter27.getCount(intArray49);
        int int52 = multidimensionalCounter19.getCount(intArray49);
        int int53 = multidimensionalCounter19.getSize();
        int[] intArray54 = multidimensionalCounter19.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator55 = multidimensionalCounter19.iterator();
        int[] intArray57 = multidimensionalCounter19.getCounts(100);
        int int58 = multidimensionalCounter4.getCount(intArray57);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[5, 2, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator40);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getCounts(10);
        int int10 = multidimensionalCounter4.getDimension();
        int int11 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int int18 = multidimensionalCounter17.getDimension();
        int int19 = multidimensionalCounter17.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter17.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator21 = multidimensionalCounter17.spliterator();
        int[] intArray23 = multidimensionalCounter17.getCounts((int) (byte) 1);
        int int24 = multidimensionalCounter17.getDimension();
        int[] intArray26 = multidimensionalCounter17.getCounts(4);
        int int27 = multidimensionalCounter4.getCount(intArray26);
        int[] intArray29 = multidimensionalCounter4.getCounts(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(intSpliterator21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 4, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0]");
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray24 = multidimensionalCounter21.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter21.iterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        int int34 = multidimensionalCounter21.getCount(intArray33);
        int int35 = multidimensionalCounter15.getCount(intArray33);
        int int36 = multidimensionalCounter4.getCount(intArray33);
        int int37 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator38 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(iterator38);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(10);
        int int12 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter6 = new org.apache.commons.math.util.MultidimensionalCounter(intArray5);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter6.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(97);
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter4.iterator();
        int int14 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray10 = multidimensionalCounter7.getCounts((int) 'a');
        int[] intArray11 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter12.iterator();
        int[] intArray14 = iterator13.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, -1]");
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int int17 = multidimensionalCounter16.getDimension();
        int int18 = multidimensionalCounter16.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter16.iterator();
        int[] intArray23 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter24 = new org.apache.commons.math.util.MultidimensionalCounter(intArray23);
        int int25 = multidimensionalCounter24.getSize();
        int[] intArray26 = multidimensionalCounter24.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter27 = new org.apache.commons.math.util.MultidimensionalCounter(intArray26);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator28 = multidimensionalCounter27.iterator();
        int[] intArray32 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter33 = new org.apache.commons.math.util.MultidimensionalCounter(intArray32);
        int int34 = multidimensionalCounter33.getDimension();
        int[] intArray36 = multidimensionalCounter33.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator37 = multidimensionalCounter33.iterator();
        int[] intArray41 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter42 = new org.apache.commons.math.util.MultidimensionalCounter(intArray41);
        int int43 = multidimensionalCounter42.getDimension();
        int[] intArray45 = multidimensionalCounter42.getCounts((int) (short) 10);
        int int46 = multidimensionalCounter33.getCount(intArray45);
        int int47 = multidimensionalCounter27.getCount(intArray45);
        int int48 = multidimensionalCounter16.getCount(intArray45);
        int int49 = multidimensionalCounter4.getCount(intArray45);
        int[] intArray53 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter54 = new org.apache.commons.math.util.MultidimensionalCounter(intArray53);
        int int55 = multidimensionalCounter54.getDimension();
        int[] intArray56 = multidimensionalCounter54.getSizes();
        int[] intArray58 = multidimensionalCounter54.getCounts((int) 'a');
        int int59 = multidimensionalCounter54.getSize();
        int int60 = multidimensionalCounter54.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator61 = multidimensionalCounter54.iterator();
        int[] intArray63 = multidimensionalCounter54.getCounts(3);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator64 = multidimensionalCounter54.iterator();
        int[] intArray66 = multidimensionalCounter54.getCounts(0);
        int int67 = multidimensionalCounter4.getCount(intArray66);
        int int68 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator37);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(iterator61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 3, 0]");
        org.junit.Assert.assertNotNull(iterator64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        int int8 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(iterator9);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        boolean boolean10 = iterator9.hasNext();
        int int11 = iterator9.getCount();
        int int12 = iterator9.getCount();
        int int13 = iterator9.getCount();
        // The following exception was thrown during execution in test generation
        try {
            iterator9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        int[] intArray16 = multidimensionalCounter4.getSizes();
        int int17 = multidimensionalCounter4.getSize();
        int[] intArray18 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter13.iterator();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getDimension();
        int[] intArray25 = multidimensionalCounter22.getCounts((int) (short) 10);
        int int26 = multidimensionalCounter13.getCount(intArray25);
        int int27 = multidimensionalCounter7.getCount(intArray25);
        int int28 = multidimensionalCounter7.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator29 = multidimensionalCounter7.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator30 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator31 = multidimensionalCounter7.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = multidimensionalCounter7.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intSpliterator29);
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertNotNull(intSpliterator31);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) '#');
        int int13 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intSpliterator14);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int[] intArray19 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter4.iterator();
        int int21 = iterator20.getCount();
        int int23 = iterator20.getCount(1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        int int15 = iterator14.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray10 = multidimensionalCounter4.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        int int13 = iterator11.getCount((int) (byte) 1);
        int[] intArray14 = iterator11.getCounts();
        java.lang.Class<?> wildcardClass15 = iterator11.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int int12 = multidimensionalCounter4.getSize();
        int int13 = multidimensionalCounter4.getSize();
        int[] intArray15 = multidimensionalCounter4.getCounts((int) ' ');
        int[] intArray19 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        int int21 = multidimensionalCounter20.getDimension();
        int[] intArray23 = multidimensionalCounter20.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter20.iterator();
        int[] intArray25 = multidimensionalCounter20.getSizes();
        int int26 = multidimensionalCounter20.getSize();
        int[] intArray27 = multidimensionalCounter20.getSizes();
        int[] intArray29 = multidimensionalCounter20.getCounts(2);
        int int30 = multidimensionalCounter4.getCount(intArray29);
        int[] intArray32 = multidimensionalCounter4.getCounts((int) 'a');
        int[] intArray34 = multidimensionalCounter4.getCounts((int) (byte) 0);
        int int35 = multidimensionalCounter4.getDimension();
        java.lang.Class<?> wildcardClass36 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[3, 2, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 2, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        int int12 = multidimensionalCounter7.getDimension();
        int int13 = multidimensionalCounter7.getSize();
        int[] intArray15 = multidimensionalCounter7.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter7.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator16);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter5 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter6 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int int39 = multidimensionalCounter4.getSize();
        int[] intArray40 = multidimensionalCounter4.getSizes();
        int int41 = multidimensionalCounter4.getSize();
        int[] intArray43 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator44 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator44);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter12.spliterator();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (byte) 1);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray25 = multidimensionalCounter23.getSizes();
        int[] intArray27 = multidimensionalCounter23.getCounts((int) 'a');
        int[] intArray29 = multidimensionalCounter23.getCounts((int) 'a');
        int int30 = multidimensionalCounter12.getCount(intArray29);
        int int31 = multidimensionalCounter4.getCount(intArray29);
        int[] intArray33 = multidimensionalCounter4.getCounts((int) (byte) 0);
        int int34 = multidimensionalCounter4.getSize();
        int[] intArray35 = multidimensionalCounter4.getSizes();
        int int36 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator37 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator38 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator38.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(iterator37);
        org.junit.Assert.assertNotNull(iterator38);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[3, 5, 0]");
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getDimension();
        int int16 = multidimensionalCounter14.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator18 = multidimensionalCounter14.spliterator();
        int[] intArray20 = multidimensionalCounter14.getCounts((int) (byte) 1);
        int[] intArray21 = multidimensionalCounter14.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = multidimensionalCounter4.getCount(intArray21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(intSpliterator18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        int int15 = multidimensionalCounter12.getSize();
        int[] intArray19 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        int int21 = multidimensionalCounter20.getSize();
        int[] intArray22 = multidimensionalCounter20.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator23 = multidimensionalCounter20.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter20.iterator();
        int int25 = multidimensionalCounter20.getSize();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getSize();
        int[] intArray32 = multidimensionalCounter30.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator33 = multidimensionalCounter30.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator34 = multidimensionalCounter30.iterator();
        int[] intArray38 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter39 = new org.apache.commons.math.util.MultidimensionalCounter(intArray38);
        int int40 = multidimensionalCounter39.getDimension();
        int[] intArray42 = multidimensionalCounter39.getCounts((int) (short) 10);
        int int43 = multidimensionalCounter30.getCount(intArray42);
        int int44 = multidimensionalCounter20.getCount(intArray42);
        int int45 = multidimensionalCounter12.getCount(intArray42);
        int int46 = multidimensionalCounter12.getSize();
        int int47 = multidimensionalCounter12.getSize();
        int[] intArray49 = multidimensionalCounter12.getCounts(10);
        int int50 = multidimensionalCounter4.getCount(intArray49);
        int[] intArray51 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator52 = multidimensionalCounter4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator52.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator33);
        org.junit.Assert.assertNotNull(iterator34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator52);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getSize();
        int[] intArray17 = multidimensionalCounter15.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        java.util.Spliterator<java.lang.Integer> intSpliterator19 = multidimensionalCounter18.spliterator();
        int[] intArray20 = multidimensionalCounter18.getSizes();
        int[] intArray22 = multidimensionalCounter18.getCounts((int) '4');
        int int23 = multidimensionalCounter4.getCount(intArray22);
        int int24 = multidimensionalCounter4.getSize();
        int[] intArray25 = multidimensionalCounter4.getSizes();
        int int26 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[5, 2, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter15.iterator();
        int[] intArray20 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int int22 = multidimensionalCounter21.getDimension();
        int[] intArray24 = multidimensionalCounter21.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter21.iterator();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        int int34 = multidimensionalCounter21.getCount(intArray33);
        int int35 = multidimensionalCounter15.getCount(intArray33);
        int int36 = multidimensionalCounter4.getCount(intArray33);
        java.util.Spliterator<java.lang.Integer> intSpliterator37 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator38 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator39 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator40 = multidimensionalCounter4.iterator();
        boolean boolean41 = iterator40.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intSpliterator37);
        org.junit.Assert.assertNotNull(intSpliterator38);
        org.junit.Assert.assertNotNull(intSpliterator39);
        org.junit.Assert.assertNotNull(iterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int int18 = multidimensionalCounter4.getDimension();
        int[] intArray19 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray13 = multidimensionalCounter11.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        int int15 = iterator14.getCount();
        boolean boolean16 = iterator14.hasNext();
        int[] intArray17 = iterator14.getCounts();
        int[] intArray18 = iterator14.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, -1]");
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        int int13 = multidimensionalCounter11.getDimension();
        int int14 = multidimensionalCounter11.getSize();
        int[] intArray15 = multidimensionalCounter11.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter11.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator16);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter10.iterator();
        int int12 = multidimensionalCounter10.getDimension();
        int int13 = multidimensionalCounter10.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter10.iterator();
        int[] intArray15 = multidimensionalCounter10.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = iterator8.getCount();
        int int11 = iterator8.getCount((int) (byte) 0);
        int[] intArray12 = iterator8.getCounts();
        int[] intArray13 = iterator8.getCounts();
        boolean boolean14 = iterator8.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, -1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 0);
        int int11 = multidimensionalCounter4.getSize();
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int int39 = multidimensionalCounter4.getSize();
        int[] intArray40 = multidimensionalCounter4.getSizes();
        int int41 = multidimensionalCounter4.getSize();
        int int42 = multidimensionalCounter4.getDimension();
        int int43 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator44 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(iterator44);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getSize();
        int[] intArray14 = multidimensionalCounter12.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter12.iterator();
        int int17 = multidimensionalCounter12.getSize();
        int[] intArray21 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int int23 = multidimensionalCounter22.getSize();
        int[] intArray24 = multidimensionalCounter22.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator25 = multidimensionalCounter22.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter22.iterator();
        int[] intArray30 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter31 = new org.apache.commons.math.util.MultidimensionalCounter(intArray30);
        int int32 = multidimensionalCounter31.getDimension();
        int[] intArray34 = multidimensionalCounter31.getCounts((int) (short) 10);
        int int35 = multidimensionalCounter22.getCount(intArray34);
        int int36 = multidimensionalCounter12.getCount(intArray34);
        int int37 = multidimensionalCounter4.getCount(intArray34);
        int int38 = multidimensionalCounter4.getSize();
        int[] intArray39 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator40 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator41 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator42 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator25);
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator40);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(iterator42);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int int13 = multidimensionalCounter4.getSize();
        int int14 = multidimensionalCounter4.getSize();
        int[] intArray16 = multidimensionalCounter4.getCounts(10);
        int[] intArray18 = multidimensionalCounter4.getCounts((int) (byte) 10);
        int[] intArray20 = multidimensionalCounter4.getCounts(32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[3, 2, 0]");
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray8 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 0);
        int int11 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intSpliterator12);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter4.iterator();
        int int14 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter4.iterator();
        int int16 = iterator15.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts(3);
        int int12 = multidimensionalCounter4.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 3, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        int int15 = multidimensionalCounter11.getDimension();
        int[] intArray16 = multidimensionalCounter11.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter10.iterator();
        boolean boolean12 = iterator11.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int int11 = multidimensionalCounter10.getDimension();
        int int12 = multidimensionalCounter10.getSize();
        int int13 = multidimensionalCounter10.getDimension();
        int[] intArray15 = multidimensionalCounter10.getCounts(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = multidimensionalCounter4.getCounts(10);
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        int int12 = multidimensionalCounter4.getSize();
        int int13 = multidimensionalCounter4.getSize();
        int[] intArray14 = multidimensionalCounter4.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray9 = multidimensionalCounter4.getCounts(0);
        int int10 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int[] intArray18 = multidimensionalCounter16.getCounts((int) (short) 0);
        int[] intArray20 = multidimensionalCounter16.getCounts((int) '#');
        int int21 = multidimensionalCounter16.getSize();
        int[] intArray23 = multidimensionalCounter16.getCounts(3);
        int int24 = multidimensionalCounter16.getDimension();
        int int25 = multidimensionalCounter16.getDimension();
        int[] intArray29 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter30 = new org.apache.commons.math.util.MultidimensionalCounter(intArray29);
        int int31 = multidimensionalCounter30.getDimension();
        int[] intArray33 = multidimensionalCounter30.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator34 = multidimensionalCounter30.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator35 = multidimensionalCounter30.spliterator();
        int[] intArray36 = multidimensionalCounter30.getSizes();
        int[] intArray38 = multidimensionalCounter30.getCounts(52);
        int int39 = multidimensionalCounter16.getCount(intArray38);
        int int40 = multidimensionalCounter4.getCount(intArray38);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 3, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator34);
        org.junit.Assert.assertNotNull(intSpliterator35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[5, 2, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        // The following exception was thrown during execution in test generation
        try {
            iterator11.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        int[] intArray16 = multidimensionalCounter4.getCounts((int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 1, 0]");
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getDimension();
        int int11 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int14 = iterator12.getCount((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            iterator12.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int int13 = multidimensionalCounter4.getSize();
        int int14 = multidimensionalCounter4.getSize();
        int[] intArray16 = multidimensionalCounter4.getCounts(32);
        int int17 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[3, 2, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int[] intArray13 = multidimensionalCounter4.getCounts(100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[10, 0, 0]");
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray11 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int13 = multidimensionalCounter12.getDimension();
        int int14 = multidimensionalCounter12.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter12.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter12.spliterator();
        int[] intArray18 = multidimensionalCounter12.getCounts((int) (byte) 1);
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray25 = multidimensionalCounter23.getSizes();
        int[] intArray27 = multidimensionalCounter23.getCounts((int) 'a');
        int[] intArray29 = multidimensionalCounter23.getCounts((int) 'a');
        int int30 = multidimensionalCounter12.getCount(intArray29);
        int int31 = multidimensionalCounter4.getCount(intArray29);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator32 = multidimensionalCounter4.iterator();
        int int33 = multidimensionalCounter4.getSize();
        int[] intArray37 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter38 = new org.apache.commons.math.util.MultidimensionalCounter(intArray37);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator39 = multidimensionalCounter38.iterator();
        int int40 = multidimensionalCounter38.getDimension();
        int[] intArray42 = multidimensionalCounter38.getCounts((int) 'a');
        int int43 = multidimensionalCounter4.getCount(intArray42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter44 = new org.apache.commons.math.util.MultidimensionalCounter(intArray42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(iterator32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray7 = multidimensionalCounter4.getSizes();
        int int8 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int int10 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int[] intArray12 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        int[] intArray19 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter4.iterator();
        int int21 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator6 = multidimensionalCounter4.spliterator();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray9 = multidimensionalCounter4.getCounts(0);
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray14 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int int16 = multidimensionalCounter15.getSize();
        int[] intArray17 = multidimensionalCounter15.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        java.util.Spliterator<java.lang.Integer> intSpliterator19 = multidimensionalCounter18.spliterator();
        int[] intArray20 = multidimensionalCounter18.getSizes();
        int[] intArray21 = multidimensionalCounter18.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        int[] intArray24 = multidimensionalCounter22.getCounts(2);
        int int25 = multidimensionalCounter4.getCount(intArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter26 = new org.apache.commons.math.util.MultidimensionalCounter(intArray24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intSpliterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 2, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter12.spliterator();
        int[] intArray15 = multidimensionalCounter12.getCounts(4);
        int[] intArray16 = multidimensionalCounter12.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 4, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int int12 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter4.iterator();
        int[] intArray14 = multidimensionalCounter4.getSizes();
        int int15 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(iterator16);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        int int13 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        int int15 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int[] intArray9 = multidimensionalCounter4.getCounts(35);
        int int10 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter7.spliterator();
        int int12 = multidimensionalCounter7.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int[] intArray15 = multidimensionalCounter4.getCounts(100);
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter4.spliterator();
        int[] intArray18 = multidimensionalCounter4.getCounts(97);
        int int19 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int int11 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray14 = multidimensionalCounter4.getCounts((int) (short) 1);
        int int15 = multidimensionalCounter4.getDimension();
        int int16 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter10.iterator();
        java.lang.Class<?> wildcardClass12 = iterator11.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int int18 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter4.iterator();
        boolean boolean20 = iterator19.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator19.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int int11 = multidimensionalCounter4.getSize();
        int[] intArray13 = multidimensionalCounter4.getCounts(32);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        boolean boolean15 = iterator14.hasNext();
        int int16 = iterator14.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[3, 2, 0]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray12 = multidimensionalCounter10.getCounts((int) (byte) 10);
        int[] intArray14 = multidimensionalCounter10.getCounts((int) (short) 100);
        int[] intArray15 = multidimensionalCounter10.getSizes();
        int int16 = multidimensionalCounter10.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        int[] intArray9 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int int11 = multidimensionalCounter10.getSize();
        int int12 = multidimensionalCounter10.getDimension();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int[] intArray19 = multidimensionalCounter17.getCounts((int) (short) 0);
        int[] intArray21 = multidimensionalCounter17.getCounts(10);
        int int22 = multidimensionalCounter10.getCount(intArray21);
        int int23 = multidimensionalCounter4.getCount(intArray21);
        int int24 = multidimensionalCounter4.getDimension();
        int int25 = multidimensionalCounter4.getSize();
        int int26 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator27 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator28 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator29 = multidimensionalCounter4.iterator();
        int[] intArray33 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter34 = new org.apache.commons.math.util.MultidimensionalCounter(intArray33);
        int int35 = multidimensionalCounter34.getDimension();
        int[] intArray36 = multidimensionalCounter34.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator37 = multidimensionalCounter34.iterator();
        int int38 = multidimensionalCounter34.getSize();
        int[] intArray39 = multidimensionalCounter34.getSizes();
        int int40 = multidimensionalCounter34.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator41 = multidimensionalCounter34.iterator();
        int int42 = iterator41.getCount();
        int[] intArray43 = iterator41.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int44 = multidimensionalCounter4.getCount(intArray43);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 0] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(iterator27);
        org.junit.Assert.assertNotNull(iterator28);
        org.junit.Assert.assertNotNull(iterator29);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, -1]");
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator19 = multidimensionalCounter4.spliterator();
        int[] intArray20 = multidimensionalCounter4.getSizes();
        int[] intArray21 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter22 = new org.apache.commons.math.util.MultidimensionalCounter(intArray21);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[32, 10, 1]");
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) (short) 0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int int10 = multidimensionalCounter4.getDimension();
        int int11 = multidimensionalCounter4.getSize();
        int int12 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(iterator14);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        int int13 = multidimensionalCounter11.getDimension();
        int int14 = multidimensionalCounter11.getSize();
        int[] intArray15 = multidimensionalCounter11.getSizes();
        int[] intArray19 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        int int21 = multidimensionalCounter20.getDimension();
        int int22 = multidimensionalCounter20.getDimension();
        int int23 = multidimensionalCounter20.getSize();
        int[] intArray27 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter28 = new org.apache.commons.math.util.MultidimensionalCounter(intArray27);
        int int29 = multidimensionalCounter28.getSize();
        int[] intArray30 = multidimensionalCounter28.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator31 = multidimensionalCounter28.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator32 = multidimensionalCounter28.iterator();
        int int33 = multidimensionalCounter28.getSize();
        int[] intArray37 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter38 = new org.apache.commons.math.util.MultidimensionalCounter(intArray37);
        int int39 = multidimensionalCounter38.getSize();
        int[] intArray40 = multidimensionalCounter38.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator41 = multidimensionalCounter38.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator42 = multidimensionalCounter38.iterator();
        int[] intArray46 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter47 = new org.apache.commons.math.util.MultidimensionalCounter(intArray46);
        int int48 = multidimensionalCounter47.getDimension();
        int[] intArray50 = multidimensionalCounter47.getCounts((int) (short) 10);
        int int51 = multidimensionalCounter38.getCount(intArray50);
        int int52 = multidimensionalCounter28.getCount(intArray50);
        int int53 = multidimensionalCounter20.getCount(intArray50);
        int int54 = multidimensionalCounter20.getSize();
        int[] intArray55 = multidimensionalCounter20.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator56 = multidimensionalCounter20.iterator();
        int[] intArray58 = multidimensionalCounter20.getCounts(100);
        int int59 = multidimensionalCounter11.getCount(intArray58);
        int int60 = multidimensionalCounter11.getDimension();
        java.lang.Class<?> wildcardClass61 = multidimensionalCounter11.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator31);
        org.junit.Assert.assertNotNull(iterator32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator41);
        org.junit.Assert.assertNotNull(iterator42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 100 + "'", int59 == 100);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        int int6 = multidimensionalCounter4.getSize();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) (short) 100);
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray9 = multidimensionalCounter4.getCounts(0);
        int[] intArray11 = multidimensionalCounter4.getCounts(1);
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int int17 = multidimensionalCounter16.getSize();
        int[] intArray18 = multidimensionalCounter16.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator19 = multidimensionalCounter16.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator20 = multidimensionalCounter16.iterator();
        int[] intArray22 = multidimensionalCounter16.getCounts((int) 'a');
        int[] intArray24 = multidimensionalCounter16.getCounts(97);
        int[] intArray25 = multidimensionalCounter16.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = multidimensionalCounter4.getCount(intArray25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator19);
        org.junit.Assert.assertNotNull(iterator20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        int int13 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator15 = multidimensionalCounter4.spliterator();
        int[] intArray16 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator17 = multidimensionalCounter4.spliterator();
        int[] intArray19 = multidimensionalCounter4.getCounts(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(intSpliterator15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0]");
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray11 = multidimensionalCounter4.getCounts(0);
        int int12 = multidimensionalCounter4.getSize();
        int int13 = multidimensionalCounter4.getSize();
        int[] intArray15 = multidimensionalCounter4.getCounts((int) ' ');
        int[] intArray19 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter20 = new org.apache.commons.math.util.MultidimensionalCounter(intArray19);
        int int21 = multidimensionalCounter20.getDimension();
        int[] intArray23 = multidimensionalCounter20.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator24 = multidimensionalCounter20.iterator();
        int[] intArray25 = multidimensionalCounter20.getSizes();
        int int26 = multidimensionalCounter20.getSize();
        int[] intArray27 = multidimensionalCounter20.getSizes();
        int[] intArray29 = multidimensionalCounter20.getCounts(2);
        int int30 = multidimensionalCounter4.getCount(intArray29);
        int[] intArray32 = multidimensionalCounter4.getCounts((int) 'a');
        java.util.Spliterator<java.lang.Integer> intSpliterator33 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator34 = multidimensionalCounter4.iterator();
        int int36 = iterator34.getCount(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[3, 2, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 2, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intSpliterator33);
        org.junit.Assert.assertNotNull(iterator34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 10);
        int int11 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        int[] intArray13 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int[] intArray18 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter19 = new org.apache.commons.math.util.MultidimensionalCounter(intArray18);
        int int20 = multidimensionalCounter19.getDimension();
        int[] intArray22 = multidimensionalCounter19.getCounts((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator23 = multidimensionalCounter19.spliterator();
        int[] intArray25 = multidimensionalCounter19.getCounts((int) (byte) 10);
        int int26 = multidimensionalCounter19.getDimension();
        int[] intArray28 = multidimensionalCounter19.getCounts(0);
        int int29 = multidimensionalCounter14.getCount(intArray28);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray11 = multidimensionalCounter10.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
        int int15 = multidimensionalCounter14.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int[] intArray15 = multidimensionalCounter4.getCounts(100);
        java.util.Spliterator<java.lang.Integer> intSpliterator16 = multidimensionalCounter4.spliterator();
        int[] intArray17 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int int19 = multidimensionalCounter18.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator20 = multidimensionalCounter18.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(intSpliterator20);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        int int13 = multidimensionalCounter11.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator14 = multidimensionalCounter11.spliterator();
        int[] intArray16 = multidimensionalCounter11.getCounts(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intSpliterator14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0]");
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertNotNull(intSpliterator10);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        int[] intArray9 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int int11 = multidimensionalCounter10.getSize();
        int int12 = multidimensionalCounter10.getDimension();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        int[] intArray19 = multidimensionalCounter17.getCounts((int) (short) 0);
        int[] intArray21 = multidimensionalCounter17.getCounts(10);
        int int22 = multidimensionalCounter10.getCount(intArray21);
        int int23 = multidimensionalCounter4.getCount(intArray21);
        int int24 = multidimensionalCounter4.getDimension();
        int int25 = multidimensionalCounter4.getSize();
        int int26 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator27 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator28 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator29 = multidimensionalCounter4.iterator();
        boolean boolean30 = iterator29.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(iterator27);
        org.junit.Assert.assertNotNull(iterator28);
        org.junit.Assert.assertNotNull(iterator29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        java.util.Spliterator<java.lang.Integer> intSpliterator5 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        boolean boolean7 = iterator6.hasNext();
        int[] intArray8 = iterator6.getCounts();
        boolean boolean9 = iterator6.hasNext();
        int int11 = iterator6.getCount(2);
        boolean boolean12 = iterator6.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator6.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator5);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter4.spliterator();
        int int12 = multidimensionalCounter4.getSize();
        int[] intArray13 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int10 = iterator8.getCount(1);
        boolean boolean11 = iterator8.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter12.spliterator();
        int[] intArray15 = multidimensionalCounter12.getCounts(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0]");
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray11 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int[] intArray15 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter16 = new org.apache.commons.math.util.MultidimensionalCounter(intArray15);
        int int17 = multidimensionalCounter16.getSize();
        int[] intArray19 = multidimensionalCounter16.getCounts((int) (short) 10);
        int[] intArray20 = multidimensionalCounter16.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter21 = new org.apache.commons.math.util.MultidimensionalCounter(intArray20);
        int[] intArray22 = multidimensionalCounter21.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = multidimensionalCounter4.getCount(intArray22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        boolean boolean13 = iterator12.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            iterator12.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray9 = multidimensionalCounter4.getCounts(0);
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter7.spliterator();
        int[] intArray13 = multidimensionalCounter7.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter7.iterator();
        int[] intArray16 = multidimensionalCounter7.getCounts(97);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[9, 7, 0]");
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter11.iterator();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = iterator14.getCount((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts(52);
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int[] intArray15 = multidimensionalCounter4.getCounts(35);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[5, 2, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[3, 5, 0]");
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray11 = multidimensionalCounter10.getSizes();
        int[] intArray12 = multidimensionalCounter10.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter10.spliterator();
        int int14 = multidimensionalCounter10.getDimension();
        int int15 = multidimensionalCounter10.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts((int) (byte) 1);
        int[] intArray13 = multidimensionalCounter4.getSizes();
        int[] intArray15 = multidimensionalCounter4.getCounts(100);
        int int16 = multidimensionalCounter4.getDimension();
        int[] intArray18 = multidimensionalCounter4.getCounts(32);
        int[] intArray20 = multidimensionalCounter4.getCounts((int) ' ');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[3, 2, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[3, 2, 0]");
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 10);
        int int11 = multidimensionalCounter4.getDimension();
        int[] intArray13 = multidimensionalCounter4.getCounts((int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0]");
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        boolean boolean8 = iterator7.hasNext();
        int[] intArray9 = iterator7.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            iterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, -1]");
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter7.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter7.spliterator();
        int[] intArray11 = multidimensionalCounter7.getCounts(32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter12 = new org.apache.commons.math.util.MultidimensionalCounter(intArray11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[3, 2, 0]");
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        int[] intArray9 = multidimensionalCounter4.getCounts((int) '4');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        java.lang.Class<?> wildcardClass11 = iterator10.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[5, 2, 0]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator9 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        int[] intArray12 = multidimensionalCounter4.getCounts(52);
        int[] intArray14 = multidimensionalCounter4.getCounts(10);
        java.util.Spliterator<java.lang.Integer> intSpliterator15 = multidimensionalCounter4.spliterator();
        int int16 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intSpliterator9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[5, 2, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray26 = multidimensionalCounter23.getCounts((int) (short) 10);
        int int27 = multidimensionalCounter14.getCount(intArray26);
        int int28 = multidimensionalCounter4.getCount(intArray26);
        int int29 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator30 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator31 = multidimensionalCounter4.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = multidimensionalCounter4.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 1 != 3");
        } catch (org.apache.commons.math.exception.DimensionMismatchException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertNotNull(intSpliterator31);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray12 = multidimensionalCounter4.getCounts((int) 'a');
        java.util.Spliterator<java.lang.Integer> intSpliterator13 = multidimensionalCounter4.spliterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[9, 7, 0]");
        org.junit.Assert.assertNotNull(intSpliterator13);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getSize();
        int[] intArray9 = multidimensionalCounter4.getCounts(10);
        int int10 = multidimensionalCounter4.getDimension();
        int int11 = multidimensionalCounter4.getSize();
        int[] intArray13 = multidimensionalCounter4.getCounts(4);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 4, 0]");
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray5 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int[] intArray7 = multidimensionalCounter4.getSizes();
        int int8 = multidimensionalCounter4.getDimension();
        int int9 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(iterator10);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int[] intArray18 = multidimensionalCounter4.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator19 = multidimensionalCounter4.spliterator();
        int[] intArray20 = multidimensionalCounter4.getSizes();
        int int21 = multidimensionalCounter4.getDimension();
        java.lang.Class<?> wildcardClass22 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 10);
        int int11 = multidimensionalCounter4.getDimension();
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        int[] intArray13 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        int[] intArray15 = iterator14.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, -1]");
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray12 = multidimensionalCounter10.getCounts((int) (byte) 10);
        int[] intArray14 = multidimensionalCounter10.getCounts((int) (short) 100);
        int int15 = multidimensionalCounter10.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator16 = multidimensionalCounter10.iterator();
        int[] intArray18 = multidimensionalCounter10.getCounts((int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(iterator16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[10, 0, 0]");
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter7.iterator();
        int int12 = multidimensionalCounter7.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter7.iterator();
        int int15 = iterator13.getCount(2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray26 = multidimensionalCounter23.getCounts((int) (short) 10);
        int int27 = multidimensionalCounter14.getCount(intArray26);
        int int28 = multidimensionalCounter4.getCount(intArray26);
        int int29 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator30 = multidimensionalCounter4.spliterator();
        int int31 = multidimensionalCounter4.getDimension();
        int[] intArray33 = multidimensionalCounter4.getCounts(0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intSpliterator30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0]");
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        int[] intArray10 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getSize();
        int[] intArray13 = multidimensionalCounter11.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator15 = multidimensionalCounter11.iterator();
        int[] intArray16 = multidimensionalCounter11.getSizes();
        int[] intArray18 = multidimensionalCounter11.getCounts(0);
        int int19 = multidimensionalCounter4.getCount(intArray18);
        int int20 = multidimensionalCounter4.getSize();
        java.lang.Class<?> wildcardClass21 = multidimensionalCounter4.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(iterator15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) '#');
        java.util.Spliterator<java.lang.Integer> intSpliterator7 = multidimensionalCounter4.spliterator();
        int int8 = multidimensionalCounter4.getSize();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3, 5, 0]");
        org.junit.Assert.assertNotNull(intSpliterator7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray13 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter14 = new org.apache.commons.math.util.MultidimensionalCounter(intArray13);
        int int15 = multidimensionalCounter14.getSize();
        int[] intArray16 = multidimensionalCounter14.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator17 = multidimensionalCounter14.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator18 = multidimensionalCounter14.iterator();
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getDimension();
        int[] intArray26 = multidimensionalCounter23.getCounts((int) (short) 10);
        int int27 = multidimensionalCounter14.getCount(intArray26);
        int int28 = multidimensionalCounter4.getCount(intArray26);
        int int29 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator30 = multidimensionalCounter4.iterator();
        int[] intArray32 = multidimensionalCounter4.getCounts(1);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator33 = multidimensionalCounter4.iterator();
        int[] intArray37 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter38 = new org.apache.commons.math.util.MultidimensionalCounter(intArray37);
        int int39 = multidimensionalCounter38.getSize();
        int[] intArray40 = multidimensionalCounter38.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter41 = new org.apache.commons.math.util.MultidimensionalCounter(intArray40);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator42 = multidimensionalCounter41.iterator();
        int[] intArray43 = multidimensionalCounter41.getSizes();
        // The following exception was thrown during execution in test generation
        try {
            int int44 = multidimensionalCounter4.getCount(intArray43);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: 32 out of [0, 31] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator17);
        org.junit.Assert.assertNotNull(iterator18);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 1, 0]");
        org.junit.Assert.assertNotNull(iterator33);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator42);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[32, 10, 1]");
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int[] intArray6 = multidimensionalCounter4.getCounts((int) (short) 0);
        int[] intArray8 = multidimensionalCounter4.getCounts(10);
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int[] intArray11 = multidimensionalCounter4.getSizes();
        int[] intArray13 = multidimensionalCounter4.getCounts((int) ' ');
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter4.iterator();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[3, 2, 0]");
        org.junit.Assert.assertNotNull(iterator14);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator10 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int int13 = multidimensionalCounter4.getSize();
        int[] intArray14 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter15 = new org.apache.commons.math.util.MultidimensionalCounter(intArray14);
        int[] intArray17 = multidimensionalCounter15.getCounts((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intSpliterator10);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[3, 2, 0]");
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray12 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter13 = new org.apache.commons.math.util.MultidimensionalCounter(intArray12);
        int int14 = multidimensionalCounter13.getDimension();
        int[] intArray16 = multidimensionalCounter13.getCounts((int) (short) 10);
        int int17 = multidimensionalCounter4.getCount(intArray16);
        int int18 = multidimensionalCounter4.getSize();
        int[] intArray22 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter23 = new org.apache.commons.math.util.MultidimensionalCounter(intArray22);
        int int24 = multidimensionalCounter23.getSize();
        int[] intArray25 = multidimensionalCounter23.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter23.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator27 = multidimensionalCounter23.iterator();
        int int28 = multidimensionalCounter23.getSize();
        java.util.Spliterator<java.lang.Integer> intSpliterator29 = multidimensionalCounter23.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator30 = multidimensionalCounter23.iterator();
        int[] intArray34 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter35 = new org.apache.commons.math.util.MultidimensionalCounter(intArray34);
        int[] intArray36 = multidimensionalCounter35.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator37 = multidimensionalCounter35.iterator();
        int int38 = multidimensionalCounter35.getSize();
        int[] intArray40 = multidimensionalCounter35.getCounts(10);
        int int41 = multidimensionalCounter23.getCount(intArray40);
        int int42 = multidimensionalCounter4.getCount(intArray40);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertNotNull(iterator27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intSpliterator29);
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int[] intArray9 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter10 = new org.apache.commons.math.util.MultidimensionalCounter(intArray9);
        int[] intArray12 = multidimensionalCounter10.getCounts((int) (byte) 10);
        int[] intArray13 = multidimensionalCounter10.getSizes();
        int int14 = multidimensionalCounter10.getDimension();
        int[] intArray18 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter19 = new org.apache.commons.math.util.MultidimensionalCounter(intArray18);
        int int20 = multidimensionalCounter19.getDimension();
        int[] intArray22 = multidimensionalCounter19.getCounts((int) (short) 10);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator23 = multidimensionalCounter19.iterator();
        int[] intArray24 = multidimensionalCounter19.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter25 = new org.apache.commons.math.util.MultidimensionalCounter(intArray24);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator26 = multidimensionalCounter25.iterator();
        int int27 = multidimensionalCounter25.getDimension();
        int[] intArray29 = multidimensionalCounter25.getCounts(4);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator30 = multidimensionalCounter25.iterator();
        int[] intArray32 = multidimensionalCounter25.getCounts((int) '#');
        int int33 = multidimensionalCounter10.getCount(intArray32);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(iterator23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 4, 0]");
        org.junit.Assert.assertNotNull(iterator30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[3, 5, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) (short) 0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator9 = multidimensionalCounter4.iterator();
        int int10 = multidimensionalCounter4.getDimension();
        int int11 = multidimensionalCounter4.getSize();
        int int12 = multidimensionalCounter4.getSize();
        int int13 = multidimensionalCounter4.getDimension();
        int[] intArray17 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter18 = new org.apache.commons.math.util.MultidimensionalCounter(intArray17);
        int int19 = multidimensionalCounter18.getSize();
        int[] intArray20 = multidimensionalCounter18.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator21 = multidimensionalCounter18.iterator();
        int int22 = iterator21.getCount();
        int[] intArray23 = iterator21.getCounts();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = multidimensionalCounter4.getCount(intArray23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.OutOfRangeException; message: -1 out of [0, 0] range");
        } catch (org.apache.commons.math.exception.OutOfRangeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, -1]");
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator5 = multidimensionalCounter4.iterator();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator10 = multidimensionalCounter4.iterator();
        int[] intArray11 = iterator10.getCounts();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(iterator10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, -1]");
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator8 = multidimensionalCounter4.iterator();
        int int9 = multidimensionalCounter4.getSize();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int int12 = multidimensionalCounter11.getDimension();
        int[] intArray16 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter17 = new org.apache.commons.math.util.MultidimensionalCounter(intArray16);
        java.util.Spliterator<java.lang.Integer> intSpliterator18 = multidimensionalCounter17.spliterator();
        int int19 = multidimensionalCounter17.getSize();
        int[] intArray21 = multidimensionalCounter17.getCounts((int) (short) 100);
        int int22 = multidimensionalCounter11.getCount(intArray21);
        int[] intArray24 = multidimensionalCounter11.getCounts((int) '4');
        java.lang.Class<?> wildcardClass25 = multidimensionalCounter11.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(iterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[5, 2, 0]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator5 = multidimensionalCounter4.iterator();
        int int6 = multidimensionalCounter4.getDimension();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray11 = multidimensionalCounter4.getCounts((int) (byte) 0);
        java.util.Spliterator<java.lang.Integer> intSpliterator12 = multidimensionalCounter4.spliterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator13 = multidimensionalCounter4.iterator();
        int[] intArray14 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator12);
        org.junit.Assert.assertNotNull(iterator13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        int[] intArray8 = multidimensionalCounter4.getCounts((int) 'a');
        int int9 = multidimensionalCounter4.getSize();
        int int10 = multidimensionalCounter4.getSize();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator11 = multidimensionalCounter4.iterator();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator12 = multidimensionalCounter4.iterator();
        int[] intArray13 = iterator12.getCounts();
        boolean boolean14 = iterator12.hasNext();
        boolean boolean15 = iterator12.hasNext();
        boolean boolean16 = iterator12.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[9, 7, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iterator11);
        org.junit.Assert.assertNotNull(iterator12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator6 = multidimensionalCounter4.iterator();
        int int7 = multidimensionalCounter4.getDimension();
        int[] intArray9 = multidimensionalCounter4.getCounts(0);
        int int10 = multidimensionalCounter4.getSize();
        int int11 = multidimensionalCounter4.getDimension();
        int int12 = multidimensionalCounter4.getDimension();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(iterator6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator7 = multidimensionalCounter4.iterator();
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int int9 = multidimensionalCounter4.getDimension();
        int[] intArray10 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter11 = new org.apache.commons.math.util.MultidimensionalCounter(intArray10);
        int[] intArray13 = multidimensionalCounter11.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter11.iterator();
        int int15 = iterator14.getCount();
        int[] intArray16 = iterator14.getCounts();
        boolean boolean17 = iterator14.hasNext();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(iterator7);
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getDimension();
        int[] intArray7 = multidimensionalCounter4.getCounts((int) (short) 10);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter4.spliterator();
        int[] intArray10 = multidimensionalCounter4.getCounts((int) (byte) 10);
        int int11 = multidimensionalCounter4.getDimension();
        int[] intArray13 = multidimensionalCounter4.getCounts(0);
        int[] intArray14 = multidimensionalCounter4.getSizes();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1, 0, 0]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, 10, 1]");
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        int[] intArray3 = new int[] { ' ', (short) 10, (byte) 1 };
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter4 = new org.apache.commons.math.util.MultidimensionalCounter(intArray3);
        int int5 = multidimensionalCounter4.getSize();
        int[] intArray6 = multidimensionalCounter4.getSizes();
        org.apache.commons.math.util.MultidimensionalCounter multidimensionalCounter7 = new org.apache.commons.math.util.MultidimensionalCounter(intArray6);
        java.util.Spliterator<java.lang.Integer> intSpliterator8 = multidimensionalCounter7.spliterator();
        int[] intArray9 = multidimensionalCounter7.getSizes();
        int[] intArray10 = multidimensionalCounter7.getSizes();
        java.util.Spliterator<java.lang.Integer> intSpliterator11 = multidimensionalCounter7.spliterator();
        int[] intArray13 = multidimensionalCounter7.getCounts(0);
        org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator14 = multidimensionalCounter7.iterator();
        int[] intArray15 = iterator14.getCounts();
        int int16 = iterator14.getCount();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[32, 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, 10, 1]");
        org.junit.Assert.assertNotNull(intSpliterator11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0]");
        org.junit.Assert.assertNotNull(iterator14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }
}

